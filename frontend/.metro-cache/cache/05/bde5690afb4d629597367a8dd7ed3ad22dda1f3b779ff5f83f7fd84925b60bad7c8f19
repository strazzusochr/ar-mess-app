{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":106,"index":106}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":107},"end":{"line":2,"column":77,"index":184}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"],"imports":1}},{"name":"./RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":185},"end":{"line":3,"column":63,"index":248}}],"key":"I+7uSAstO8eEOs35HbXycwhHsmk=","exportNames":["*"],"imports":1}},{"name":"./Sound","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":249},"end":{"line":4,"column":32,"index":281}}],"key":"/AmsCczpb+cEWj52kLwrv57uCLQ=","exportNames":["*"],"imports":1}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":66,"index":348}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"],"imports":1}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":349},"end":{"line":6,"column":39,"index":388}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"],"imports":1}},{"name":"./Recording.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":405,"column":0,"index":18427},"end":{"line":405,"column":34,"index":18461}}],"key":"naz3Z70IbfNhaPL9MpXy4n4698o=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  Object.defineProperty(exports, \"usePermissions\", {\n    enumerable: true,\n    get: function () {\n      return usePermissions;\n    }\n  });\n  Object.defineProperty(exports, \"Recording\", {\n    enumerable: true,\n    get: function () {\n      return Recording;\n    }\n  });\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function () {\n      return _expoModulesCore.PermissionStatus;\n    }\n  });\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[1], \"./AudioAvailability\");\n  var _RecordingConstants = require(_dependencyMap[2], \"./RecordingConstants\");\n  Object.keys(_RecordingConstants).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _RecordingConstants[k];\n        }\n      });\n    }\n  });\n  var _Sound = require(_dependencyMap[3], \"./Sound\");\n  var _AV = require(_dependencyMap[4], \"../AV\");\n  var _ExponentAV = require(_dependencyMap[5], \"../ExponentAV\");\n  var ExponentAV = _interopDefault(_ExponentAV);\n  var _RecordingTypes = require(_dependencyMap[6], \"./Recording.types\");\n  Object.keys(_RecordingTypes).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _RecordingTypes[k];\n        }\n      });\n    }\n  });\n  let _recorderExists = false;\n  const eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.LegacyEventEmitter(ExponentAV.default) : null;\n  /**\n   * Checks user's permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  async function getPermissionsAsync() {\n    return ExponentAV.default.getPermissionsAsync();\n  }\n  /**\n   * Asks the user to grant permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  async function requestPermissionsAsync() {\n    return ExponentAV.default.requestPermissionsAsync();\n  }\n  /**\n   * Check or request permissions to record audio.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = Audio.usePermissions();\n   * ```\n   */\n  const usePermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getPermissionsAsync,\n    requestMethod: requestPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * > **warning** **Warning**: Experimental for web.\n   *\n   * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n   * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n   * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n   * at any given time.\n   *\n   * Note that your experience must request audio recording permissions in order for recording to function.\n   * See the [`Permissions` module](/guides/permissions) for more details.\n   *\n   * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n   *\n   * @example\n   * ```ts\n   * const recording = new Audio.Recording();\n   * try {\n   *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n   *   await recording.startAsync();\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A newly constructed instance of `Audio.Recording`.\n   * @platform android\n   * @platform ios\n   */\n  class Recording {\n    _subscription = null;\n    _canRecord = false;\n    _isDoneRecording = false;\n    _finalDurationMillis = 0;\n    _uri = null;\n    _onRecordingStatusUpdate = null;\n    _progressUpdateTimeoutVariable = null;\n    _progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    _options = null;\n    // Internal methods\n    _cleanupForUnloadedRecorder = async finalStatus => {\n      this._canRecord = false;\n      this._isDoneRecording = true;\n      this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n      _recorderExists = false;\n      if (this._subscription) {\n        this._subscription.remove();\n        this._subscription = null;\n      }\n      this._disablePolling();\n      return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n    };\n    _pollingLoop = async () => {\n      if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._progressUpdateTimeoutVariable = setTimeout(this._pollingLoop, this._progressUpdateIntervalMillis);\n        try {\n          await this.getStatusAsync();\n        } catch {\n          this._disablePolling();\n        }\n      }\n    };\n    _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n    _enablePollingIfNecessaryAndPossible() {\n      if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n        this._pollingLoop();\n      }\n    }\n    _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n    async _performOperationAndHandleStatusAsync(operation) {\n      (0, _AudioAvailability.throwIfAudioIsDisabled)();\n      if (this._canRecord) {\n        const status = await operation();\n        this._callOnRecordingStatusUpdateForNewStatus(status);\n        return status;\n      } else {\n        throw new Error('Cannot complete operation because this recorder is not ready to record.');\n      }\n    }\n    /**\n     * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n     *\n     * ```ts\n     * const { recording, status } = await Audio.Recording.createAsync(\n     *   options,\n     *   onRecordingStatusUpdate,\n     *   progressUpdateIntervalMillis\n     * );\n     *\n     * // Which is equivalent to the following:\n     * const recording = new Audio.Recording();\n     * await recording.prepareToRecordAsync(options);\n     * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n     * await recording.startAsync();\n     * ```\n     *\n     * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n     * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n     * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n     * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n     *\n     * @example\n     * ```ts\n     * try {\n     *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n     *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n     *   );\n     *   // You are now recording!\n     * } catch (error) {\n     *   // An error occurred!\n     * }\n     * ```\n     *\n     * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n     */\n    static createAsync = async (options = _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY, onRecordingStatusUpdate = null, progressUpdateIntervalMillis = null) => {\n      const recording = new Recording();\n      if (progressUpdateIntervalMillis) {\n        recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      }\n      recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n      await recording.prepareToRecordAsync(Object.assign({}, options, {\n        keepAudioActiveHint: true\n      }));\n      try {\n        const status = await recording.startAsync();\n        return {\n          recording,\n          status\n        };\n      } catch (err) {\n        recording.stopAndUnloadAsync().catch(_e => {\n          // Since there was an issue with starting, when trying calling stopAndUnloadAsync\n          // the promise is rejected which is unhandled\n          // lets catch it since its expected\n        });\n        throw err;\n      }\n    };\n    // Get status API\n    /**\n     * Gets the `status` of the `Recording`.\n     * @return A `Promise` that is resolved with the `RecordingStatus` object.\n     */\n    getStatusAsync = async () => {\n      // Automatically calls onRecordingStatusUpdate.\n      if (this._canRecord) {\n        return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.getAudioRecordingStatus());\n      }\n      const status = {\n        canRecord: false,\n        isRecording: false,\n        isDoneRecording: this._isDoneRecording,\n        durationMillis: this._finalDurationMillis\n      };\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    };\n    /**\n     * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n     *\n     * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n     * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n     * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n     *\n     * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n     */\n    setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n      this.getStatusAsync();\n    }\n    /**\n     * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n     * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n     * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n     */\n    setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n    // Record API\n    /**\n     * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n     * This method can only be called if the `Recording` instance has never yet been prepared.\n     *\n     * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n     * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n     *\n     * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n     * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n     * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n     */\n    async prepareToRecordAsync(options = _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY) {\n      (0, _AudioAvailability.throwIfAudioIsDisabled)();\n      if (_recorderExists) {\n        throw new Error('Only one Recording object can be prepared at a given time.');\n      }\n      if (this._isDoneRecording) {\n        throw new Error('This Recording object is done recording; you must make a new one.');\n      }\n      if (!options || !options.android || !options.ios) {\n        throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n      }\n      const extensionRegex = /^\\.\\w+$/;\n      if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n        throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n      }\n      if (!this._canRecord) {\n        if (eventEmitter) {\n          this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n        }\n        const {\n          uri,\n          status\n        } = await ExponentAV.default.prepareAudioRecorder(options);\n        _recorderExists = true;\n        this._uri = uri;\n        this._options = options;\n        this._canRecord = true;\n        const currentStatus = Object.assign({}, status, {\n          canRecord: true\n        });\n        this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n        this._enablePollingIfNecessaryAndPossible();\n        return currentStatus;\n      } else {\n        throw new Error('This Recording object is already prepared to record.');\n      }\n    }\n    /**\n     * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n     * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n     */\n    async getAvailableInputs() {\n      return ExponentAV.default.getAvailableInputs();\n    }\n    /**\n     * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n     * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n     */\n    async getCurrentInput() {\n      return ExponentAV.default.getCurrentInput();\n    }\n    /**\n     * Sets the current recording input.\n     * @param inputUid The uid of a `RecordingInput`.\n     * @return A `Promise` that is resolved if successful or rejected if not.\n     */\n    async setInput(inputUid) {\n      return ExponentAV.default.setInput(inputUid);\n    }\n    /**\n     * Begins recording. This method can only be called if the `Recording` has been prepared.\n     * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n     * The promise is resolved with the `RecordingStatus` of the recording.\n     */\n    async startAsync() {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.startAudioRecording());\n    }\n    /**\n     * Pauses recording. This method can only be called if the `Recording` has been prepared.\n     *\n     * > This is only available on Android API version 24 and later.\n     *\n     * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n     * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n     * `RecordingStatus` of the recording.\n     */\n    async pauseAsync() {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.pauseAudioRecording());\n    }\n    /**\n     * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n     * to an unprepared state, and another `Recording` instance must be created in order to record again.\n     * This method can only be called if the `Recording` has been prepared.\n     *\n     * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n     * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n     *\n     * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n     * The promise is resolved with the `RecordingStatus` of the recording.\n     */\n    async stopAndUnloadAsync() {\n      if (!this._canRecord) {\n        if (this._isDoneRecording) {\n          throw new Error('Cannot unload a Recording that has already been unloaded.');\n        } else {\n          throw new Error('Cannot unload a Recording that has not been prepared.');\n        }\n      }\n      // We perform a separate native API call so that the state of the Recording can be updated with\n      // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n      let stopResult;\n      let stopError;\n      try {\n        stopResult = await ExponentAV.default.stopAudioRecording();\n      } catch (err) {\n        stopError = err;\n      }\n      // Web has to return the URI at the end of recording, so needs a little destructuring\n      if (_expoModulesCore.Platform.OS === 'web' && stopResult?.uri !== undefined) {\n        this._uri = stopResult.uri;\n      }\n      // Clean-up and return status\n      await ExponentAV.default.unloadAudioRecorder();\n      const status = await this._cleanupForUnloadedRecorder(stopResult);\n      return stopError ? Promise.reject(stopError) : status;\n    }\n    // Read API\n    /**\n     * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n     * to record. On web, this will not return the URI until the recording is finished.\n     * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n     * to record (or, on Web, if the recording has not finished).\n     */\n    getURI() {\n      return this._uri;\n    }\n    /**\n     * @deprecated Use `createNewLoadedSoundAsync()` instead.\n     */\n    async createNewLoadedSound(initialStatus = {}, onPlaybackStatusUpdate = null) {\n      console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);\n      return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n    }\n    /**\n     * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n     * is done recording and `stopAndUnloadAsync()` has been called.\n     *\n     * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n     * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n     * and the default initial playback status.\n     * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n     * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n     *\n     * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n     */\n    async createNewLoadedSoundAsync(initialStatus = {}, onPlaybackStatusUpdate = null) {\n      if (this._uri == null || !this._isDoneRecording) {\n        throw new Error('Cannot create sound when the Recording has not finished!');\n      }\n      return _Sound.Sound.createAsync({\n        uri: this._uri\n      }, initialStatus, onPlaybackStatusUpdate, false);\n    }\n  }\n});","lineCount":455,"map":[[12,2,15,0,"exports"],[12,9,15,0],[12,10,15,0,"getPermissionsAsync"],[12,29,15,0],[12,32,15,0,"getPermissionsAsync"],[12,51,15,0],[13,2,24,0,"exports"],[13,9,24,0],[13,10,24,0,"requestPermissionsAsync"],[13,33,24,0],[13,36,24,0,"requestPermissionsAsync"],[13,59,24,0],[14,2,36,0,"Object"],[14,8,36,0],[14,9,36,0,"defineProperty"],[14,23,36,0],[14,24,36,0,"exports"],[14,31,36,0],[15,4,36,0,"enumerable"],[15,14,36,0],[16,4,36,0,"get"],[16,7,36,0],[16,18,36,0,"get"],[16,19,36,0],[17,6,36,0],[17,13,36,0,"usePermissions"],[17,27,36,0],[18,4,36,0],[19,2,36,0],[20,2,70,0,"Object"],[20,8,70,0],[20,9,70,0,"defineProperty"],[20,23,70,0],[20,24,70,0,"exports"],[20,31,70,0],[21,4,70,0,"enumerable"],[21,14,70,0],[22,4,70,0,"get"],[22,7,70,0],[22,18,70,0,"get"],[22,19,70,0],[23,6,70,0],[23,13,70,0,"Recording"],[23,22,70,0],[24,4,70,0],[25,2,70,0],[26,2,403,0,"Object"],[26,8,403,0],[26,9,403,0,"defineProperty"],[26,23,403,0],[26,24,403,0,"exports"],[26,31,403,0],[27,4,403,0,"enumerable"],[27,14,403,0],[28,4,403,0,"get"],[28,7,403,0],[28,18,403,0,"get"],[28,19,403,0],[29,6,403,0],[29,13,403,9,"PermissionStatus"],[29,29,403,25],[29,30,403,25,"PermissionStatus"],[29,46,403,25],[30,4,403,25],[31,2,403,25],[32,2,1,0],[32,6,1,0,"_expoModulesCore"],[32,22,1,0],[32,25,1,0,"require"],[32,32,1,0],[32,33,1,0,"_dependencyMap"],[32,47,1,0],[33,2,2,0],[33,6,2,0,"_AudioAvailability"],[33,24,2,0],[33,27,2,0,"require"],[33,34,2,0],[33,35,2,0,"_dependencyMap"],[33,49,2,0],[34,2,3,0],[34,6,3,0,"_RecordingConstants"],[34,25,3,0],[34,28,3,0,"require"],[34,35,3,0],[34,36,3,0,"_dependencyMap"],[34,50,3,0],[35,2,404,0,"Object"],[35,8,404,0],[35,9,404,0,"keys"],[35,13,404,0],[35,14,404,0,"_RecordingConstants"],[35,33,404,0],[35,35,404,0,"forEach"],[35,42,404,0],[35,53,404,0,"k"],[35,54,404,0],[36,4,404,0],[36,8,404,0,"k"],[36,9,404,0],[36,28,404,0,"Object"],[36,34,404,0],[36,35,404,0,"prototype"],[36,44,404,0],[36,45,404,0,"hasOwnProperty"],[36,59,404,0],[36,60,404,0,"call"],[36,64,404,0],[36,65,404,0,"exports"],[36,72,404,0],[36,74,404,0,"k"],[36,75,404,0],[37,6,404,0,"Object"],[37,12,404,0],[37,13,404,0,"defineProperty"],[37,27,404,0],[37,28,404,0,"exports"],[37,35,404,0],[37,37,404,0,"k"],[37,38,404,0],[38,8,404,0,"enumerable"],[38,18,404,0],[39,8,404,0,"get"],[39,11,404,0],[39,22,404,0,"get"],[39,23,404,0],[40,10,404,0],[40,17,404,0,"_RecordingConstants"],[40,36,404,0],[40,37,404,0,"k"],[40,38,404,0],[41,8,404,0],[42,6,404,0],[43,4,404,0],[44,2,404,0],[45,2,4,0],[45,6,4,0,"_Sound"],[45,12,4,0],[45,15,4,0,"require"],[45,22,4,0],[45,23,4,0,"_dependencyMap"],[45,37,4,0],[46,2,5,0],[46,6,5,0,"_AV"],[46,9,5,0],[46,12,5,0,"require"],[46,19,5,0],[46,20,5,0,"_dependencyMap"],[46,34,5,0],[47,2,6,0],[47,6,6,0,"_ExponentAV"],[47,17,6,0],[47,20,6,0,"require"],[47,27,6,0],[47,28,6,0,"_dependencyMap"],[47,42,6,0],[48,2,6,0],[48,6,6,0,"ExponentAV"],[48,16,6,0],[48,19,6,0,"_interopDefault"],[48,34,6,0],[48,35,6,0,"_ExponentAV"],[48,46,6,0],[49,2,405,0],[49,6,405,0,"_RecordingTypes"],[49,21,405,0],[49,24,405,0,"require"],[49,31,405,0],[49,32,405,0,"_dependencyMap"],[49,46,405,0],[50,2,405,0,"Object"],[50,8,405,0],[50,9,405,0,"keys"],[50,13,405,0],[50,14,405,0,"_RecordingTypes"],[50,29,405,0],[50,31,405,0,"forEach"],[50,38,405,0],[50,49,405,0,"k"],[50,50,405,0],[51,4,405,0],[51,8,405,0,"k"],[51,9,405,0],[51,28,405,0,"Object"],[51,34,405,0],[51,35,405,0,"prototype"],[51,44,405,0],[51,45,405,0,"hasOwnProperty"],[51,59,405,0],[51,60,405,0,"call"],[51,64,405,0],[51,65,405,0,"exports"],[51,72,405,0],[51,74,405,0,"k"],[51,75,405,0],[52,6,405,0,"Object"],[52,12,405,0],[52,13,405,0,"defineProperty"],[52,27,405,0],[52,28,405,0,"exports"],[52,35,405,0],[52,37,405,0,"k"],[52,38,405,0],[53,8,405,0,"enumerable"],[53,18,405,0],[54,8,405,0,"get"],[54,11,405,0],[54,22,405,0,"get"],[54,23,405,0],[55,10,405,0],[55,17,405,0,"_RecordingTypes"],[55,32,405,0],[55,33,405,0,"k"],[55,34,405,0],[56,8,405,0],[57,6,405,0],[58,4,405,0],[59,2,405,0],[60,2,7,0],[60,6,7,4,"_recorderExists"],[60,21,7,19],[60,24,7,22],[60,29,7,27],[61,2,8,0],[61,8,8,6,"eventEmitter"],[61,20,8,18],[61,23,8,21,"Platform"],[61,39,8,29],[61,40,8,29,"Platform"],[61,48,8,29],[61,49,8,30,"OS"],[61,51,8,32],[61,56,8,37],[61,65,8,46],[61,68,8,49],[61,72,8,53,"LegacyEventEmitter"],[61,88,8,71],[61,89,8,71,"LegacyEventEmitter"],[61,107,8,71],[61,108,8,72,"ExponentAV"],[61,118,8,82],[61,119,8,82,"default"],[61,126,8,82],[61,127,8,83],[61,130,8,86],[61,134,8,90],[62,2,9,0],[63,0,10,0],[64,0,11,0],[65,0,12,0],[66,0,13,0],[67,0,14,0],[68,2,15,7],[68,17,15,22,"getPermissionsAsync"],[68,36,15,41,"getPermissionsAsync"],[68,37,15,41],[68,39,15,44],[69,4,16,4],[69,11,16,11,"ExponentAV"],[69,21,16,21],[69,22,16,21,"default"],[69,29,16,21],[69,30,16,22,"getPermissionsAsync"],[69,49,16,41],[69,50,16,42],[69,51,16,43],[70,2,17,0],[71,2,18,0],[72,0,19,0],[73,0,20,0],[74,0,21,0],[75,0,22,0],[76,0,23,0],[77,2,24,7],[77,17,24,22,"requestPermissionsAsync"],[77,40,24,45,"requestPermissionsAsync"],[77,41,24,45],[77,43,24,48],[78,4,25,4],[78,11,25,11,"ExponentAV"],[78,21,25,21],[78,22,25,21,"default"],[78,29,25,21],[78,30,25,22,"requestPermissionsAsync"],[78,53,25,45],[78,54,25,46],[78,55,25,47],[79,2,26,0],[80,2,27,0],[81,0,28,0],[82,0,29,0],[83,0,30,0],[84,0,31,0],[85,0,32,0],[86,0,33,0],[87,0,34,0],[88,0,35,0],[89,2,36,7],[89,8,36,13,"usePermissions"],[89,22,36,27],[89,25,36,30],[89,29,36,30,"createPermissionHook"],[89,45,36,50],[89,46,36,50,"createPermissionHook"],[89,66,36,50],[89,68,36,51],[90,4,37,4,"getMethod"],[90,13,37,13],[90,15,37,15,"getPermissionsAsync"],[90,34,37,34],[91,4,38,4,"requestMethod"],[91,17,38,17],[91,19,38,19,"requestPermissionsAsync"],[92,2,39,0],[92,3,39,1],[92,4,39,2],[93,2,40,0],[94,2,41,0],[95,0,42,0],[96,0,43,0],[97,0,44,0],[98,0,45,0],[99,0,46,0],[100,0,47,0],[101,0,48,0],[102,0,49,0],[103,0,50,0],[104,0,51,0],[105,0,52,0],[106,0,53,0],[107,0,54,0],[108,0,55,0],[109,0,56,0],[110,0,57,0],[111,0,58,0],[112,0,59,0],[113,0,60,0],[114,0,61,0],[115,0,62,0],[116,0,63,0],[117,0,64,0],[118,0,65,0],[119,0,66,0],[120,0,67,0],[121,0,68,0],[122,0,69,0],[123,2,70,7],[123,8,70,13,"Recording"],[123,17,70,22],[123,18,70,23],[124,4,71,4,"_subscription"],[124,17,71,17],[124,20,71,20],[124,24,71,24],[125,4,72,4,"_canRecord"],[125,14,72,14],[125,17,72,17],[125,22,72,22],[126,4,73,4,"_isDoneRecording"],[126,20,73,20],[126,23,73,23],[126,28,73,28],[127,4,74,4,"_finalDurationMillis"],[127,24,74,24],[127,27,74,27],[127,28,74,28],[128,4,75,4,"_uri"],[128,8,75,8],[128,11,75,11],[128,15,75,15],[129,4,76,4,"_onRecordingStatusUpdate"],[129,28,76,28],[129,31,76,31],[129,35,76,35],[130,4,77,4,"_progressUpdateTimeoutVariable"],[130,34,77,34],[130,37,77,37],[130,41,77,41],[131,4,78,4,"_progressUpdateIntervalMillis"],[131,33,78,33],[131,36,78,36,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[131,39,78,76],[131,40,78,76,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[131,80,78,76],[132,4,79,4,"_options"],[132,12,79,12],[132,15,79,15],[132,19,79,19],[133,4,80,4],[134,4,81,4,"_cleanupForUnloadedRecorder"],[134,31,81,31],[134,34,81,34],[134,40,81,41,"finalStatus"],[134,51,81,52],[134,55,81,57],[135,6,82,8],[135,10,82,12],[135,11,82,13,"_canRecord"],[135,21,82,23],[135,24,82,26],[135,29,82,31],[136,6,83,8],[136,10,83,12],[136,11,83,13,"_isDoneRecording"],[136,27,83,29],[136,30,83,32],[136,34,83,36],[137,6,84,8],[137,10,84,12],[137,11,84,13,"_finalDurationMillis"],[137,31,84,33],[137,34,84,36,"finalStatus"],[137,45,84,47],[137,47,84,49,"durationMillis"],[137,61,84,63],[137,65,84,67],[137,66,84,68],[138,6,85,8,"_recorderExists"],[138,21,85,23],[138,24,85,26],[138,29,85,31],[139,6,86,8],[139,10,86,12],[139,14,86,16],[139,15,86,17,"_subscription"],[139,28,86,30],[139,30,86,32],[140,8,87,12],[140,12,87,16],[140,13,87,17,"_subscription"],[140,26,87,30],[140,27,87,31,"remove"],[140,33,87,37],[140,34,87,38],[140,35,87,39],[141,8,88,12],[141,12,88,16],[141,13,88,17,"_subscription"],[141,26,88,30],[141,29,88,33],[141,33,88,37],[142,6,89,8],[143,6,90,8],[143,10,90,12],[143,11,90,13,"_disablePolling"],[143,26,90,28],[143,27,90,29],[143,28,90,30],[144,6,91,8],[144,13,91,15],[144,19,91,21],[144,23,91,25],[144,24,91,26,"getStatusAsync"],[144,38,91,40],[144,39,91,41],[144,40,91,42],[144,41,91,43],[144,42,91,44],[145,4,92,4],[145,5,92,5],[146,4,93,4,"_pollingLoop"],[146,16,93,16],[146,19,93,19],[146,25,93,19,"_pollingLoop"],[146,26,93,19],[146,31,93,31],[147,6,94,8],[147,10,94,12],[147,14,94,12,"isAudioEnabled"],[147,32,94,26],[147,33,94,26,"isAudioEnabled"],[147,47,94,26],[147,49,94,27],[147,50,94,28],[147,54,94,32],[147,58,94,36],[147,59,94,37,"_canRecord"],[147,69,94,47],[147,73,94,51],[147,77,94,55],[147,78,94,56,"_onRecordingStatusUpdate"],[147,102,94,80],[147,106,94,84],[147,110,94,88],[147,112,94,90],[148,8,95,12],[148,12,95,16],[148,13,95,17,"_progressUpdateTimeoutVariable"],[148,43,95,47],[148,46,95,50,"setTimeout"],[148,56,95,60],[148,57,95,61],[148,61,95,65],[148,62,95,66,"_pollingLoop"],[148,74,95,78],[148,76,95,80],[148,80,95,84],[148,81,95,85,"_progressUpdateIntervalMillis"],[148,110,95,114],[148,111,95,115],[149,8,96,12],[149,12,96,16],[150,10,97,16],[150,16,97,22],[150,20,97,26],[150,21,97,27,"getStatusAsync"],[150,35,97,41],[150,36,97,42],[150,37,97,43],[151,8,98,12],[151,9,98,13],[151,10,99,12],[151,16,99,18],[152,10,100,16],[152,14,100,20],[152,15,100,21,"_disablePolling"],[152,30,100,36],[152,31,100,37],[152,32,100,38],[153,8,101,12],[154,6,102,8],[155,4,103,4],[155,5,103,5],[156,4,104,4,"_disablePolling"],[156,19,104,19,"_disablePolling"],[156,20,104,19],[156,22,104,22],[157,6,105,8],[157,10,105,12],[157,14,105,16],[157,15,105,17,"_progressUpdateTimeoutVariable"],[157,45,105,47],[157,49,105,51],[157,53,105,55],[157,55,105,57],[158,8,106,12,"clearTimeout"],[158,20,106,24],[158,21,106,25],[158,25,106,29],[158,26,106,30,"_progressUpdateTimeoutVariable"],[158,56,106,60],[158,57,106,61],[159,8,107,12],[159,12,107,16],[159,13,107,17,"_progressUpdateTimeoutVariable"],[159,43,107,47],[159,46,107,50],[159,50,107,54],[160,6,108,8],[161,4,109,4],[162,4,110,4,"_enablePollingIfNecessaryAndPossible"],[162,40,110,40,"_enablePollingIfNecessaryAndPossible"],[162,41,110,40],[162,43,110,43],[163,6,111,8],[163,10,111,12],[163,14,111,12,"isAudioEnabled"],[163,32,111,26],[163,33,111,26,"isAudioEnabled"],[163,47,111,26],[163,49,111,27],[163,50,111,28],[163,54,111,32],[163,58,111,36],[163,59,111,37,"_canRecord"],[163,69,111,47],[163,73,111,51],[163,77,111,55],[163,78,111,56,"_onRecordingStatusUpdate"],[163,102,111,80],[163,106,111,84],[163,110,111,88],[163,112,111,90],[164,8,112,12],[164,12,112,16],[164,13,112,17,"_disablePolling"],[164,28,112,32],[164,29,112,33],[164,30,112,34],[165,8,113,12],[165,12,113,16],[165,13,113,17,"_pollingLoop"],[165,25,113,29],[165,26,113,30],[165,27,113,31],[166,6,114,8],[167,4,115,4],[168,4,116,4,"_callOnRecordingStatusUpdateForNewStatus"],[168,44,116,44,"_callOnRecordingStatusUpdateForNewStatus"],[168,45,116,45,"status"],[168,51,116,51],[168,53,116,53],[169,6,117,8],[169,10,117,12],[169,14,117,16],[169,15,117,17,"_onRecordingStatusUpdate"],[169,39,117,41],[169,43,117,45],[169,47,117,49],[169,49,117,51],[170,8,118,12],[170,12,118,16],[170,13,118,17,"_onRecordingStatusUpdate"],[170,37,118,41],[170,38,118,42,"status"],[170,44,118,48],[170,45,118,49],[171,6,119,8],[172,4,120,4],[173,4,121,4],[173,10,121,10,"_performOperationAndHandleStatusAsync"],[173,47,121,47,"_performOperationAndHandleStatusAsync"],[173,48,121,48,"operation"],[173,57,121,57],[173,59,121,59],[174,6,122,8],[174,10,122,8,"throwIfAudioIsDisabled"],[174,28,122,30],[174,29,122,30,"throwIfAudioIsDisabled"],[174,51,122,30],[174,53,122,31],[174,54,122,32],[175,6,123,8],[175,10,123,12],[175,14,123,16],[175,15,123,17,"_canRecord"],[175,25,123,27],[175,27,123,29],[176,8,124,12],[176,14,124,18,"status"],[176,20,124,24],[176,23,124,27],[176,29,124,33,"operation"],[176,38,124,42],[176,39,124,43],[176,40,124,44],[177,8,125,12],[177,12,125,16],[177,13,125,17,"_callOnRecordingStatusUpdateForNewStatus"],[177,53,125,57],[177,54,125,58,"status"],[177,60,125,64],[177,61,125,65],[178,8,126,12],[178,15,126,19,"status"],[178,21,126,25],[179,6,127,8],[179,7,127,9],[179,13,128,13],[180,8,129,12],[180,14,129,18],[180,18,129,22,"Error"],[180,23,129,27],[180,24,129,28],[180,97,129,101],[180,98,129,102],[181,6,130,8],[182,4,131,4],[183,4,132,4],[184,0,133,0],[185,0,134,0],[186,0,135,0],[187,0,136,0],[188,0,137,0],[189,0,138,0],[190,0,139,0],[191,0,140,0],[192,0,141,0],[193,0,142,0],[194,0,143,0],[195,0,144,0],[196,0,145,0],[197,0,146,0],[198,0,147,0],[199,0,148,0],[200,0,149,0],[201,0,150,0],[202,0,151,0],[203,0,152,0],[204,0,153,0],[205,0,154,0],[206,0,155,0],[207,0,156,0],[208,0,157,0],[209,0,158,0],[210,0,159,0],[211,0,160,0],[212,0,161,0],[213,0,162,0],[214,0,163,0],[215,0,164,0],[216,0,165,0],[217,0,166,0],[218,0,167,0],[219,4,168,4],[219,11,168,11,"createAsync"],[219,22,168,22],[219,25,168,25],[219,31,168,25,"createAsync"],[219,32,168,32,"options"],[219,39,168,39],[219,42,168,42,"RecordingOptionsPresets"],[219,61,168,65],[219,62,168,65,"RecordingOptionsPresets"],[219,85,168,65],[219,86,168,66,"LOW_QUALITY"],[219,97,168,77],[219,99,168,79,"onRecordingStatusUpdate"],[219,122,168,102],[219,125,168,105],[219,129,168,109],[219,131,168,111,"progressUpdateIntervalMillis"],[219,159,168,139],[219,162,168,142],[219,166,168,146],[219,171,168,151],[220,6,169,8],[220,12,169,14,"recording"],[220,21,169,23],[220,24,169,26],[220,28,169,30,"Recording"],[220,37,169,39],[220,38,169,40],[220,39,169,41],[221,6,170,8],[221,10,170,12,"progressUpdateIntervalMillis"],[221,38,170,40],[221,40,170,42],[222,8,171,12,"recording"],[222,17,171,21],[222,18,171,22,"_progressUpdateIntervalMillis"],[222,47,171,51],[222,50,171,54,"progressUpdateIntervalMillis"],[222,78,171,82],[223,6,172,8],[224,6,173,8,"recording"],[224,15,173,17],[224,16,173,18,"setOnRecordingStatusUpdate"],[224,42,173,44],[224,43,173,45,"onRecordingStatusUpdate"],[224,66,173,68],[224,67,173,69],[225,6,174,8],[225,12,174,14,"recording"],[225,21,174,23],[225,22,174,24,"prepareToRecordAsync"],[225,42,174,44],[225,43,174,44,"Object"],[225,49,174,44],[225,50,174,44,"assign"],[225,56,174,44],[225,61,175,15,"options"],[225,68,175,22],[226,8,176,12,"keepAudioActiveHint"],[226,27,176,31],[226,29,176,33],[227,6,176,37],[227,8,177,9],[227,9,177,10],[228,6,178,8],[228,10,178,12],[229,8,179,12],[229,14,179,18,"status"],[229,20,179,24],[229,23,179,27],[229,29,179,33,"recording"],[229,38,179,42],[229,39,179,43,"startAsync"],[229,49,179,53],[229,50,179,54],[229,51,179,55],[230,8,180,12],[230,15,180,19],[231,10,180,21,"recording"],[231,19,180,30],[232,10,180,32,"status"],[233,8,180,39],[233,9,180,40],[234,6,181,8],[234,7,181,9],[234,8,182,8],[234,15,182,15,"err"],[234,18,182,18],[234,20,182,20],[235,8,183,12,"recording"],[235,17,183,21],[235,18,183,22,"stopAndUnloadAsync"],[235,36,183,40],[235,37,183,41],[235,38,183,42],[235,39,183,43,"catch"],[235,44,183,48],[235,45,183,50,"_e"],[235,47,183,52],[235,51,183,57],[236,10,184,16],[237,10,185,16],[238,10,186,16],[239,8,186,16],[239,9,187,13],[239,10,187,14],[240,8,188,12],[240,14,188,18,"err"],[240,17,188,21],[241,6,189,8],[242,4,190,4],[242,5,190,5],[243,4,191,4],[244,4,192,4],[245,0,193,0],[246,0,194,0],[247,0,195,0],[248,4,196,4,"getStatusAsync"],[248,18,196,18],[248,21,196,21],[248,27,196,21,"getStatusAsync"],[248,28,196,21],[248,33,196,33],[249,6,197,8],[250,6,198,8],[250,10,198,12],[250,14,198,16],[250,15,198,17,"_canRecord"],[250,25,198,27],[250,27,198,29],[251,8,199,12],[251,15,199,19],[251,19,199,23],[251,20,199,24,"_performOperationAndHandleStatusAsync"],[251,57,199,61],[251,58,199,62],[251,64,199,68,"ExponentAV"],[251,74,199,78],[251,75,199,78,"default"],[251,82,199,78],[251,83,199,79,"getAudioRecordingStatus"],[251,106,199,102],[251,107,199,103],[251,108,199,104],[251,109,199,105],[252,6,200,8],[253,6,201,8],[253,12,201,14,"status"],[253,18,201,20],[253,21,201,23],[254,8,202,12,"canRecord"],[254,17,202,21],[254,19,202,23],[254,24,202,28],[255,8,203,12,"isRecording"],[255,19,203,23],[255,21,203,25],[255,26,203,30],[256,8,204,12,"isDoneRecording"],[256,23,204,27],[256,25,204,29],[256,29,204,33],[256,30,204,34,"_isDoneRecording"],[256,46,204,50],[257,8,205,12,"durationMillis"],[257,22,205,26],[257,24,205,28],[257,28,205,32],[257,29,205,33,"_finalDurationMillis"],[258,6,206,8],[258,7,206,9],[259,6,207,8],[259,10,207,12],[259,11,207,13,"_callOnRecordingStatusUpdateForNewStatus"],[259,51,207,53],[259,52,207,54,"status"],[259,58,207,60],[259,59,207,61],[260,6,208,8],[260,13,208,15,"status"],[260,19,208,21],[261,4,209,4],[261,5,209,5],[262,4,210,4],[263,0,211,0],[264,0,212,0],[265,0,213,0],[266,0,214,0],[267,0,215,0],[268,0,216,0],[269,0,217,0],[270,0,218,0],[271,4,219,4,"setOnRecordingStatusUpdate"],[271,30,219,30,"setOnRecordingStatusUpdate"],[271,31,219,31,"onRecordingStatusUpdate"],[271,54,219,54],[271,56,219,56],[272,6,220,8],[272,10,220,12],[272,11,220,13,"_onRecordingStatusUpdate"],[272,35,220,37],[272,38,220,40,"onRecordingStatusUpdate"],[272,61,220,63],[273,6,221,8],[273,10,221,12,"onRecordingStatusUpdate"],[273,33,221,35],[273,37,221,39],[273,41,221,43],[273,43,221,45],[274,8,222,12],[274,12,222,16],[274,13,222,17,"_disablePolling"],[274,28,222,32],[274,29,222,33],[274,30,222,34],[275,6,223,8],[275,7,223,9],[275,13,224,13],[276,8,225,12],[276,12,225,16],[276,13,225,17,"_enablePollingIfNecessaryAndPossible"],[276,49,225,53],[276,50,225,54],[276,51,225,55],[277,6,226,8],[278,6,227,8],[278,10,227,12],[278,11,227,13,"getStatusAsync"],[278,25,227,27],[278,26,227,28],[278,27,227,29],[279,4,228,4],[280,4,229,4],[281,0,230,0],[282,0,231,0],[283,0,232,0],[284,0,233,0],[285,4,234,4,"setProgressUpdateInterval"],[285,29,234,29,"setProgressUpdateInterval"],[285,30,234,30,"progressUpdateIntervalMillis"],[285,58,234,58],[285,60,234,60],[286,6,235,8],[286,10,235,12],[286,11,235,13,"_progressUpdateIntervalMillis"],[286,40,235,42],[286,43,235,45,"progressUpdateIntervalMillis"],[286,71,235,73],[287,6,236,8],[287,10,236,12],[287,11,236,13,"getStatusAsync"],[287,25,236,27],[287,26,236,28],[287,27,236,29],[288,4,237,4],[289,4,238,4],[290,4,239,4],[291,0,240,0],[292,0,241,0],[293,0,242,0],[294,0,243,0],[295,0,244,0],[296,0,245,0],[297,0,246,0],[298,0,247,0],[299,0,248,0],[300,0,249,0],[301,4,250,4],[301,10,250,10,"prepareToRecordAsync"],[301,30,250,30,"prepareToRecordAsync"],[301,31,250,31,"options"],[301,38,250,38],[301,41,250,41,"RecordingOptionsPresets"],[301,60,250,64],[301,61,250,64,"RecordingOptionsPresets"],[301,84,250,64],[301,85,250,65,"LOW_QUALITY"],[301,96,250,76],[301,98,250,78],[302,6,251,8],[302,10,251,8,"throwIfAudioIsDisabled"],[302,28,251,30],[302,29,251,30,"throwIfAudioIsDisabled"],[302,51,251,30],[302,53,251,31],[302,54,251,32],[303,6,252,8],[303,10,252,12,"_recorderExists"],[303,25,252,27],[303,27,252,29],[304,8,253,12],[304,14,253,18],[304,18,253,22,"Error"],[304,23,253,27],[304,24,253,28],[304,84,253,88],[304,85,253,89],[305,6,254,8],[306,6,255,8],[306,10,255,12],[306,14,255,16],[306,15,255,17,"_isDoneRecording"],[306,31,255,33],[306,33,255,35],[307,8,256,12],[307,14,256,18],[307,18,256,22,"Error"],[307,23,256,27],[307,24,256,28],[307,91,256,95],[307,92,256,96],[308,6,257,8],[309,6,258,8],[309,10,258,12],[309,11,258,13,"options"],[309,18,258,20],[309,22,258,24],[309,23,258,25,"options"],[309,30,258,32],[309,31,258,33,"android"],[309,38,258,40],[309,42,258,44],[309,43,258,45,"options"],[309,50,258,52],[309,51,258,53,"ios"],[309,54,258,56],[309,56,258,58],[310,8,259,12],[310,14,259,18],[310,18,259,22,"Error"],[310,23,259,27],[310,24,259,28],[310,111,259,115],[310,112,259,116],[311,6,260,8],[312,6,261,8],[312,12,261,14,"extensionRegex"],[312,26,261,28],[312,29,261,31],[312,38,261,40],[313,6,262,8],[313,10,262,12],[313,11,262,13,"options"],[313,18,262,20],[313,19,262,21,"android"],[313,26,262,28],[313,27,262,29,"extension"],[313,36,262,38],[313,40,263,12],[313,41,263,13,"options"],[313,48,263,20],[313,49,263,21,"ios"],[313,52,263,24],[313,53,263,25,"extension"],[313,62,263,34],[313,66,264,12],[313,67,264,13,"extensionRegex"],[313,81,264,27],[313,82,264,28,"test"],[313,86,264,32],[313,87,264,33,"options"],[313,94,264,40],[313,95,264,41,"android"],[313,102,264,48],[313,103,264,49,"extension"],[313,112,264,58],[313,113,264,59],[313,117,265,12],[313,118,265,13,"extensionRegex"],[313,132,265,27],[313,133,265,28,"test"],[313,137,265,32],[313,138,265,33,"options"],[313,145,265,40],[313,146,265,41,"ios"],[313,149,265,44],[313,150,265,45,"extension"],[313,159,265,54],[313,160,265,55],[313,162,265,57],[314,8,266,12],[314,14,266,18],[314,18,266,22,"Error"],[314,23,266,27],[314,24,266,28],[314,59,266,63,"extensionRegex"],[314,73,266,77],[314,74,266,78,"toString"],[314,82,266,86],[314,83,266,87],[314,84,266,88],[314,87,266,91],[314,88,266,92],[315,6,267,8],[316,6,268,8],[316,10,268,12],[316,11,268,13],[316,15,268,17],[316,16,268,18,"_canRecord"],[316,26,268,28],[316,28,268,30],[317,8,269,12],[317,12,269,16,"eventEmitter"],[317,24,269,28],[317,26,269,30],[318,10,270,16],[318,14,270,20],[318,15,270,21,"_subscription"],[318,28,270,34],[318,31,270,37,"eventEmitter"],[318,43,270,49],[318,44,270,50,"addListener"],[318,55,270,61],[318,56,270,62],[318,89,270,95],[318,91,270,97],[318,95,270,101],[318,96,270,102,"_cleanupForUnloadedRecorder"],[318,123,270,129],[318,124,270,130],[319,8,271,12],[320,8,272,12],[320,14,272,18],[321,10,272,20,"uri"],[321,13,272,23],[322,10,272,25,"status"],[323,8,272,33],[323,9,272,34],[323,12,272,37],[323,18,272,43,"ExponentAV"],[323,28,272,53],[323,29,272,53,"default"],[323,36,272,53],[323,37,272,54,"prepareAudioRecorder"],[323,57,272,74],[323,58,272,75,"options"],[323,65,272,82],[323,66,272,83],[324,8,273,12,"_recorderExists"],[324,23,273,27],[324,26,273,30],[324,30,273,34],[325,8,274,12],[325,12,274,16],[325,13,274,17,"_uri"],[325,17,274,21],[325,20,274,24,"uri"],[325,23,274,27],[326,8,275,12],[326,12,275,16],[326,13,275,17,"_options"],[326,21,275,25],[326,24,275,28,"options"],[326,31,275,35],[327,8,276,12],[327,12,276,16],[327,13,276,17,"_canRecord"],[327,23,276,27],[327,26,276,30],[327,30,276,34],[328,8,277,12],[328,14,277,18,"currentStatus"],[328,27,277,31],[328,30,277,31,"Object"],[328,36,277,31],[328,37,277,31,"assign"],[328,43,277,31],[328,48,277,39,"status"],[328,54,277,45],[329,10,277,47,"canRecord"],[329,19,277,56],[329,21,277,58],[330,8,277,62],[330,10,277,64],[331,8,278,12],[331,12,278,16],[331,13,278,17,"_callOnRecordingStatusUpdateForNewStatus"],[331,53,278,57],[331,54,278,58,"currentStatus"],[331,67,278,71],[331,68,278,72],[332,8,279,12],[332,12,279,16],[332,13,279,17,"_enablePollingIfNecessaryAndPossible"],[332,49,279,53],[332,50,279,54],[332,51,279,55],[333,8,280,12],[333,15,280,19,"currentStatus"],[333,28,280,32],[334,6,281,8],[334,7,281,9],[334,13,282,13],[335,8,283,12],[335,14,283,18],[335,18,283,22,"Error"],[335,23,283,27],[335,24,283,28],[335,78,283,82],[335,79,283,83],[336,6,284,8],[337,4,285,4],[338,4,286,4],[339,0,287,0],[340,0,288,0],[341,0,289,0],[342,4,290,4],[342,10,290,10,"getAvailableInputs"],[342,28,290,28,"getAvailableInputs"],[342,29,290,28],[342,31,290,31],[343,6,291,8],[343,13,291,15,"ExponentAV"],[343,23,291,25],[343,24,291,25,"default"],[343,31,291,25],[343,32,291,26,"getAvailableInputs"],[343,50,291,44],[343,51,291,45],[343,52,291,46],[344,4,292,4],[345,4,293,4],[346,0,294,0],[347,0,295,0],[348,0,296,0],[349,4,297,4],[349,10,297,10,"getCurrentInput"],[349,25,297,25,"getCurrentInput"],[349,26,297,25],[349,28,297,28],[350,6,298,8],[350,13,298,15,"ExponentAV"],[350,23,298,25],[350,24,298,25,"default"],[350,31,298,25],[350,32,298,26,"getCurrentInput"],[350,47,298,41],[350,48,298,42],[350,49,298,43],[351,4,299,4],[352,4,300,4],[353,0,301,0],[354,0,302,0],[355,0,303,0],[356,0,304,0],[357,4,305,4],[357,10,305,10,"setInput"],[357,18,305,18,"setInput"],[357,19,305,19,"inputUid"],[357,27,305,27],[357,29,305,29],[358,6,306,8],[358,13,306,15,"ExponentAV"],[358,23,306,25],[358,24,306,25,"default"],[358,31,306,25],[358,32,306,26,"setInput"],[358,40,306,34],[358,41,306,35,"inputUid"],[358,49,306,43],[358,50,306,44],[359,4,307,4],[360,4,308,4],[361,0,309,0],[362,0,310,0],[363,0,311,0],[364,0,312,0],[365,4,313,4],[365,10,313,10,"startAsync"],[365,20,313,20,"startAsync"],[365,21,313,20],[365,23,313,23],[366,6,314,8],[366,13,314,15],[366,17,314,19],[366,18,314,20,"_performOperationAndHandleStatusAsync"],[366,55,314,57],[366,56,314,58],[366,62,314,64,"ExponentAV"],[366,72,314,74],[366,73,314,74,"default"],[366,80,314,74],[366,81,314,75,"startAudioRecording"],[366,100,314,94],[366,101,314,95],[366,102,314,96],[366,103,314,97],[367,4,315,4],[368,4,316,4],[369,0,317,0],[370,0,318,0],[371,0,319,0],[372,0,320,0],[373,0,321,0],[374,0,322,0],[375,0,323,0],[376,0,324,0],[377,4,325,4],[377,10,325,10,"pauseAsync"],[377,20,325,20,"pauseAsync"],[377,21,325,20],[377,23,325,23],[378,6,326,8],[378,13,326,15],[378,17,326,19],[378,18,326,20,"_performOperationAndHandleStatusAsync"],[378,55,326,57],[378,56,326,58],[378,62,326,64,"ExponentAV"],[378,72,326,74],[378,73,326,74,"default"],[378,80,326,74],[378,81,326,75,"pauseAudioRecording"],[378,100,326,94],[378,101,326,95],[378,102,326,96],[378,103,326,97],[379,4,327,4],[380,4,328,4],[381,0,329,0],[382,0,330,0],[383,0,331,0],[384,0,332,0],[385,0,333,0],[386,0,334,0],[387,0,335,0],[388,0,336,0],[389,0,337,0],[390,0,338,0],[391,4,339,4],[391,10,339,10,"stopAndUnloadAsync"],[391,28,339,28,"stopAndUnloadAsync"],[391,29,339,28],[391,31,339,31],[392,6,340,8],[392,10,340,12],[392,11,340,13],[392,15,340,17],[392,16,340,18,"_canRecord"],[392,26,340,28],[392,28,340,30],[393,8,341,12],[393,12,341,16],[393,16,341,20],[393,17,341,21,"_isDoneRecording"],[393,33,341,37],[393,35,341,39],[394,10,342,16],[394,16,342,22],[394,20,342,26,"Error"],[394,25,342,31],[394,26,342,32],[394,85,342,91],[394,86,342,92],[395,8,343,12],[395,9,343,13],[395,15,344,17],[396,10,345,16],[396,16,345,22],[396,20,345,26,"Error"],[396,25,345,31],[396,26,345,32],[396,81,345,87],[396,82,345,88],[397,8,346,12],[398,6,347,8],[399,6,348,8],[400,6,349,8],[401,6,350,8],[401,10,350,12,"stopResult"],[401,20,350,22],[402,6,351,8],[402,10,351,12,"stopError"],[402,19,351,21],[403,6,352,8],[403,10,352,12],[404,8,353,12,"stopResult"],[404,18,353,22],[404,21,353,25],[404,27,353,31,"ExponentAV"],[404,37,353,41],[404,38,353,41,"default"],[404,45,353,41],[404,46,353,42,"stopAudioRecording"],[404,64,353,60],[404,65,353,61],[404,66,353,62],[405,6,354,8],[405,7,354,9],[405,8,355,8],[405,15,355,15,"err"],[405,18,355,18],[405,20,355,20],[406,8,356,12,"stopError"],[406,17,356,21],[406,20,356,24,"err"],[406,23,356,27],[407,6,357,8],[408,6,358,8],[409,6,359,8],[409,10,359,12,"Platform"],[409,26,359,20],[409,27,359,20,"Platform"],[409,35,359,20],[409,36,359,21,"OS"],[409,38,359,23],[409,43,359,28],[409,48,359,33],[409,52,359,37,"stopResult"],[409,62,359,47],[409,64,359,49,"uri"],[409,67,359,52],[409,72,359,57,"undefined"],[409,81,359,66],[409,83,359,68],[410,8,360,12],[410,12,360,16],[410,13,360,17,"_uri"],[410,17,360,21],[410,20,360,24,"stopResult"],[410,30,360,34],[410,31,360,35,"uri"],[410,34,360,38],[411,6,361,8],[412,6,362,8],[413,6,363,8],[413,12,363,14,"ExponentAV"],[413,22,363,24],[413,23,363,24,"default"],[413,30,363,24],[413,31,363,25,"unloadAudioRecorder"],[413,50,363,44],[413,51,363,45],[413,52,363,46],[414,6,364,8],[414,12,364,14,"status"],[414,18,364,20],[414,21,364,23],[414,27,364,29],[414,31,364,33],[414,32,364,34,"_cleanupForUnloadedRecorder"],[414,59,364,61],[414,60,364,62,"stopResult"],[414,70,364,72],[414,71,364,73],[415,6,365,8],[415,13,365,15,"stopError"],[415,22,365,24],[415,25,365,27,"Promise"],[415,32,365,34],[415,33,365,35,"reject"],[415,39,365,41],[415,40,365,42,"stopError"],[415,49,365,51],[415,50,365,52],[415,53,365,55,"status"],[415,59,365,61],[416,4,366,4],[417,4,367,4],[418,4,368,4],[419,0,369,0],[420,0,370,0],[421,0,371,0],[422,0,372,0],[423,0,373,0],[424,4,374,4,"getURI"],[424,10,374,10,"getURI"],[424,11,374,10],[424,13,374,13],[425,6,375,8],[425,13,375,15],[425,17,375,19],[425,18,375,20,"_uri"],[425,22,375,24],[426,4,376,4],[427,4,377,4],[428,0,378,0],[429,0,379,0],[430,4,380,4],[430,10,380,10,"createNewLoadedSound"],[430,30,380,30,"createNewLoadedSound"],[430,31,380,31,"initialStatus"],[430,44,380,44],[430,47,380,47],[430,48,380,48],[430,49,380,49],[430,51,380,51,"onPlaybackStatusUpdate"],[430,73,380,73],[430,76,380,76],[430,80,380,80],[430,82,380,82],[431,6,381,8,"console"],[431,13,381,15],[431,14,381,16,"warn"],[431,18,381,20],[431,19,381,21],[431,144,381,146],[431,145,381,147],[432,6,382,8],[432,13,382,15],[432,17,382,19],[432,18,382,20,"createNewLoadedSoundAsync"],[432,43,382,45],[432,44,382,46,"initialStatus"],[432,57,382,59],[432,59,382,61,"onPlaybackStatusUpdate"],[432,81,382,83],[432,82,382,84],[433,4,383,4],[434,4,384,4],[435,0,385,0],[436,0,386,0],[437,0,387,0],[438,0,388,0],[439,0,389,0],[440,0,390,0],[441,0,391,0],[442,0,392,0],[443,0,393,0],[444,0,394,0],[445,0,395,0],[446,4,396,4],[446,10,396,10,"createNewLoadedSoundAsync"],[446,35,396,35,"createNewLoadedSoundAsync"],[446,36,396,36,"initialStatus"],[446,49,396,49],[446,52,396,52],[446,53,396,53],[446,54,396,54],[446,56,396,56,"onPlaybackStatusUpdate"],[446,78,396,78],[446,81,396,81],[446,85,396,85],[446,87,396,87],[447,6,397,8],[447,10,397,12],[447,14,397,16],[447,15,397,17,"_uri"],[447,19,397,21],[447,23,397,25],[447,27,397,29],[447,31,397,33],[447,32,397,34],[447,36,397,38],[447,37,397,39,"_isDoneRecording"],[447,53,397,55],[447,55,397,57],[448,8,398,12],[448,14,398,18],[448,18,398,22,"Error"],[448,23,398,27],[448,24,398,28],[448,82,398,86],[448,83,398,87],[449,6,399,8],[450,6,400,8],[450,13,400,15,"Sound"],[450,19,400,20],[450,20,400,20,"Sound"],[450,25,400,20],[450,26,400,21,"createAsync"],[450,37,400,32],[450,38,400,33],[451,8,400,35,"uri"],[451,11,400,38],[451,13,400,40],[451,17,400,44],[451,18,400,45,"_uri"],[452,6,400,50],[452,7,400,51],[452,9,400,53,"initialStatus"],[452,22,400,66],[452,24,400,68,"onPlaybackStatusUpdate"],[452,46,400,90],[452,48,400,92],[452,53,400,97],[452,54,400,98],[453,4,401,4],[454,2,402,0],[455,0,402,1],[455,3]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync","Recording","_cleanupForUnloadedRecorder","_pollingLoop","_disablePolling","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","createAsync","recording.stopAndUnloadAsync._catch$argument_0","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnRecordingStatusUpdate","setProgressUpdateInterval","prepareToRecordAsync","getAvailableInputs","getCurrentInput","setInput","startAsync","pauseAsync","stopAndUnloadAsync","getURI","createNewLoadedSound","createNewLoadedSoundAsync"],"mappings":"AAA;OCc;CDE;OEO;CFE;OG4C;kCCW;KDW;mBEC;KFU;IGC;KHK;IIC;KJK;IKC;KLI;IMC;KNU;yBOqC;iDCe;aDI;KPG;qBSM;8DCG,0CD;KTU;IWU;KXS;IYM;KZG;Iaa;KbmC;IcK;KdE;IeK;KfE;IgBM;KhBE;IiBM;0DPC,sCO;KjBC;IkBU;0DRC,sCQ;KlBC;ImBY;KnB2B;IoBQ;KpBE;IqBI;KrBG;IsBa;KtBK;CHC"},"hasCjsExports":false},"type":"js/module"}]}