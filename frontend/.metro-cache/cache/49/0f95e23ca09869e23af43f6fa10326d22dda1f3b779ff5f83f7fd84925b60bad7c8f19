{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":106,"index":106}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":107},"end":{"line":2,"column":77,"index":184}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"],"imports":1}},{"name":"./RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":185},"end":{"line":3,"column":63,"index":248}}],"key":"I+7uSAstO8eEOs35HbXycwhHsmk=","exportNames":["*"],"imports":1}},{"name":"./Sound","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":249},"end":{"line":4,"column":32,"index":281}}],"key":"/AmsCczpb+cEWj52kLwrv57uCLQ=","exportNames":["*"],"imports":1}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":66,"index":348}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"],"imports":1}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":349},"end":{"line":6,"column":39,"index":388}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"],"imports":1}},{"name":"./Recording.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":405,"column":0,"index":18427},"end":{"line":405,"column":34,"index":18461}}],"key":"naz3Z70IbfNhaPL9MpXy4n4698o=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _Recording;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  Object.defineProperty(exports, \"usePermissions\", {\n    enumerable: true,\n    get: function () {\n      return usePermissions;\n    }\n  });\n  Object.defineProperty(exports, \"Recording\", {\n    enumerable: true,\n    get: function () {\n      return Recording;\n    }\n  });\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function () {\n      return _expoModulesCore.PermissionStatus;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[3], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[4], \"./AudioAvailability\");\n  var _RecordingConstants = require(_dependencyMap[5], \"./RecordingConstants\");\n  Object.keys(_RecordingConstants).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _RecordingConstants[k];\n        }\n      });\n    }\n  });\n  var _Sound = require(_dependencyMap[6], \"./Sound\");\n  var _AV = require(_dependencyMap[7], \"../AV\");\n  var _ExponentAV = require(_dependencyMap[8], \"../ExponentAV\");\n  var ExponentAV = _interopDefault(_ExponentAV);\n  var _RecordingTypes = require(_dependencyMap[9], \"./Recording.types\");\n  Object.keys(_RecordingTypes).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _RecordingTypes[k];\n        }\n      });\n    }\n  });\n  var _recorderExists = false;\n  var eventEmitter = _expoModulesCore.Platform.OS === 'android' ? new _expoModulesCore.LegacyEventEmitter(ExponentAV.default) : null;\n  /**\n   * Checks user's permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  function getPermissionsAsync() {\n    return _getPermissionsAsync.apply(this, arguments);\n  }\n  /**\n   * Asks the user to grant permissions for audio recording.\n   * @return A promise that resolves to an object of type `PermissionResponse`.\n   * @platform android\n   * @platform ios\n   */\n  function _getPermissionsAsync() {\n    _getPermissionsAsync = (0, _asyncToGenerator.default)(function* () {\n      return ExponentAV.default.getPermissionsAsync();\n    });\n    return _getPermissionsAsync.apply(this, arguments);\n  }\n  function requestPermissionsAsync() {\n    return _requestPermissionsAsync.apply(this, arguments);\n  }\n  /**\n   * Check or request permissions to record audio.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = Audio.usePermissions();\n   * ```\n   */\n  function _requestPermissionsAsync() {\n    _requestPermissionsAsync = (0, _asyncToGenerator.default)(function* () {\n      return ExponentAV.default.requestPermissionsAsync();\n    });\n    return _requestPermissionsAsync.apply(this, arguments);\n  }\n  var usePermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getPermissionsAsync,\n    requestMethod: requestPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * > **warning** **Warning**: Experimental for web.\n   *\n   * This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync`\n   * must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that\n   * only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync`\n   * at any given time.\n   *\n   * Note that your experience must request audio recording permissions in order for recording to function.\n   * See the [`Permissions` module](/guides/permissions) for more details.\n   *\n   * Additionally, audio recording is [not supported in the iOS Simulator](/workflow/ios-simulator/#limitations).\n   *\n   * @example\n   * ```ts\n   * const recording = new Audio.Recording();\n   * try {\n   *   await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n   *   await recording.startAsync();\n   *   // You are now recording!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A newly constructed instance of `Audio.Recording`.\n   * @platform android\n   * @platform ios\n   */\n  var Recording = /*#__PURE__*/function () {\n    function Recording() {\n      var _this = this;\n      (0, _classCallCheck.default)(this, Recording);\n      this._subscription = null;\n      this._canRecord = false;\n      this._isDoneRecording = false;\n      this._finalDurationMillis = 0;\n      this._uri = null;\n      this._onRecordingStatusUpdate = null;\n      this._progressUpdateTimeoutVariable = null;\n      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n      this._options = null;\n      // Internal methods\n      this._cleanupForUnloadedRecorder = /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator.default)(function* (finalStatus) {\n          _this._canRecord = false;\n          _this._isDoneRecording = true;\n          _this._finalDurationMillis = finalStatus?.durationMillis ?? 0;\n          _recorderExists = false;\n          if (_this._subscription) {\n            _this._subscription.remove();\n            _this._subscription = null;\n          }\n          _this._disablePolling();\n          return yield _this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this._pollingLoop = /*#__PURE__*/(0, _asyncToGenerator.default)(function* () {\n        if ((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null) {\n          _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n          try {\n            yield _this.getStatusAsync();\n          } catch {\n            _this._disablePolling();\n          }\n        }\n      });\n      // Get status API\n      /**\n       * Gets the `status` of the `Recording`.\n       * @return A `Promise` that is resolved with the `RecordingStatus` object.\n       */\n      this.getStatusAsync = /*#__PURE__*/(0, _asyncToGenerator.default)(function* () {\n        // Automatically calls onRecordingStatusUpdate.\n        if (_this._canRecord) {\n          return _this._performOperationAndHandleStatusAsync(() => ExponentAV.default.getAudioRecordingStatus());\n        }\n        var status = {\n          canRecord: false,\n          isRecording: false,\n          isDoneRecording: _this._isDoneRecording,\n          durationMillis: _this._finalDurationMillis\n        };\n        _this._callOnRecordingStatusUpdateForNewStatus(status);\n        return status;\n      });\n    }\n    return (0, _createClass.default)(Recording, [{\n      key: \"_disablePolling\",\n      value: function _disablePolling() {\n        if (this._progressUpdateTimeoutVariable != null) {\n          clearTimeout(this._progressUpdateTimeoutVariable);\n          this._progressUpdateTimeoutVariable = null;\n        }\n      }\n    }, {\n      key: \"_enablePollingIfNecessaryAndPossible\",\n      value: function _enablePollingIfNecessaryAndPossible() {\n        if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n          this._disablePolling();\n          this._pollingLoop();\n        }\n      }\n    }, {\n      key: \"_callOnRecordingStatusUpdateForNewStatus\",\n      value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n        if (this._onRecordingStatusUpdate != null) {\n          this._onRecordingStatusUpdate(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function () {\n        var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator.default)(function* (operation) {\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._canRecord) {\n            var status = yield operation();\n            this._callOnRecordingStatusUpdateForNewStatus(status);\n            return status;\n          } else {\n            throw new Error('Cannot complete operation because this recorder is not ready to record.');\n          }\n        });\n        function _performOperationAndHandleStatusAsync(_x2) {\n          return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n        }\n        return _performOperationAndHandleStatusAsync;\n      }()\n      /**\n       * Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.\n       *\n       * ```ts\n       * const { recording, status } = await Audio.Recording.createAsync(\n       *   options,\n       *   onRecordingStatusUpdate,\n       *   progressUpdateIntervalMillis\n       * );\n       *\n       * // Which is equivalent to the following:\n       * const recording = new Audio.Recording();\n       * await recording.prepareToRecordAsync(options);\n       * recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n       * await recording.startAsync();\n       * ```\n       *\n       * @param options Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to,\n       * the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.\n       * @param onRecordingStatusUpdate A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).\n       * @param progressUpdateIntervalMillis The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.\n       *\n       * @example\n       * ```ts\n       * try {\n       *   const { recording: recordingObject, status } = await Audio.Recording.createAsync(\n       *     Audio.RecordingOptionsPresets.HIGH_QUALITY\n       *   );\n       *   // You are now recording!\n       * } catch (error) {\n       *   // An error occurred!\n       * }\n       * ```\n       *\n       * @return A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.\n       */\n    }, {\n      key: \"setOnRecordingStatusUpdate\",\n      value:\n      /**\n       * Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.\n       *\n       * `onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`,\n       * `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record.\n       * Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n       *\n       * @param onRecordingStatusUpdate A function taking a single parameter `RecordingStatus`.\n       */\n      function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n        this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n        if (onRecordingStatusUpdate == null) {\n          this._disablePolling();\n        } else {\n          this._enablePollingIfNecessaryAndPossible();\n        }\n        this.getStatusAsync();\n      }\n      /**\n       * Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record.\n       * See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.\n       * @param progressUpdateIntervalMillis The new interval between calls of `onRecordingStatusUpdate`.\n       */\n    }, {\n      key: \"setProgressUpdateInterval\",\n      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        this.getStatusAsync();\n      }\n      // Record API\n      /**\n       * Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`.\n       * This method can only be called if the `Recording` instance has never yet been prepared.\n       *\n       * @param options `RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension.\n       * If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.\n       *\n       * @return A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists\n       * in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid,\n       * the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.\n       */\n    }, {\n      key: \"prepareToRecordAsync\",\n      value: function () {\n        var _prepareToRecordAsync = (0, _asyncToGenerator.default)(function* () {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (_recorderExists) {\n            throw new Error('Only one Recording object can be prepared at a given time.');\n          }\n          if (this._isDoneRecording) {\n            throw new Error('This Recording object is done recording; you must make a new one.');\n          }\n          if (!options || !options.android || !options.ios) {\n            throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n          }\n          var extensionRegex = /^\\.\\w+$/;\n          if (!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension)) {\n            throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n          }\n          if (!this._canRecord) {\n            if (eventEmitter) {\n              this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n            }\n            var _yield$ExponentAV$pre = yield ExponentAV.default.prepareAudioRecorder(options),\n              uri = _yield$ExponentAV$pre.uri,\n              status = _yield$ExponentAV$pre.status;\n            _recorderExists = true;\n            this._uri = uri;\n            this._options = options;\n            this._canRecord = true;\n            var currentStatus = {\n              ...status,\n              canRecord: true\n            };\n            this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n            this._enablePollingIfNecessaryAndPossible();\n            return currentStatus;\n          } else {\n            throw new Error('This Recording object is already prepared to record.');\n          }\n        });\n        function prepareToRecordAsync() {\n          return _prepareToRecordAsync.apply(this, arguments);\n        }\n        return prepareToRecordAsync;\n      }()\n      /**\n       * Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled with an array of `RecordingInput` objects.\n       */\n    }, {\n      key: \"getAvailableInputs\",\n      value: (function () {\n        var _getAvailableInputs = (0, _asyncToGenerator.default)(function* () {\n          return ExponentAV.default.getAvailableInputs();\n        });\n        function getAvailableInputs() {\n          return _getAvailableInputs.apply(this, arguments);\n        }\n        return getAvailableInputs;\n      }()\n      /**\n       * Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled with a `RecordingInput` object.\n       */\n      )\n    }, {\n      key: \"getCurrentInput\",\n      value: (function () {\n        var _getCurrentInput = (0, _asyncToGenerator.default)(function* () {\n          return ExponentAV.default.getCurrentInput();\n        });\n        function getCurrentInput() {\n          return _getCurrentInput.apply(this, arguments);\n        }\n        return getCurrentInput;\n      }()\n      /**\n       * Sets the current recording input.\n       * @param inputUid The uid of a `RecordingInput`.\n       * @return A `Promise` that is resolved if successful or rejected if not.\n       */\n      )\n    }, {\n      key: \"setInput\",\n      value: (function () {\n        var _setInput = (0, _asyncToGenerator.default)(function* (inputUid) {\n          return ExponentAV.default.setInput(inputUid);\n        });\n        function setInput(_x3) {\n          return _setInput.apply(this, arguments);\n        }\n        return setInput;\n      }()\n      /**\n       * Begins recording. This method can only be called if the `Recording` has been prepared.\n       * @return A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started.\n       * The promise is resolved with the `RecordingStatus` of the recording.\n       */\n      )\n    }, {\n      key: \"startAsync\",\n      value: (function () {\n        var _startAsync = (0, _asyncToGenerator.default)(function* () {\n          return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.startAudioRecording());\n        });\n        function startAsync() {\n          return _startAsync.apply(this, arguments);\n        }\n        return startAsync;\n      }()\n      /**\n       * Pauses recording. This method can only be called if the `Recording` has been prepared.\n       *\n       * > This is only available on Android API version 24 and later.\n       *\n       * @return A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused.\n       * If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the\n       * `RecordingStatus` of the recording.\n       */\n      )\n    }, {\n      key: \"pauseAsync\",\n      value: (function () {\n        var _pauseAsync = (0, _asyncToGenerator.default)(function* () {\n          return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.pauseAudioRecording());\n        });\n        function pauseAsync() {\n          return _pauseAsync.apply(this, arguments);\n        }\n        return pauseAsync;\n      }()\n      /**\n       * Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance\n       * to an unprepared state, and another `Recording` instance must be created in order to record again.\n       * This method can only be called if the `Recording` has been prepared.\n       *\n       * > On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and\n       * > no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.\n       *\n       * @return A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped.\n       * The promise is resolved with the `RecordingStatus` of the recording.\n       */\n      )\n    }, {\n      key: \"stopAndUnloadAsync\",\n      value: (function () {\n        var _stopAndUnloadAsync = (0, _asyncToGenerator.default)(function* () {\n          if (!this._canRecord) {\n            if (this._isDoneRecording) {\n              throw new Error('Cannot unload a Recording that has already been unloaded.');\n            } else {\n              throw new Error('Cannot unload a Recording that has not been prepared.');\n            }\n          }\n          // We perform a separate native API call so that the state of the Recording can be updated with\n          // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n          var stopResult;\n          var stopError;\n          try {\n            stopResult = yield ExponentAV.default.stopAudioRecording();\n          } catch (err) {\n            stopError = err;\n          }\n          // Web has to return the URI at the end of recording, so needs a little destructuring\n          if (_expoModulesCore.Platform.OS === 'web' && stopResult?.uri !== undefined) {\n            this._uri = stopResult.uri;\n          }\n          // Clean-up and return status\n          yield ExponentAV.default.unloadAudioRecorder();\n          var status = yield this._cleanupForUnloadedRecorder(stopResult);\n          return stopError ? Promise.reject(stopError) : status;\n        });\n        function stopAndUnloadAsync() {\n          return _stopAndUnloadAsync.apply(this, arguments);\n        }\n        return stopAndUnloadAsync;\n      }() // Read API\n      /**\n       * Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared\n       * to record. On web, this will not return the URI until the recording is finished.\n       * @return A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared\n       * to record (or, on Web, if the recording has not finished).\n       */\n      )\n    }, {\n      key: \"getURI\",\n      value: function getURI() {\n        return this._uri;\n      }\n      /**\n       * @deprecated Use `createNewLoadedSoundAsync()` instead.\n       */\n    }, {\n      key: \"createNewLoadedSound\",\n      value: (function () {\n        var _createNewLoadedSound = (0, _asyncToGenerator.default)(function* () {\n          var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          console.warn(`createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`);\n          return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n        });\n        function createNewLoadedSound() {\n          return _createNewLoadedSound.apply(this, arguments);\n        }\n        return createNewLoadedSound;\n      }()\n      /**\n       * Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording`\n       * is done recording and `stopAndUnloadAsync()` has been called.\n       *\n       * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n       * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet`\n       * and the default initial playback status.\n       * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n       * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n       *\n       * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.\n       */\n      )\n    }, {\n      key: \"createNewLoadedSoundAsync\",\n      value: (function () {\n        var _createNewLoadedSoundAsync = (0, _asyncToGenerator.default)(function* () {\n          var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          if (this._uri == null || !this._isDoneRecording) {\n            throw new Error('Cannot create sound when the Recording has not finished!');\n          }\n          return _Sound.Sound.createAsync({\n            uri: this._uri\n          }, initialStatus, onPlaybackStatusUpdate, false);\n        });\n        function createNewLoadedSoundAsync() {\n          return _createNewLoadedSoundAsync.apply(this, arguments);\n        }\n        return createNewLoadedSoundAsync;\n      }())\n    }]);\n  }();\n  _Recording = Recording;\n  Recording.createAsync = /*#__PURE__*/(0, _asyncToGenerator.default)(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _RecordingConstants.RecordingOptionsPresets.LOW_QUALITY;\n    var onRecordingStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var progressUpdateIntervalMillis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var recording = new _Recording();\n    if (progressUpdateIntervalMillis) {\n      recording._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    }\n    recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);\n    yield recording.prepareToRecordAsync({\n      ...options,\n      keepAudioActiveHint: true\n    });\n    try {\n      var status = yield recording.startAsync();\n      return {\n        recording,\n        status\n      };\n    } catch (err) {\n      recording.stopAndUnloadAsync().catch(_e => {\n        // Since there was an issue with starting, when trying calling stopAndUnloadAsync\n        // the promise is rejected which is unhandled\n        // lets catch it since its expected\n      });\n      throw err;\n    }\n  });\n});","lineCount":593,"map":[[13,2,15,0,"exports"],[13,9,15,0],[13,10,15,0,"getPermissionsAsync"],[13,29,15,0],[13,32,15,0,"getPermissionsAsync"],[13,51,15,0],[14,2,24,0,"exports"],[14,9,24,0],[14,10,24,0,"requestPermissionsAsync"],[14,33,24,0],[14,36,24,0,"requestPermissionsAsync"],[14,59,24,0],[15,2,36,0,"Object"],[15,8,36,0],[15,9,36,0,"defineProperty"],[15,23,36,0],[15,24,36,0,"exports"],[15,31,36,0],[16,4,36,0,"enumerable"],[16,14,36,0],[17,4,36,0,"get"],[17,7,36,0],[17,18,36,0,"get"],[17,19,36,0],[18,6,36,0],[18,13,36,0,"usePermissions"],[18,27,36,0],[19,4,36,0],[20,2,36,0],[21,2,70,0,"Object"],[21,8,70,0],[21,9,70,0,"defineProperty"],[21,23,70,0],[21,24,70,0,"exports"],[21,31,70,0],[22,4,70,0,"enumerable"],[22,14,70,0],[23,4,70,0,"get"],[23,7,70,0],[23,18,70,0,"get"],[23,19,70,0],[24,6,70,0],[24,13,70,0,"Recording"],[24,22,70,0],[25,4,70,0],[26,2,70,0],[27,2,403,0,"Object"],[27,8,403,0],[27,9,403,0,"defineProperty"],[27,23,403,0],[27,24,403,0,"exports"],[27,31,403,0],[28,4,403,0,"enumerable"],[28,14,403,0],[29,4,403,0,"get"],[29,7,403,0],[29,18,403,0,"get"],[29,19,403,0],[30,6,403,0],[30,13,403,9,"PermissionStatus"],[30,29,403,25],[30,30,403,25,"PermissionStatus"],[30,46,403,25],[31,4,403,25],[32,2,403,25],[33,2,403,28],[33,6,403,28,"_babelRuntimeHelpersClassCallCheck"],[33,40,403,28],[33,43,403,28,"require"],[33,50,403,28],[33,51,403,28,"_dependencyMap"],[33,65,403,28],[34,2,403,28],[34,6,403,28,"_classCallCheck"],[34,21,403,28],[34,24,403,28,"_interopDefault"],[34,39,403,28],[34,40,403,28,"_babelRuntimeHelpersClassCallCheck"],[34,74,403,28],[35,2,403,28],[35,6,403,28,"_babelRuntimeHelpersCreateClass"],[35,37,403,28],[35,40,403,28,"require"],[35,47,403,28],[35,48,403,28,"_dependencyMap"],[35,62,403,28],[36,2,403,28],[36,6,403,28,"_createClass"],[36,18,403,28],[36,21,403,28,"_interopDefault"],[36,36,403,28],[36,37,403,28,"_babelRuntimeHelpersCreateClass"],[36,68,403,28],[37,2,403,28],[37,6,403,28,"_babelRuntimeHelpersAsyncToGenerator"],[37,42,403,28],[37,45,403,28,"require"],[37,52,403,28],[37,53,403,28,"_dependencyMap"],[37,67,403,28],[38,2,403,28],[38,6,403,28,"_asyncToGenerator"],[38,23,403,28],[38,26,403,28,"_interopDefault"],[38,41,403,28],[38,42,403,28,"_babelRuntimeHelpersAsyncToGenerator"],[38,78,403,28],[39,2,1,0],[39,6,1,0,"_expoModulesCore"],[39,22,1,0],[39,25,1,0,"require"],[39,32,1,0],[39,33,1,0,"_dependencyMap"],[39,47,1,0],[40,2,2,0],[40,6,2,0,"_AudioAvailability"],[40,24,2,0],[40,27,2,0,"require"],[40,34,2,0],[40,35,2,0,"_dependencyMap"],[40,49,2,0],[41,2,3,0],[41,6,3,0,"_RecordingConstants"],[41,25,3,0],[41,28,3,0,"require"],[41,35,3,0],[41,36,3,0,"_dependencyMap"],[41,50,3,0],[42,2,404,0,"Object"],[42,8,404,0],[42,9,404,0,"keys"],[42,13,404,0],[42,14,404,0,"_RecordingConstants"],[42,33,404,0],[42,35,404,0,"forEach"],[42,42,404,0],[42,53,404,0,"k"],[42,54,404,0],[43,4,404,0],[43,8,404,0,"k"],[43,9,404,0],[43,28,404,0,"Object"],[43,34,404,0],[43,35,404,0,"prototype"],[43,44,404,0],[43,45,404,0,"hasOwnProperty"],[43,59,404,0],[43,60,404,0,"call"],[43,64,404,0],[43,65,404,0,"exports"],[43,72,404,0],[43,74,404,0,"k"],[43,75,404,0],[44,6,404,0,"Object"],[44,12,404,0],[44,13,404,0,"defineProperty"],[44,27,404,0],[44,28,404,0,"exports"],[44,35,404,0],[44,37,404,0,"k"],[44,38,404,0],[45,8,404,0,"enumerable"],[45,18,404,0],[46,8,404,0,"get"],[46,11,404,0],[46,22,404,0,"get"],[46,23,404,0],[47,10,404,0],[47,17,404,0,"_RecordingConstants"],[47,36,404,0],[47,37,404,0,"k"],[47,38,404,0],[48,8,404,0],[49,6,404,0],[50,4,404,0],[51,2,404,0],[52,2,4,0],[52,6,4,0,"_Sound"],[52,12,4,0],[52,15,4,0,"require"],[52,22,4,0],[52,23,4,0,"_dependencyMap"],[52,37,4,0],[53,2,5,0],[53,6,5,0,"_AV"],[53,9,5,0],[53,12,5,0,"require"],[53,19,5,0],[53,20,5,0,"_dependencyMap"],[53,34,5,0],[54,2,6,0],[54,6,6,0,"_ExponentAV"],[54,17,6,0],[54,20,6,0,"require"],[54,27,6,0],[54,28,6,0,"_dependencyMap"],[54,42,6,0],[55,2,6,0],[55,6,6,0,"ExponentAV"],[55,16,6,0],[55,19,6,0,"_interopDefault"],[55,34,6,0],[55,35,6,0,"_ExponentAV"],[55,46,6,0],[56,2,405,0],[56,6,405,0,"_RecordingTypes"],[56,21,405,0],[56,24,405,0,"require"],[56,31,405,0],[56,32,405,0,"_dependencyMap"],[56,46,405,0],[57,2,405,0,"Object"],[57,8,405,0],[57,9,405,0,"keys"],[57,13,405,0],[57,14,405,0,"_RecordingTypes"],[57,29,405,0],[57,31,405,0,"forEach"],[57,38,405,0],[57,49,405,0,"k"],[57,50,405,0],[58,4,405,0],[58,8,405,0,"k"],[58,9,405,0],[58,28,405,0,"Object"],[58,34,405,0],[58,35,405,0,"prototype"],[58,44,405,0],[58,45,405,0,"hasOwnProperty"],[58,59,405,0],[58,60,405,0,"call"],[58,64,405,0],[58,65,405,0,"exports"],[58,72,405,0],[58,74,405,0,"k"],[58,75,405,0],[59,6,405,0,"Object"],[59,12,405,0],[59,13,405,0,"defineProperty"],[59,27,405,0],[59,28,405,0,"exports"],[59,35,405,0],[59,37,405,0,"k"],[59,38,405,0],[60,8,405,0,"enumerable"],[60,18,405,0],[61,8,405,0,"get"],[61,11,405,0],[61,22,405,0,"get"],[61,23,405,0],[62,10,405,0],[62,17,405,0,"_RecordingTypes"],[62,32,405,0],[62,33,405,0,"k"],[62,34,405,0],[63,8,405,0],[64,6,405,0],[65,4,405,0],[66,2,405,0],[67,2,7,0],[67,6,7,4,"_recorderExists"],[67,21,7,19],[67,24,7,22],[67,29,7,27],[68,2,8,0],[68,6,8,6,"eventEmitter"],[68,18,8,18],[68,21,8,21,"Platform"],[68,37,8,29],[68,38,8,29,"Platform"],[68,46,8,29],[68,47,8,30,"OS"],[68,49,8,32],[68,54,8,37],[68,63,8,46],[68,66,8,49],[68,70,8,53,"LegacyEventEmitter"],[68,86,8,71],[68,87,8,71,"LegacyEventEmitter"],[68,105,8,71],[68,106,8,72,"ExponentAV"],[68,116,8,82],[68,117,8,82,"default"],[68,124,8,82],[68,125,8,83],[68,128,8,86],[68,132,8,90],[69,2,9,0],[70,0,10,0],[71,0,11,0],[72,0,12,0],[73,0,13,0],[74,0,14,0],[75,2,9,0],[75,11,15,22,"getPermissionsAsync"],[75,30,15,41,"getPermissionsAsync"],[75,31,15,41],[76,4,15,41],[76,11,15,41,"_getPermissionsAsync"],[76,31,15,41],[76,32,15,41,"apply"],[76,37,15,41],[76,44,15,41,"arguments"],[76,53,15,41],[77,2,15,41],[78,2,18,0],[79,0,19,0],[80,0,20,0],[81,0,21,0],[82,0,22,0],[83,0,23,0],[84,2,18,0],[84,11,18,0,"_getPermissionsAsync"],[84,32,18,0],[85,4,18,0,"_getPermissionsAsync"],[85,24,18,0],[85,31,18,0,"_asyncToGenerator"],[85,48,18,0],[85,49,18,0,"default"],[85,56,18,0],[85,58,15,7],[85,71,15,44],[86,6,16,4],[86,13,16,11,"ExponentAV"],[86,23,16,21],[86,24,16,21,"default"],[86,31,16,21],[86,32,16,22,"getPermissionsAsync"],[86,51,16,41],[86,52,16,42],[86,53,16,43],[87,4,17,0],[87,5,17,1],[88,4,17,1],[88,11,17,1,"_getPermissionsAsync"],[88,31,17,1],[88,32,17,1,"apply"],[88,37,17,1],[88,44,17,1,"arguments"],[88,53,17,1],[89,2,17,1],[90,2,17,1],[90,11,24,22,"requestPermissionsAsync"],[90,34,24,45,"requestPermissionsAsync"],[90,35,24,45],[91,4,24,45],[91,11,24,45,"_requestPermissionsAsync"],[91,35,24,45],[91,36,24,45,"apply"],[91,41,24,45],[91,48,24,45,"arguments"],[91,57,24,45],[92,2,24,45],[93,2,27,0],[94,0,28,0],[95,0,29,0],[96,0,30,0],[97,0,31,0],[98,0,32,0],[99,0,33,0],[100,0,34,0],[101,0,35,0],[102,2,27,0],[102,11,27,0,"_requestPermissionsAsync"],[102,36,27,0],[103,4,27,0,"_requestPermissionsAsync"],[103,28,27,0],[103,35,27,0,"_asyncToGenerator"],[103,52,27,0],[103,53,27,0,"default"],[103,60,27,0],[103,62,24,7],[103,75,24,48],[104,6,25,4],[104,13,25,11,"ExponentAV"],[104,23,25,21],[104,24,25,21,"default"],[104,31,25,21],[104,32,25,22,"requestPermissionsAsync"],[104,55,25,45],[104,56,25,46],[104,57,25,47],[105,4,26,0],[105,5,26,1],[106,4,26,1],[106,11,26,1,"_requestPermissionsAsync"],[106,35,26,1],[106,36,26,1,"apply"],[106,41,26,1],[106,48,26,1,"arguments"],[106,57,26,1],[107,2,26,1],[108,2,36,7],[108,6,36,13,"usePermissions"],[108,20,36,27],[108,23,36,30],[108,27,36,30,"createPermissionHook"],[108,43,36,50],[108,44,36,50,"createPermissionHook"],[108,64,36,50],[108,66,36,51],[109,4,37,4,"getMethod"],[109,13,37,13],[109,15,37,15,"getPermissionsAsync"],[109,34,37,34],[110,4,38,4,"requestMethod"],[110,17,38,17],[110,19,38,19,"requestPermissionsAsync"],[111,2,39,0],[111,3,39,1],[111,4,39,2],[112,2,40,0],[113,2,41,0],[114,0,42,0],[115,0,43,0],[116,0,44,0],[117,0,45,0],[118,0,46,0],[119,0,47,0],[120,0,48,0],[121,0,49,0],[122,0,50,0],[123,0,51,0],[124,0,52,0],[125,0,53,0],[126,0,54,0],[127,0,55,0],[128,0,56,0],[129,0,57,0],[130,0,58,0],[131,0,59,0],[132,0,60,0],[133,0,61,0],[134,0,62,0],[135,0,63,0],[136,0,64,0],[137,0,65,0],[138,0,66,0],[139,0,67,0],[140,0,68,0],[141,0,69,0],[142,2,41,0],[142,6,70,13,"Recording"],[142,15,70,22],[143,4,70,22],[143,13,70,22,"Recording"],[143,23,70,22],[144,6,70,22],[144,10,70,22,"_this"],[144,15,70,22],[145,6,70,22],[145,10,70,22,"_classCallCheck"],[145,25,70,22],[145,26,70,22,"default"],[145,33,70,22],[145,41,70,22,"Recording"],[145,50,70,22],[146,6,70,22],[146,11,71,4,"_subscription"],[146,24,71,17],[146,27,71,20],[146,31,71,24],[147,6,71,24],[147,11,72,4,"_canRecord"],[147,21,72,14],[147,24,72,17],[147,29,72,22],[148,6,72,22],[148,11,73,4,"_isDoneRecording"],[148,27,73,20],[148,30,73,23],[148,35,73,28],[149,6,73,28],[149,11,74,4,"_finalDurationMillis"],[149,31,74,24],[149,34,74,27],[149,35,74,28],[150,6,74,28],[150,11,75,4,"_uri"],[150,15,75,8],[150,18,75,11],[150,22,75,15],[151,6,75,15],[151,11,76,4,"_onRecordingStatusUpdate"],[151,35,76,28],[151,38,76,31],[151,42,76,35],[152,6,76,35],[152,11,77,4,"_progressUpdateTimeoutVariable"],[152,41,77,34],[152,44,77,37],[152,48,77,41],[153,6,77,41],[153,11,78,4,"_progressUpdateIntervalMillis"],[153,40,78,33],[153,43,78,36,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[153,46,78,76],[153,47,78,76,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[153,87,78,76],[154,6,78,76],[154,11,79,4,"_options"],[154,19,79,12],[154,22,79,15],[154,26,79,19],[155,6,80,4],[156,6,80,4],[156,11,81,4,"_cleanupForUnloadedRecorder"],[156,38,81,31],[157,8,81,31],[157,12,81,31,"_ref"],[157,16,81,31],[157,23,81,31,"_asyncToGenerator"],[157,40,81,31],[157,41,81,31,"default"],[157,48,81,31],[157,50,81,34],[157,61,81,41,"finalStatus"],[157,72,81,52],[157,74,81,57],[158,10,82,8,"_this"],[158,15,82,12],[158,16,82,13,"_canRecord"],[158,26,82,23],[158,29,82,26],[158,34,82,31],[159,10,83,8,"_this"],[159,15,83,12],[159,16,83,13,"_isDoneRecording"],[159,32,83,29],[159,35,83,32],[159,39,83,36],[160,10,84,8,"_this"],[160,15,84,12],[160,16,84,13,"_finalDurationMillis"],[160,36,84,33],[160,39,84,36,"finalStatus"],[160,50,84,47],[160,52,84,49,"durationMillis"],[160,66,84,63],[160,70,84,67],[160,71,84,68],[161,10,85,8,"_recorderExists"],[161,25,85,23],[161,28,85,26],[161,33,85,31],[162,10,86,8],[162,14,86,12,"_this"],[162,19,86,16],[162,20,86,17,"_subscription"],[162,33,86,30],[162,35,86,32],[163,12,87,12,"_this"],[163,17,87,16],[163,18,87,17,"_subscription"],[163,31,87,30],[163,32,87,31,"remove"],[163,38,87,37],[163,39,87,38],[163,40,87,39],[164,12,88,12,"_this"],[164,17,88,16],[164,18,88,17,"_subscription"],[164,31,88,30],[164,34,88,33],[164,38,88,37],[165,10,89,8],[166,10,90,8,"_this"],[166,15,90,12],[166,16,90,13,"_disablePolling"],[166,31,90,28],[166,32,90,29],[166,33,90,30],[167,10,91,8],[167,23,91,21,"_this"],[167,28,91,25],[167,29,91,26,"getStatusAsync"],[167,43,91,40],[167,44,91,41],[167,45,91,42],[167,46,91,43],[167,47,91,44],[168,8,92,4],[168,9,92,5],[169,8,92,5],[169,25,92,5,"_x"],[169,27,92,5],[170,10,92,5],[170,17,92,5,"_ref"],[170,21,92,5],[170,22,92,5,"apply"],[170,27,92,5],[170,34,92,5,"arguments"],[170,43,92,5],[171,8,92,5],[172,6,92,5],[173,6,92,5],[173,11,93,4,"_pollingLoop"],[173,23,93,16],[173,43,93,16,"_asyncToGenerator"],[173,60,93,16],[173,61,93,16,"default"],[173,68,93,16],[173,70,93,19],[173,83,93,31],[174,8,94,8],[174,12,94,12],[174,16,94,12,"isAudioEnabled"],[174,34,94,26],[174,35,94,26,"isAudioEnabled"],[174,49,94,26],[174,51,94,27],[174,52,94,28],[174,56,94,32,"_this"],[174,61,94,36],[174,62,94,37,"_canRecord"],[174,72,94,47],[174,76,94,51,"_this"],[174,81,94,55],[174,82,94,56,"_onRecordingStatusUpdate"],[174,106,94,80],[174,110,94,84],[174,114,94,88],[174,116,94,90],[175,10,95,12,"_this"],[175,15,95,16],[175,16,95,17,"_progressUpdateTimeoutVariable"],[175,46,95,47],[175,49,95,50,"setTimeout"],[175,59,95,60],[175,60,95,61,"_this"],[175,65,95,65],[175,66,95,66,"_pollingLoop"],[175,78,95,78],[175,80,95,80,"_this"],[175,85,95,84],[175,86,95,85,"_progressUpdateIntervalMillis"],[175,115,95,114],[175,116,95,115],[176,10,96,12],[176,14,96,16],[177,12,97,16],[177,18,97,22,"_this"],[177,23,97,26],[177,24,97,27,"getStatusAsync"],[177,38,97,41],[177,39,97,42],[177,40,97,43],[178,10,98,12],[178,11,98,13],[178,12,99,12],[178,18,99,18],[179,12,100,16,"_this"],[179,17,100,20],[179,18,100,21,"_disablePolling"],[179,33,100,36],[179,34,100,37],[179,35,100,38],[180,10,101,12],[181,8,102,8],[182,6,103,4],[182,7,103,5],[183,6,191,4],[184,6,192,4],[185,0,193,0],[186,0,194,0],[187,0,195,0],[188,6,192,4],[188,11,196,4,"getStatusAsync"],[188,25,196,18],[188,45,196,18,"_asyncToGenerator"],[188,62,196,18],[188,63,196,18,"default"],[188,70,196,18],[188,72,196,21],[188,85,196,33],[189,8,197,8],[190,8,198,8],[190,12,198,12,"_this"],[190,17,198,16],[190,18,198,17,"_canRecord"],[190,28,198,27],[190,30,198,29],[191,10,199,12],[191,17,199,19,"_this"],[191,22,199,23],[191,23,199,24,"_performOperationAndHandleStatusAsync"],[191,60,199,61],[191,61,199,62],[191,67,199,68,"ExponentAV"],[191,77,199,78],[191,78,199,78,"default"],[191,85,199,78],[191,86,199,79,"getAudioRecordingStatus"],[191,109,199,102],[191,110,199,103],[191,111,199,104],[191,112,199,105],[192,8,200,8],[193,8,201,8],[193,12,201,14,"status"],[193,18,201,20],[193,21,201,23],[194,10,202,12,"canRecord"],[194,19,202,21],[194,21,202,23],[194,26,202,28],[195,10,203,12,"isRecording"],[195,21,203,23],[195,23,203,25],[195,28,203,30],[196,10,204,12,"isDoneRecording"],[196,25,204,27],[196,27,204,29,"_this"],[196,32,204,33],[196,33,204,34,"_isDoneRecording"],[196,49,204,50],[197,10,205,12,"durationMillis"],[197,24,205,26],[197,26,205,28,"_this"],[197,31,205,32],[197,32,205,33,"_finalDurationMillis"],[198,8,206,8],[198,9,206,9],[199,8,207,8,"_this"],[199,13,207,12],[199,14,207,13,"_callOnRecordingStatusUpdateForNewStatus"],[199,54,207,53],[199,55,207,54,"status"],[199,61,207,60],[199,62,207,61],[200,8,208,8],[200,15,208,15,"status"],[200,21,208,21],[201,6,209,4],[201,7,209,5],[202,4,209,5],[203,4,209,5],[203,15,209,5,"_createClass"],[203,27,209,5],[203,28,209,5,"default"],[203,35,209,5],[203,37,209,5,"Recording"],[203,46,209,5],[204,6,209,5,"key"],[204,9,209,5],[205,6,209,5,"value"],[205,11,209,5],[205,13,104,4],[205,22,104,4,"_disablePolling"],[205,37,104,19,"_disablePolling"],[205,38,104,19],[205,40,104,22],[206,8,105,8],[206,12,105,12],[206,16,105,16],[206,17,105,17,"_progressUpdateTimeoutVariable"],[206,47,105,47],[206,51,105,51],[206,55,105,55],[206,57,105,57],[207,10,106,12,"clearTimeout"],[207,22,106,24],[207,23,106,25],[207,27,106,29],[207,28,106,30,"_progressUpdateTimeoutVariable"],[207,58,106,60],[207,59,106,61],[208,10,107,12],[208,14,107,16],[208,15,107,17,"_progressUpdateTimeoutVariable"],[208,45,107,47],[208,48,107,50],[208,52,107,54],[209,8,108,8],[210,6,109,4],[211,4,109,5],[212,6,109,5,"key"],[212,9,109,5],[213,6,109,5,"value"],[213,11,109,5],[213,13,110,4],[213,22,110,4,"_enablePollingIfNecessaryAndPossible"],[213,58,110,40,"_enablePollingIfNecessaryAndPossible"],[213,59,110,40],[213,61,110,43],[214,8,111,8],[214,12,111,12],[214,16,111,12,"isAudioEnabled"],[214,34,111,26],[214,35,111,26,"isAudioEnabled"],[214,49,111,26],[214,51,111,27],[214,52,111,28],[214,56,111,32],[214,60,111,36],[214,61,111,37,"_canRecord"],[214,71,111,47],[214,75,111,51],[214,79,111,55],[214,80,111,56,"_onRecordingStatusUpdate"],[214,104,111,80],[214,108,111,84],[214,112,111,88],[214,114,111,90],[215,10,112,12],[215,14,112,16],[215,15,112,17,"_disablePolling"],[215,30,112,32],[215,31,112,33],[215,32,112,34],[216,10,113,12],[216,14,113,16],[216,15,113,17,"_pollingLoop"],[216,27,113,29],[216,28,113,30],[216,29,113,31],[217,8,114,8],[218,6,115,4],[219,4,115,5],[220,6,115,5,"key"],[220,9,115,5],[221,6,115,5,"value"],[221,11,115,5],[221,13,116,4],[221,22,116,4,"_callOnRecordingStatusUpdateForNewStatus"],[221,62,116,44,"_callOnRecordingStatusUpdateForNewStatus"],[221,63,116,45,"status"],[221,69,116,51],[221,71,116,53],[222,8,117,8],[222,12,117,12],[222,16,117,16],[222,17,117,17,"_onRecordingStatusUpdate"],[222,41,117,41],[222,45,117,45],[222,49,117,49],[222,51,117,51],[223,10,118,12],[223,14,118,16],[223,15,118,17,"_onRecordingStatusUpdate"],[223,39,118,41],[223,40,118,42,"status"],[223,46,118,48],[223,47,118,49],[224,8,119,8],[225,6,120,4],[226,4,120,5],[227,6,120,5,"key"],[227,9,120,5],[228,6,120,5,"value"],[228,11,120,5],[229,8,120,5],[229,12,120,5,"_performOperationAndHandleStatusAsync2"],[229,50,120,5],[229,57,120,5,"_asyncToGenerator"],[229,74,120,5],[229,75,120,5,"default"],[229,82,120,5],[229,84,121,4],[229,95,121,48,"operation"],[229,104,121,57],[229,106,121,59],[230,10,122,8],[230,14,122,8,"throwIfAudioIsDisabled"],[230,32,122,30],[230,33,122,30,"throwIfAudioIsDisabled"],[230,55,122,30],[230,57,122,31],[230,58,122,32],[231,10,123,8],[231,14,123,12],[231,18,123,16],[231,19,123,17,"_canRecord"],[231,29,123,27],[231,31,123,29],[232,12,124,12],[232,16,124,18,"status"],[232,22,124,24],[232,31,124,33,"operation"],[232,40,124,42],[232,41,124,43],[232,42,124,44],[233,12,125,12],[233,16,125,16],[233,17,125,17,"_callOnRecordingStatusUpdateForNewStatus"],[233,57,125,57],[233,58,125,58,"status"],[233,64,125,64],[233,65,125,65],[234,12,126,12],[234,19,126,19,"status"],[234,25,126,25],[235,10,127,8],[235,11,127,9],[235,17,128,13],[236,12,129,12],[236,18,129,18],[236,22,129,22,"Error"],[236,27,129,27],[236,28,129,28],[236,101,129,101],[236,102,129,102],[237,10,130,8],[238,8,131,4],[238,9,131,5],[239,8,131,5],[239,17,121,10,"_performOperationAndHandleStatusAsync"],[239,54,121,47,"_performOperationAndHandleStatusAsync"],[239,55,121,47,"_x2"],[239,58,121,47],[240,10,121,47],[240,17,121,47,"_performOperationAndHandleStatusAsync2"],[240,55,121,47],[240,56,121,47,"apply"],[240,61,121,47],[240,68,121,47,"arguments"],[240,77,121,47],[241,8,121,47],[242,8,121,47],[242,15,121,10,"_performOperationAndHandleStatusAsync"],[242,52,121,47],[243,6,121,47],[244,6,132,4],[245,0,133,0],[246,0,134,0],[247,0,135,0],[248,0,136,0],[249,0,137,0],[250,0,138,0],[251,0,139,0],[252,0,140,0],[253,0,141,0],[254,0,142,0],[255,0,143,0],[256,0,144,0],[257,0,145,0],[258,0,146,0],[259,0,147,0],[260,0,148,0],[261,0,149,0],[262,0,150,0],[263,0,151,0],[264,0,152,0],[265,0,153,0],[266,0,154,0],[267,0,155,0],[268,0,156,0],[269,0,157,0],[270,0,158,0],[271,0,159,0],[272,0,160,0],[273,0,161,0],[274,0,162,0],[275,0,163,0],[276,0,164,0],[277,0,165,0],[278,0,166,0],[279,0,167,0],[280,4,132,4],[281,6,132,4,"key"],[281,9,132,4],[282,6,132,4,"value"],[282,11,132,4],[283,6,210,4],[284,0,211,0],[285,0,212,0],[286,0,213,0],[287,0,214,0],[288,0,215,0],[289,0,216,0],[290,0,217,0],[291,0,218,0],[292,6,219,4],[292,15,219,4,"setOnRecordingStatusUpdate"],[292,41,219,30,"setOnRecordingStatusUpdate"],[292,42,219,31,"onRecordingStatusUpdate"],[292,65,219,54],[292,67,219,56],[293,8,220,8],[293,12,220,12],[293,13,220,13,"_onRecordingStatusUpdate"],[293,37,220,37],[293,40,220,40,"onRecordingStatusUpdate"],[293,63,220,63],[294,8,221,8],[294,12,221,12,"onRecordingStatusUpdate"],[294,35,221,35],[294,39,221,39],[294,43,221,43],[294,45,221,45],[295,10,222,12],[295,14,222,16],[295,15,222,17,"_disablePolling"],[295,30,222,32],[295,31,222,33],[295,32,222,34],[296,8,223,8],[296,9,223,9],[296,15,224,13],[297,10,225,12],[297,14,225,16],[297,15,225,17,"_enablePollingIfNecessaryAndPossible"],[297,51,225,53],[297,52,225,54],[297,53,225,55],[298,8,226,8],[299,8,227,8],[299,12,227,12],[299,13,227,13,"getStatusAsync"],[299,27,227,27],[299,28,227,28],[299,29,227,29],[300,6,228,4],[301,6,229,4],[302,0,230,0],[303,0,231,0],[304,0,232,0],[305,0,233,0],[306,4,229,4],[307,6,229,4,"key"],[307,9,229,4],[308,6,229,4,"value"],[308,11,229,4],[308,13,234,4],[308,22,234,4,"setProgressUpdateInterval"],[308,47,234,29,"setProgressUpdateInterval"],[308,48,234,30,"progressUpdateIntervalMillis"],[308,76,234,58],[308,78,234,60],[309,8,235,8],[309,12,235,12],[309,13,235,13,"_progressUpdateIntervalMillis"],[309,42,235,42],[309,45,235,45,"progressUpdateIntervalMillis"],[309,73,235,73],[310,8,236,8],[310,12,236,12],[310,13,236,13,"getStatusAsync"],[310,27,236,27],[310,28,236,28],[310,29,236,29],[311,6,237,4],[312,6,238,4],[313,6,239,4],[314,0,240,0],[315,0,241,0],[316,0,242,0],[317,0,243,0],[318,0,244,0],[319,0,245,0],[320,0,246,0],[321,0,247,0],[322,0,248,0],[323,0,249,0],[324,4,239,4],[325,6,239,4,"key"],[325,9,239,4],[326,6,239,4,"value"],[326,11,239,4],[327,8,239,4],[327,12,239,4,"_prepareToRecordAsync"],[327,33,239,4],[327,40,239,4,"_asyncToGenerator"],[327,57,239,4],[327,58,239,4,"default"],[327,65,239,4],[327,67,250,4],[327,80,250,78],[328,10,250,78],[328,14,250,31,"options"],[328,21,250,38],[328,24,250,38,"arguments"],[328,33,250,38],[328,34,250,38,"length"],[328,40,250,38],[328,48,250,38,"arguments"],[328,57,250,38],[328,65,250,38,"undefined"],[328,74,250,38],[328,77,250,38,"arguments"],[328,86,250,38],[328,92,250,41,"RecordingOptionsPresets"],[328,111,250,64],[328,112,250,64,"RecordingOptionsPresets"],[328,135,250,64],[328,136,250,65,"LOW_QUALITY"],[328,147,250,76],[329,10,251,8],[329,14,251,8,"throwIfAudioIsDisabled"],[329,32,251,30],[329,33,251,30,"throwIfAudioIsDisabled"],[329,55,251,30],[329,57,251,31],[329,58,251,32],[330,10,252,8],[330,14,252,12,"_recorderExists"],[330,29,252,27],[330,31,252,29],[331,12,253,12],[331,18,253,18],[331,22,253,22,"Error"],[331,27,253,27],[331,28,253,28],[331,88,253,88],[331,89,253,89],[332,10,254,8],[333,10,255,8],[333,14,255,12],[333,18,255,16],[333,19,255,17,"_isDoneRecording"],[333,35,255,33],[333,37,255,35],[334,12,256,12],[334,18,256,18],[334,22,256,22,"Error"],[334,27,256,27],[334,28,256,28],[334,95,256,95],[334,96,256,96],[335,10,257,8],[336,10,258,8],[336,14,258,12],[336,15,258,13,"options"],[336,22,258,20],[336,26,258,24],[336,27,258,25,"options"],[336,34,258,32],[336,35,258,33,"android"],[336,42,258,40],[336,46,258,44],[336,47,258,45,"options"],[336,54,258,52],[336,55,258,53,"ios"],[336,58,258,56],[336,60,258,58],[337,12,259,12],[337,18,259,18],[337,22,259,22,"Error"],[337,27,259,27],[337,28,259,28],[337,115,259,115],[337,116,259,116],[338,10,260,8],[339,10,261,8],[339,14,261,14,"extensionRegex"],[339,28,261,28],[339,31,261,31],[339,40,261,40],[340,10,262,8],[340,14,262,12],[340,15,262,13,"options"],[340,22,262,20],[340,23,262,21,"android"],[340,30,262,28],[340,31,262,29,"extension"],[340,40,262,38],[340,44,263,12],[340,45,263,13,"options"],[340,52,263,20],[340,53,263,21,"ios"],[340,56,263,24],[340,57,263,25,"extension"],[340,66,263,34],[340,70,264,12],[340,71,264,13,"extensionRegex"],[340,85,264,27],[340,86,264,28,"test"],[340,90,264,32],[340,91,264,33,"options"],[340,98,264,40],[340,99,264,41,"android"],[340,106,264,48],[340,107,264,49,"extension"],[340,116,264,58],[340,117,264,59],[340,121,265,12],[340,122,265,13,"extensionRegex"],[340,136,265,27],[340,137,265,28,"test"],[340,141,265,32],[340,142,265,33,"options"],[340,149,265,40],[340,150,265,41,"ios"],[340,153,265,44],[340,154,265,45,"extension"],[340,163,265,54],[340,164,265,55],[340,166,265,57],[341,12,266,12],[341,18,266,18],[341,22,266,22,"Error"],[341,27,266,27],[341,28,266,28],[341,63,266,63,"extensionRegex"],[341,77,266,77],[341,78,266,78,"toString"],[341,86,266,86],[341,87,266,87],[341,88,266,88],[341,91,266,91],[341,92,266,92],[342,10,267,8],[343,10,268,8],[343,14,268,12],[343,15,268,13],[343,19,268,17],[343,20,268,18,"_canRecord"],[343,30,268,28],[343,32,268,30],[344,12,269,12],[344,16,269,16,"eventEmitter"],[344,28,269,28],[344,30,269,30],[345,14,270,16],[345,18,270,20],[345,19,270,21,"_subscription"],[345,32,270,34],[345,35,270,37,"eventEmitter"],[345,47,270,49],[345,48,270,50,"addListener"],[345,59,270,61],[345,60,270,62],[345,93,270,95],[345,95,270,97],[345,99,270,101],[345,100,270,102,"_cleanupForUnloadedRecorder"],[345,127,270,129],[345,128,270,130],[346,12,271,12],[347,12,272,12],[347,16,272,12,"_yield$ExponentAV$pre"],[347,37,272,12],[347,46,272,43,"ExponentAV"],[347,56,272,53],[347,57,272,53,"default"],[347,64,272,53],[347,65,272,54,"prepareAudioRecorder"],[347,85,272,74],[347,86,272,75,"options"],[347,93,272,82],[347,94,272,83],[348,14,272,20,"uri"],[348,17,272,23],[348,20,272,23,"_yield$ExponentAV$pre"],[348,41,272,23],[348,42,272,20,"uri"],[348,45,272,23],[349,14,272,25,"status"],[349,20,272,31],[349,23,272,31,"_yield$ExponentAV$pre"],[349,44,272,31],[349,45,272,25,"status"],[349,51,272,31],[350,12,273,12,"_recorderExists"],[350,27,273,27],[350,30,273,30],[350,34,273,34],[351,12,274,12],[351,16,274,16],[351,17,274,17,"_uri"],[351,21,274,21],[351,24,274,24,"uri"],[351,27,274,27],[352,12,275,12],[352,16,275,16],[352,17,275,17,"_options"],[352,25,275,25],[352,28,275,28,"options"],[352,35,275,35],[353,12,276,12],[353,16,276,16],[353,17,276,17,"_canRecord"],[353,27,276,27],[353,30,276,30],[353,34,276,34],[354,12,277,12],[354,16,277,18,"currentStatus"],[354,29,277,31],[354,32,277,34],[355,14,277,36],[355,17,277,39,"status"],[355,23,277,45],[356,14,277,47,"canRecord"],[356,23,277,56],[356,25,277,58],[357,12,277,63],[357,13,277,64],[358,12,278,12],[358,16,278,16],[358,17,278,17,"_callOnRecordingStatusUpdateForNewStatus"],[358,57,278,57],[358,58,278,58,"currentStatus"],[358,71,278,71],[358,72,278,72],[359,12,279,12],[359,16,279,16],[359,17,279,17,"_enablePollingIfNecessaryAndPossible"],[359,53,279,53],[359,54,279,54],[359,55,279,55],[360,12,280,12],[360,19,280,19,"currentStatus"],[360,32,280,32],[361,10,281,8],[361,11,281,9],[361,17,282,13],[362,12,283,12],[362,18,283,18],[362,22,283,22,"Error"],[362,27,283,27],[362,28,283,28],[362,82,283,82],[362,83,283,83],[363,10,284,8],[364,8,285,4],[364,9,285,5],[365,8,285,5],[365,17,250,10,"prepareToRecordAsync"],[365,37,250,30,"prepareToRecordAsync"],[365,38,250,30],[366,10,250,30],[366,17,250,30,"_prepareToRecordAsync"],[366,38,250,30],[366,39,250,30,"apply"],[366,44,250,30],[366,51,250,30,"arguments"],[366,60,250,30],[367,8,250,30],[368,8,250,30],[368,15,250,10,"prepareToRecordAsync"],[368,35,250,30],[369,6,250,30],[370,6,286,4],[371,0,287,0],[372,0,288,0],[373,0,289,0],[374,4,286,4],[375,6,286,4,"key"],[375,9,286,4],[376,6,286,4,"value"],[376,11,286,4],[377,8,286,4],[377,12,286,4,"_getAvailableInputs"],[377,31,286,4],[377,38,286,4,"_asyncToGenerator"],[377,55,286,4],[377,56,286,4,"default"],[377,63,286,4],[377,65,290,4],[377,78,290,31],[378,10,291,8],[378,17,291,15,"ExponentAV"],[378,27,291,25],[378,28,291,25,"default"],[378,35,291,25],[378,36,291,26,"getAvailableInputs"],[378,54,291,44],[378,55,291,45],[378,56,291,46],[379,8,292,4],[379,9,292,5],[380,8,292,5],[380,17,290,10,"getAvailableInputs"],[380,35,290,28,"getAvailableInputs"],[380,36,290,28],[381,10,290,28],[381,17,290,28,"_getAvailableInputs"],[381,36,290,28],[381,37,290,28,"apply"],[381,42,290,28],[381,49,290,28,"arguments"],[381,58,290,28],[382,8,290,28],[383,8,290,28],[383,15,290,10,"getAvailableInputs"],[383,33,290,28],[384,6,290,28],[385,6,293,4],[386,0,294,0],[387,0,295,0],[388,0,296,0],[389,6,293,4],[390,4,293,4],[391,6,293,4,"key"],[391,9,293,4],[392,6,293,4,"value"],[392,11,293,4],[393,8,293,4],[393,12,293,4,"_getCurrentInput"],[393,28,293,4],[393,35,293,4,"_asyncToGenerator"],[393,52,293,4],[393,53,293,4,"default"],[393,60,293,4],[393,62,297,4],[393,75,297,28],[394,10,298,8],[394,17,298,15,"ExponentAV"],[394,27,298,25],[394,28,298,25,"default"],[394,35,298,25],[394,36,298,26,"getCurrentInput"],[394,51,298,41],[394,52,298,42],[394,53,298,43],[395,8,299,4],[395,9,299,5],[396,8,299,5],[396,17,297,10,"getCurrentInput"],[396,32,297,25,"getCurrentInput"],[396,33,297,25],[397,10,297,25],[397,17,297,25,"_getCurrentInput"],[397,33,297,25],[397,34,297,25,"apply"],[397,39,297,25],[397,46,297,25,"arguments"],[397,55,297,25],[398,8,297,25],[399,8,297,25],[399,15,297,10,"getCurrentInput"],[399,30,297,25],[400,6,297,25],[401,6,300,4],[402,0,301,0],[403,0,302,0],[404,0,303,0],[405,0,304,0],[406,6,300,4],[407,4,300,4],[408,6,300,4,"key"],[408,9,300,4],[409,6,300,4,"value"],[409,11,300,4],[410,8,300,4],[410,12,300,4,"_setInput"],[410,21,300,4],[410,28,300,4,"_asyncToGenerator"],[410,45,300,4],[410,46,300,4,"default"],[410,53,300,4],[410,55,305,4],[410,66,305,19,"inputUid"],[410,74,305,27],[410,76,305,29],[411,10,306,8],[411,17,306,15,"ExponentAV"],[411,27,306,25],[411,28,306,25,"default"],[411,35,306,25],[411,36,306,26,"setInput"],[411,44,306,34],[411,45,306,35,"inputUid"],[411,53,306,43],[411,54,306,44],[412,8,307,4],[412,9,307,5],[413,8,307,5],[413,17,305,10,"setInput"],[413,25,305,18,"setInput"],[413,26,305,18,"_x3"],[413,29,305,18],[414,10,305,18],[414,17,305,18,"_setInput"],[414,26,305,18],[414,27,305,18,"apply"],[414,32,305,18],[414,39,305,18,"arguments"],[414,48,305,18],[415,8,305,18],[416,8,305,18],[416,15,305,10,"setInput"],[416,23,305,18],[417,6,305,18],[418,6,308,4],[419,0,309,0],[420,0,310,0],[421,0,311,0],[422,0,312,0],[423,6,308,4],[424,4,308,4],[425,6,308,4,"key"],[425,9,308,4],[426,6,308,4,"value"],[426,11,308,4],[427,8,308,4],[427,12,308,4,"_startAsync"],[427,23,308,4],[427,30,308,4,"_asyncToGenerator"],[427,47,308,4],[427,48,308,4,"default"],[427,55,308,4],[427,57,313,4],[427,70,313,23],[428,10,314,8],[428,17,314,15],[428,21,314,19],[428,22,314,20,"_performOperationAndHandleStatusAsync"],[428,59,314,57],[428,60,314,58],[428,66,314,64,"ExponentAV"],[428,76,314,74],[428,77,314,74,"default"],[428,84,314,74],[428,85,314,75,"startAudioRecording"],[428,104,314,94],[428,105,314,95],[428,106,314,96],[428,107,314,97],[429,8,315,4],[429,9,315,5],[430,8,315,5],[430,17,313,10,"startAsync"],[430,27,313,20,"startAsync"],[430,28,313,20],[431,10,313,20],[431,17,313,20,"_startAsync"],[431,28,313,20],[431,29,313,20,"apply"],[431,34,313,20],[431,41,313,20,"arguments"],[431,50,313,20],[432,8,313,20],[433,8,313,20],[433,15,313,10,"startAsync"],[433,25,313,20],[434,6,313,20],[435,6,316,4],[436,0,317,0],[437,0,318,0],[438,0,319,0],[439,0,320,0],[440,0,321,0],[441,0,322,0],[442,0,323,0],[443,0,324,0],[444,6,316,4],[445,4,316,4],[446,6,316,4,"key"],[446,9,316,4],[447,6,316,4,"value"],[447,11,316,4],[448,8,316,4],[448,12,316,4,"_pauseAsync"],[448,23,316,4],[448,30,316,4,"_asyncToGenerator"],[448,47,316,4],[448,48,316,4,"default"],[448,55,316,4],[448,57,325,4],[448,70,325,23],[449,10,326,8],[449,17,326,15],[449,21,326,19],[449,22,326,20,"_performOperationAndHandleStatusAsync"],[449,59,326,57],[449,60,326,58],[449,66,326,64,"ExponentAV"],[449,76,326,74],[449,77,326,74,"default"],[449,84,326,74],[449,85,326,75,"pauseAudioRecording"],[449,104,326,94],[449,105,326,95],[449,106,326,96],[449,107,326,97],[450,8,327,4],[450,9,327,5],[451,8,327,5],[451,17,325,10,"pauseAsync"],[451,27,325,20,"pauseAsync"],[451,28,325,20],[452,10,325,20],[452,17,325,20,"_pauseAsync"],[452,28,325,20],[452,29,325,20,"apply"],[452,34,325,20],[452,41,325,20,"arguments"],[452,50,325,20],[453,8,325,20],[454,8,325,20],[454,15,325,10,"pauseAsync"],[454,25,325,20],[455,6,325,20],[456,6,328,4],[457,0,329,0],[458,0,330,0],[459,0,331,0],[460,0,332,0],[461,0,333,0],[462,0,334,0],[463,0,335,0],[464,0,336,0],[465,0,337,0],[466,0,338,0],[467,6,328,4],[468,4,328,4],[469,6,328,4,"key"],[469,9,328,4],[470,6,328,4,"value"],[470,11,328,4],[471,8,328,4],[471,12,328,4,"_stopAndUnloadAsync"],[471,31,328,4],[471,38,328,4,"_asyncToGenerator"],[471,55,328,4],[471,56,328,4,"default"],[471,63,328,4],[471,65,339,4],[471,78,339,31],[472,10,340,8],[472,14,340,12],[472,15,340,13],[472,19,340,17],[472,20,340,18,"_canRecord"],[472,30,340,28],[472,32,340,30],[473,12,341,12],[473,16,341,16],[473,20,341,20],[473,21,341,21,"_isDoneRecording"],[473,37,341,37],[473,39,341,39],[474,14,342,16],[474,20,342,22],[474,24,342,26,"Error"],[474,29,342,31],[474,30,342,32],[474,89,342,91],[474,90,342,92],[475,12,343,12],[475,13,343,13],[475,19,344,17],[476,14,345,16],[476,20,345,22],[476,24,345,26,"Error"],[476,29,345,31],[476,30,345,32],[476,85,345,87],[476,86,345,88],[477,12,346,12],[478,10,347,8],[479,10,348,8],[480,10,349,8],[481,10,350,8],[481,14,350,12,"stopResult"],[481,24,350,22],[482,10,351,8],[482,14,351,12,"stopError"],[482,23,351,21],[483,10,352,8],[483,14,352,12],[484,12,353,12,"stopResult"],[484,22,353,22],[484,31,353,31,"ExponentAV"],[484,41,353,41],[484,42,353,41,"default"],[484,49,353,41],[484,50,353,42,"stopAudioRecording"],[484,68,353,60],[484,69,353,61],[484,70,353,62],[485,10,354,8],[485,11,354,9],[485,12,355,8],[485,19,355,15,"err"],[485,22,355,18],[485,24,355,20],[486,12,356,12,"stopError"],[486,21,356,21],[486,24,356,24,"err"],[486,27,356,27],[487,10,357,8],[488,10,358,8],[489,10,359,8],[489,14,359,12,"Platform"],[489,30,359,20],[489,31,359,20,"Platform"],[489,39,359,20],[489,40,359,21,"OS"],[489,42,359,23],[489,47,359,28],[489,52,359,33],[489,56,359,37,"stopResult"],[489,66,359,47],[489,68,359,49,"uri"],[489,71,359,52],[489,76,359,57,"undefined"],[489,85,359,66],[489,87,359,68],[490,12,360,12],[490,16,360,16],[490,17,360,17,"_uri"],[490,21,360,21],[490,24,360,24,"stopResult"],[490,34,360,34],[490,35,360,35,"uri"],[490,38,360,38],[491,10,361,8],[492,10,362,8],[493,10,363,8],[493,16,363,14,"ExponentAV"],[493,26,363,24],[493,27,363,24,"default"],[493,34,363,24],[493,35,363,25,"unloadAudioRecorder"],[493,54,363,44],[493,55,363,45],[493,56,363,46],[494,10,364,8],[494,14,364,14,"status"],[494,20,364,20],[494,29,364,29],[494,33,364,33],[494,34,364,34,"_cleanupForUnloadedRecorder"],[494,61,364,61],[494,62,364,62,"stopResult"],[494,72,364,72],[494,73,364,73],[495,10,365,8],[495,17,365,15,"stopError"],[495,26,365,24],[495,29,365,27,"Promise"],[495,36,365,34],[495,37,365,35,"reject"],[495,43,365,41],[495,44,365,42,"stopError"],[495,53,365,51],[495,54,365,52],[495,57,365,55,"status"],[495,63,365,61],[496,8,366,4],[496,9,366,5],[497,8,366,5],[497,17,339,10,"stopAndUnloadAsync"],[497,35,339,28,"stopAndUnloadAsync"],[497,36,339,28],[498,10,339,28],[498,17,339,28,"_stopAndUnloadAsync"],[498,36,339,28],[498,37,339,28,"apply"],[498,42,339,28],[498,49,339,28,"arguments"],[498,58,339,28],[499,8,339,28],[500,8,339,28],[500,15,339,10,"stopAndUnloadAsync"],[500,33,339,28],[501,6,339,28],[501,10,367,4],[502,6,368,4],[503,0,369,0],[504,0,370,0],[505,0,371,0],[506,0,372,0],[507,0,373,0],[508,6,368,4],[509,4,368,4],[510,6,368,4,"key"],[510,9,368,4],[511,6,368,4,"value"],[511,11,368,4],[511,13,374,4],[511,22,374,4,"getURI"],[511,28,374,10,"getURI"],[511,29,374,10],[511,31,374,13],[512,8,375,8],[512,15,375,15],[512,19,375,19],[512,20,375,20,"_uri"],[512,24,375,24],[513,6,376,4],[514,6,377,4],[515,0,378,0],[516,0,379,0],[517,4,377,4],[518,6,377,4,"key"],[518,9,377,4],[519,6,377,4,"value"],[519,11,377,4],[520,8,377,4],[520,12,377,4,"_createNewLoadedSound"],[520,33,377,4],[520,40,377,4,"_asyncToGenerator"],[520,57,377,4],[520,58,377,4,"default"],[520,65,377,4],[520,67,380,4],[520,80,380,82],[521,10,380,82],[521,14,380,31,"initialStatus"],[521,27,380,44],[521,30,380,44,"arguments"],[521,39,380,44],[521,40,380,44,"length"],[521,46,380,44],[521,54,380,44,"arguments"],[521,63,380,44],[521,71,380,44,"undefined"],[521,80,380,44],[521,83,380,44,"arguments"],[521,92,380,44],[521,98,380,47],[521,99,380,48],[521,100,380,49],[522,10,380,49],[522,14,380,51,"onPlaybackStatusUpdate"],[522,36,380,73],[522,39,380,73,"arguments"],[522,48,380,73],[522,49,380,73,"length"],[522,55,380,73],[522,63,380,73,"arguments"],[522,72,380,73],[522,80,380,73,"undefined"],[522,89,380,73],[522,92,380,73,"arguments"],[522,101,380,73],[522,107,380,76],[522,111,380,80],[523,10,381,8,"console"],[523,17,381,15],[523,18,381,16,"warn"],[523,22,381,20],[523,23,381,21],[523,148,381,146],[523,149,381,147],[524,10,382,8],[524,17,382,15],[524,21,382,19],[524,22,382,20,"createNewLoadedSoundAsync"],[524,47,382,45],[524,48,382,46,"initialStatus"],[524,61,382,59],[524,63,382,61,"onPlaybackStatusUpdate"],[524,85,382,83],[524,86,382,84],[525,8,383,4],[525,9,383,5],[526,8,383,5],[526,17,380,10,"createNewLoadedSound"],[526,37,380,30,"createNewLoadedSound"],[526,38,380,30],[527,10,380,30],[527,17,380,30,"_createNewLoadedSound"],[527,38,380,30],[527,39,380,30,"apply"],[527,44,380,30],[527,51,380,30,"arguments"],[527,60,380,30],[528,8,380,30],[529,8,380,30],[529,15,380,10,"createNewLoadedSound"],[529,35,380,30],[530,6,380,30],[531,6,384,4],[532,0,385,0],[533,0,386,0],[534,0,387,0],[535,0,388,0],[536,0,389,0],[537,0,390,0],[538,0,391,0],[539,0,392,0],[540,0,393,0],[541,0,394,0],[542,0,395,0],[543,6,384,4],[544,4,384,4],[545,6,384,4,"key"],[545,9,384,4],[546,6,384,4,"value"],[546,11,384,4],[547,8,384,4],[547,12,384,4,"_createNewLoadedSoundAsync"],[547,38,384,4],[547,45,384,4,"_asyncToGenerator"],[547,62,384,4],[547,63,384,4,"default"],[547,70,384,4],[547,72,396,4],[547,85,396,87],[548,10,396,87],[548,14,396,36,"initialStatus"],[548,27,396,49],[548,30,396,49,"arguments"],[548,39,396,49],[548,40,396,49,"length"],[548,46,396,49],[548,54,396,49,"arguments"],[548,63,396,49],[548,71,396,49,"undefined"],[548,80,396,49],[548,83,396,49,"arguments"],[548,92,396,49],[548,98,396,52],[548,99,396,53],[548,100,396,54],[549,10,396,54],[549,14,396,56,"onPlaybackStatusUpdate"],[549,36,396,78],[549,39,396,78,"arguments"],[549,48,396,78],[549,49,396,78,"length"],[549,55,396,78],[549,63,396,78,"arguments"],[549,72,396,78],[549,80,396,78,"undefined"],[549,89,396,78],[549,92,396,78,"arguments"],[549,101,396,78],[549,107,396,81],[549,111,396,85],[550,10,397,8],[550,14,397,12],[550,18,397,16],[550,19,397,17,"_uri"],[550,23,397,21],[550,27,397,25],[550,31,397,29],[550,35,397,33],[550,36,397,34],[550,40,397,38],[550,41,397,39,"_isDoneRecording"],[550,57,397,55],[550,59,397,57],[551,12,398,12],[551,18,398,18],[551,22,398,22,"Error"],[551,27,398,27],[551,28,398,28],[551,86,398,86],[551,87,398,87],[552,10,399,8],[553,10,400,8],[553,17,400,15,"Sound"],[553,23,400,20],[553,24,400,20,"Sound"],[553,29,400,20],[553,30,400,21,"createAsync"],[553,41,400,32],[553,42,400,33],[554,12,400,35,"uri"],[554,15,400,38],[554,17,400,40],[554,21,400,44],[554,22,400,45,"_uri"],[555,10,400,50],[555,11,400,51],[555,13,400,53,"initialStatus"],[555,26,400,66],[555,28,400,68,"onPlaybackStatusUpdate"],[555,50,400,90],[555,52,400,92],[555,57,400,97],[555,58,400,98],[556,8,401,4],[556,9,401,5],[557,8,401,5],[557,17,396,10,"createNewLoadedSoundAsync"],[557,42,396,35,"createNewLoadedSoundAsync"],[557,43,396,35],[558,10,396,35],[558,17,396,35,"_createNewLoadedSoundAsync"],[558,43,396,35],[558,44,396,35,"apply"],[558,49,396,35],[558,56,396,35,"arguments"],[558,65,396,35],[559,8,396,35],[560,8,396,35],[560,15,396,10,"createNewLoadedSoundAsync"],[560,40,396,35],[561,6,396,35],[562,4,396,35],[563,2,396,35],[564,2,396,35,"_Recording"],[564,12,396,35],[564,15,70,13,"Recording"],[564,24,70,22],[565,2,70,13,"Recording"],[565,11,70,22],[565,12,168,11,"createAsync"],[565,23,168,22],[565,43,168,22,"_asyncToGenerator"],[565,60,168,22],[565,61,168,22,"default"],[565,68,168,22],[565,70,168,25],[565,83,168,151],[566,4,168,151],[566,8,168,32,"options"],[566,15,168,39],[566,18,168,39,"arguments"],[566,27,168,39],[566,28,168,39,"length"],[566,34,168,39],[566,42,168,39,"arguments"],[566,51,168,39],[566,59,168,39,"undefined"],[566,68,168,39],[566,71,168,39,"arguments"],[566,80,168,39],[566,86,168,42,"RecordingOptionsPresets"],[566,105,168,65],[566,106,168,65,"RecordingOptionsPresets"],[566,129,168,65],[566,130,168,66,"LOW_QUALITY"],[566,141,168,77],[567,4,168,77],[567,8,168,79,"onRecordingStatusUpdate"],[567,31,168,102],[567,34,168,102,"arguments"],[567,43,168,102],[567,44,168,102,"length"],[567,50,168,102],[567,58,168,102,"arguments"],[567,67,168,102],[567,75,168,102,"undefined"],[567,84,168,102],[567,87,168,102,"arguments"],[567,96,168,102],[567,102,168,105],[567,106,168,109],[568,4,168,109],[568,8,168,111,"progressUpdateIntervalMillis"],[568,36,168,139],[568,39,168,139,"arguments"],[568,48,168,139],[568,49,168,139,"length"],[568,55,168,139],[568,63,168,139,"arguments"],[568,72,168,139],[568,80,168,139,"undefined"],[568,89,168,139],[568,92,168,139,"arguments"],[568,101,168,139],[568,107,168,142],[568,111,168,146],[569,4,169,8],[569,8,169,14,"recording"],[569,17,169,23],[569,20,169,26],[569,24,169,30,"Recording"],[569,34,169,39],[569,35,169,40],[569,36,169,41],[570,4,170,8],[570,8,170,12,"progressUpdateIntervalMillis"],[570,36,170,40],[570,38,170,42],[571,6,171,12,"recording"],[571,15,171,21],[571,16,171,22,"_progressUpdateIntervalMillis"],[571,45,171,51],[571,48,171,54,"progressUpdateIntervalMillis"],[571,76,171,82],[572,4,172,8],[573,4,173,8,"recording"],[573,13,173,17],[573,14,173,18,"setOnRecordingStatusUpdate"],[573,40,173,44],[573,41,173,45,"onRecordingStatusUpdate"],[573,64,173,68],[573,65,173,69],[574,4,174,8],[574,10,174,14,"recording"],[574,19,174,23],[574,20,174,24,"prepareToRecordAsync"],[574,40,174,44],[574,41,174,45],[575,6,175,12],[575,9,175,15,"options"],[575,16,175,22],[576,6,176,12,"keepAudioActiveHint"],[576,25,176,31],[576,27,176,33],[577,4,177,8],[577,5,177,9],[577,6,177,10],[578,4,178,8],[578,8,178,12],[579,6,179,12],[579,10,179,18,"status"],[579,16,179,24],[579,25,179,33,"recording"],[579,34,179,42],[579,35,179,43,"startAsync"],[579,45,179,53],[579,46,179,54],[579,47,179,55],[580,6,180,12],[580,13,180,19],[581,8,180,21,"recording"],[581,17,180,30],[582,8,180,32,"status"],[583,6,180,39],[583,7,180,40],[584,4,181,8],[584,5,181,9],[584,6,182,8],[584,13,182,15,"err"],[584,16,182,18],[584,18,182,20],[585,6,183,12,"recording"],[585,15,183,21],[585,16,183,22,"stopAndUnloadAsync"],[585,34,183,40],[585,35,183,41],[585,36,183,42],[585,37,183,43,"catch"],[585,42,183,48],[585,43,183,50,"_e"],[585,45,183,52],[585,49,183,57],[586,8,184,16],[587,8,185,16],[588,8,186,16],[589,6,186,16],[589,7,187,13],[589,8,187,14],[590,6,188,12],[590,12,188,18,"err"],[590,15,188,21],[591,4,189,8],[592,2,190,4],[592,3,190,5],[593,0,190,5],[593,3]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync","Recording","_cleanupForUnloadedRecorder","_pollingLoop","_disablePolling","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","createAsync","recording.stopAndUnloadAsync._catch$argument_0","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnRecordingStatusUpdate","setProgressUpdateInterval","prepareToRecordAsync","getAvailableInputs","getCurrentInput","setInput","startAsync","pauseAsync","stopAndUnloadAsync","getURI","createNewLoadedSound","createNewLoadedSoundAsync"],"mappings":"AAA;OCc;CDE;OEO;CFE;OG4C;kCCW;KDW;mBEC;KFU;IGC;KHK;IIC;KJK;IKC;KLI;IMC;KNU;yBOqC;iDCe;aDI;KPG;qBSM;8DCG,0CD;KTU;IWU;KXS;IYM;KZG;Iaa;KbmC;IcK;KdE;IeK;KfE;IgBM;KhBE;IiBM;0DPC,sCO;KjBC;IkBU;0DRC,sCQ;KlBC;ImBY;KnB2B;IoBQ;KpBE;IqBI;KrBG;IsBa;KtBK;CHC"},"hasCjsExports":false},"type":"js/module"}]}