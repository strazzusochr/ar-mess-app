{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useMeasurementStore\", {\n    enumerable: true,\n    get: function () {\n      return useMeasurementStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  const STORAGE_KEY = '@measurements';\n  const useMeasurementStore = (0, _zustand.create)((set, get) => ({\n    measurements: [],\n    currentMode: 'distance',\n    currentPoints: [],\n    calibrationScale: null,\n    isCalibrated: false,\n    unit: 'metric',\n    currentMeasurement: null,\n    setMode: mode => set({\n      currentMode: mode,\n      currentPoints: []\n    }),\n    addPoint: point => {\n      const newPoint = {\n        ...point,\n        id: Date.now().toString()\n      };\n      set(state => ({\n        currentPoints: [...state.currentPoints, newPoint]\n      }));\n    },\n    removeLastPoint: () => {\n      set(state => ({\n        currentPoints: state.currentPoints.slice(0, -1)\n      }));\n    },\n    clearPoints: () => set({\n      currentPoints: []\n    }),\n    setCalibration: scale => {\n      console.log('Setting calibration scale:', scale);\n      set({\n        calibrationScale: scale,\n        isCalibrated: true\n      });\n    },\n    toggleUnit: () => set(state => ({\n      unit: state.unit === 'metric' ? 'imperial' : 'metric'\n    })),\n    calculateResult: () => {\n      const {\n        currentPoints,\n        calibrationScale,\n        currentMode\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return {};\n      const pixelsToMm = pixels => pixels / calibrationScale;\n      if (currentMode === 'distance') {\n        let totalDistance = 0;\n        for (let i = 0; i < currentPoints.length - 1; i++) {\n          const dx = currentPoints[i + 1].x - currentPoints[i].x;\n          const dy = currentPoints[i + 1].y - currentPoints[i].y;\n          const distancePixels = Math.sqrt(dx * dx + dy * dy);\n          totalDistance += pixelsToMm(distancePixels);\n        }\n        return {\n          distance: totalDistance\n        };\n      }\n      if ((currentMode === 'area' || currentMode === 'volume') && currentPoints.length >= 3) {\n        // Shoelace formula for polygon area\n        let area = 0;\n        let perimeter = 0;\n        const n = currentPoints.length;\n        for (let i = 0; i < n; i++) {\n          const j = (i + 1) % n;\n          const xi = pixelsToMm(currentPoints[i].x);\n          const yi = pixelsToMm(currentPoints[i].y);\n          const xj = pixelsToMm(currentPoints[j].x);\n          const yj = pixelsToMm(currentPoints[j].y);\n          area += xi * yj - xj * yi;\n          const dx = xj - xi;\n          const dy = yj - yi;\n          perimeter += Math.sqrt(dx * dx + dy * dy);\n        }\n        area = Math.abs(area) / 2;\n        return {\n          area,\n          perimeter\n        };\n      }\n      return {};\n    },\n    saveMeasurement: async (name, imageData) => {\n      const {\n        currentMode,\n        currentPoints,\n        calibrationScale,\n        unit\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return;\n      const result = get().calculateResult();\n      const measurement = {\n        id: Date.now().toString(),\n        name,\n        mode: currentMode,\n        points: currentPoints,\n        calibrationScale,\n        result,\n        unit,\n        timestamp: Date.now(),\n        imageData\n      };\n      const measurements = [...get().measurements, measurement];\n      set({\n        measurements,\n        currentPoints: []\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error saving measurement:', error);\n      }\n    },\n    loadMeasurements: async () => {\n      try {\n        const data = await AsyncStorage.default.getItem(STORAGE_KEY);\n        if (data) {\n          const measurements = JSON.parse(data);\n          set({\n            measurements\n          });\n        }\n      } catch (error) {\n        console.error('Error loading measurements:', error);\n      }\n    },\n    deleteMeasurement: async id => {\n      const measurements = get().measurements.filter(m => m.id !== id);\n      set({\n        measurements\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error deleting measurement:', error);\n      }\n    }\n  }));\n});","lineCount":161,"map":[[12,2,54,0,"Object"],[12,8,54,0],[12,9,54,0,"defineProperty"],[12,23,54,0],[12,24,54,0,"exports"],[12,31,54,0],[13,4,54,0,"enumerable"],[13,14,54,0],[14,4,54,0,"get"],[14,7,54,0],[14,18,54,0,"get"],[14,19,54,0],[15,6,54,0],[15,13,54,0,"useMeasurementStore"],[15,32,54,0],[16,4,54,0],[17,2,54,0],[18,2,1,0],[18,6,1,0,"_zustand"],[18,14,1,0],[18,17,1,0,"require"],[18,24,1,0],[18,25,1,0,"_dependencyMap"],[18,39,1,0],[19,2,2,0],[19,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[19,42,2,0],[19,45,2,0,"require"],[19,52,2,0],[19,53,2,0,"_dependencyMap"],[19,67,2,0],[20,2,2,0],[20,6,2,0,"AsyncStorage"],[20,18,2,0],[20,21,2,0,"_interopDefault"],[20,36,2,0],[20,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[20,73,2,0],[21,2,52,0],[21,8,52,6,"STORAGE_KEY"],[21,19,52,17],[21,22,52,20],[21,37,52,35],[22,2,54,7],[22,8,54,13,"useMeasurementStore"],[22,27,54,32],[22,30,54,35],[22,34,54,35,"create"],[22,42,54,41],[22,43,54,41,"create"],[22,49,54,41],[22,51,54,60],[22,52,54,61,"set"],[22,55,54,64],[22,57,54,66,"get"],[22,60,54,69],[22,66,54,75],[23,4,55,2,"measurements"],[23,16,55,14],[23,18,55,16],[23,20,55,18],[24,4,56,2,"currentMode"],[24,15,56,13],[24,17,56,15],[24,27,56,25],[25,4,57,2,"currentPoints"],[25,17,57,15],[25,19,57,17],[25,21,57,19],[26,4,58,2,"calibrationScale"],[26,20,58,18],[26,22,58,20],[26,26,58,24],[27,4,59,2,"isCalibrated"],[27,16,59,14],[27,18,59,16],[27,23,59,21],[28,4,60,2,"unit"],[28,8,60,6],[28,10,60,8],[28,18,60,16],[29,4,61,2,"currentMeasurement"],[29,22,61,20],[29,24,61,22],[29,28,61,26],[30,4,63,2,"setMode"],[30,11,63,9],[30,13,63,12,"mode"],[30,17,63,16],[30,21,63,21,"set"],[30,24,63,24],[30,25,63,25],[31,6,63,27,"currentMode"],[31,17,63,38],[31,19,63,40,"mode"],[31,23,63,44],[32,6,63,46,"currentPoints"],[32,19,63,59],[32,21,63,61],[33,4,63,64],[33,5,63,65],[33,6,63,66],[34,4,65,2,"addPoint"],[34,12,65,10],[34,14,65,13,"point"],[34,19,65,18],[34,23,65,23],[35,6,66,4],[35,12,66,10,"newPoint"],[35,20,66,18],[35,23,66,21],[36,8,66,23],[36,11,66,26,"point"],[36,16,66,31],[37,8,66,33,"id"],[37,10,66,35],[37,12,66,37,"Date"],[37,16,66,41],[37,17,66,42,"now"],[37,20,66,45],[37,21,66,46],[37,22,66,47],[37,23,66,48,"toString"],[37,31,66,56],[37,32,66,57],[38,6,66,59],[38,7,66,60],[39,6,67,4,"set"],[39,9,67,7],[39,10,67,9,"state"],[39,15,67,14],[39,20,67,20],[40,8,67,22,"currentPoints"],[40,21,67,35],[40,23,67,37],[40,24,67,38],[40,27,67,41,"state"],[40,32,67,46],[40,33,67,47,"currentPoints"],[40,46,67,60],[40,48,67,62,"newPoint"],[40,56,67,70],[41,6,67,72],[41,7,67,73],[41,8,67,74],[41,9,67,75],[42,4,68,2],[42,5,68,3],[43,4,70,2,"removeLastPoint"],[43,19,70,17],[43,21,70,19,"removeLastPoint"],[43,22,70,19],[43,27,70,25],[44,6,71,4,"set"],[44,9,71,7],[44,10,71,9,"state"],[44,15,71,14],[44,20,71,20],[45,8,72,6,"currentPoints"],[45,21,72,19],[45,23,72,21,"state"],[45,28,72,26],[45,29,72,27,"currentPoints"],[45,42,72,40],[45,43,72,41,"slice"],[45,48,72,46],[45,49,72,47],[45,50,72,48],[45,52,72,50],[45,53,72,51],[45,54,72,52],[46,6,73,4],[46,7,73,5],[46,8,73,6],[46,9,73,7],[47,4,74,2],[47,5,74,3],[48,4,76,2,"clearPoints"],[48,15,76,13],[48,17,76,15,"clearPoints"],[48,18,76,15],[48,23,76,21,"set"],[48,26,76,24],[48,27,76,25],[49,6,76,27,"currentPoints"],[49,19,76,40],[49,21,76,42],[50,4,76,45],[50,5,76,46],[50,6,76,47],[51,4,78,2,"setCalibration"],[51,18,78,16],[51,20,78,19,"scale"],[51,25,78,24],[51,29,78,29],[52,6,79,4,"console"],[52,13,79,11],[52,14,79,12,"log"],[52,17,79,15],[52,18,79,16],[52,46,79,44],[52,48,79,46,"scale"],[52,53,79,51],[52,54,79,52],[53,6,80,4,"set"],[53,9,80,7],[53,10,80,8],[54,8,80,10,"calibrationScale"],[54,24,80,26],[54,26,80,28,"scale"],[54,31,80,33],[55,8,80,35,"isCalibrated"],[55,20,80,47],[55,22,80,49],[56,6,80,54],[56,7,80,55],[56,8,80,56],[57,4,81,2],[57,5,81,3],[58,4,83,2,"toggleUnit"],[58,14,83,12],[58,16,83,14,"toggleUnit"],[58,17,83,14],[58,22,83,20,"set"],[58,25,83,23],[58,26,83,25,"state"],[58,31,83,30],[58,36,83,36],[59,6,83,38,"unit"],[59,10,83,42],[59,12,83,44,"state"],[59,17,83,49],[59,18,83,50,"unit"],[59,22,83,54],[59,27,83,59],[59,35,83,67],[59,38,83,70],[59,48,83,80],[59,51,83,83],[60,4,83,92],[60,5,83,93],[60,6,83,94],[60,7,83,95],[61,4,85,2,"calculateResult"],[61,19,85,17],[61,21,85,19,"calculateResult"],[61,22,85,19],[61,27,85,25],[62,6,86,4],[62,12,86,10],[63,8,86,12,"currentPoints"],[63,21,86,25],[64,8,86,27,"calibrationScale"],[64,24,86,43],[65,8,86,45,"currentMode"],[66,6,86,57],[66,7,86,58],[66,10,86,61,"get"],[66,13,86,64],[66,14,86,65],[66,15,86,66],[67,6,87,4],[67,10,87,8],[67,11,87,9,"calibrationScale"],[67,27,87,25],[67,31,87,29,"currentPoints"],[67,44,87,42],[67,45,87,43,"length"],[67,51,87,49],[67,54,87,52],[67,55,87,53],[67,57,87,55],[67,64,87,62],[67,65,87,63],[67,66,87,64],[68,6,89,4],[68,12,89,10,"pixelsToMm"],[68,22,89,20],[68,25,89,24,"pixels"],[68,31,89,38],[68,35,89,43,"pixels"],[68,41,89,49],[68,44,89,52,"calibrationScale"],[68,60,89,68],[69,6,91,4],[69,10,91,8,"currentMode"],[69,21,91,19],[69,26,91,24],[69,36,91,34],[69,38,91,36],[70,8,92,6],[70,12,92,10,"totalDistance"],[70,25,92,23],[70,28,92,26],[70,29,92,27],[71,8,93,6],[71,13,93,11],[71,17,93,15,"i"],[71,18,93,16],[71,21,93,19],[71,22,93,20],[71,24,93,22,"i"],[71,25,93,23],[71,28,93,26,"currentPoints"],[71,41,93,39],[71,42,93,40,"length"],[71,48,93,46],[71,51,93,49],[71,52,93,50],[71,54,93,52,"i"],[71,55,93,53],[71,57,93,55],[71,59,93,57],[72,10,94,8],[72,16,94,14,"dx"],[72,18,94,16],[72,21,94,19,"currentPoints"],[72,34,94,32],[72,35,94,33,"i"],[72,36,94,34],[72,39,94,37],[72,40,94,38],[72,41,94,39],[72,42,94,40,"x"],[72,43,94,41],[72,46,94,44,"currentPoints"],[72,59,94,57],[72,60,94,58,"i"],[72,61,94,59],[72,62,94,60],[72,63,94,61,"x"],[72,64,94,62],[73,10,95,8],[73,16,95,14,"dy"],[73,18,95,16],[73,21,95,19,"currentPoints"],[73,34,95,32],[73,35,95,33,"i"],[73,36,95,34],[73,39,95,37],[73,40,95,38],[73,41,95,39],[73,42,95,40,"y"],[73,43,95,41],[73,46,95,44,"currentPoints"],[73,59,95,57],[73,60,95,58,"i"],[73,61,95,59],[73,62,95,60],[73,63,95,61,"y"],[73,64,95,62],[74,10,96,8],[74,16,96,14,"distancePixels"],[74,30,96,28],[74,33,96,31,"Math"],[74,37,96,35],[74,38,96,36,"sqrt"],[74,42,96,40],[74,43,96,41,"dx"],[74,45,96,43],[74,48,96,46,"dx"],[74,50,96,48],[74,53,96,51,"dy"],[74,55,96,53],[74,58,96,56,"dy"],[74,60,96,58],[74,61,96,59],[75,10,97,8,"totalDistance"],[75,23,97,21],[75,27,97,25,"pixelsToMm"],[75,37,97,35],[75,38,97,36,"distancePixels"],[75,52,97,50],[75,53,97,51],[76,8,98,6],[77,8,99,6],[77,15,99,13],[78,10,99,15,"distance"],[78,18,99,23],[78,20,99,25,"totalDistance"],[79,8,99,39],[79,9,99,40],[80,6,100,4],[81,6,102,4],[81,10,102,8],[81,11,102,9,"currentMode"],[81,22,102,20],[81,27,102,25],[81,33,102,31],[81,37,102,35,"currentMode"],[81,48,102,46],[81,53,102,51],[81,61,102,59],[81,66,102,64,"currentPoints"],[81,79,102,77],[81,80,102,78,"length"],[81,86,102,84],[81,90,102,88],[81,91,102,89],[81,93,102,91],[82,8,103,6],[83,8,104,6],[83,12,104,10,"area"],[83,16,104,14],[83,19,104,17],[83,20,104,18],[84,8,105,6],[84,12,105,10,"perimeter"],[84,21,105,19],[84,24,105,22],[84,25,105,23],[85,8,106,6],[85,14,106,12,"n"],[85,15,106,13],[85,18,106,16,"currentPoints"],[85,31,106,29],[85,32,106,30,"length"],[85,38,106,36],[86,8,108,6],[86,13,108,11],[86,17,108,15,"i"],[86,18,108,16],[86,21,108,19],[86,22,108,20],[86,24,108,22,"i"],[86,25,108,23],[86,28,108,26,"n"],[86,29,108,27],[86,31,108,29,"i"],[86,32,108,30],[86,34,108,32],[86,36,108,34],[87,10,109,8],[87,16,109,14,"j"],[87,17,109,15],[87,20,109,18],[87,21,109,19,"i"],[87,22,109,20],[87,25,109,23],[87,26,109,24],[87,30,109,28,"n"],[87,31,109,29],[88,10,110,8],[88,16,110,14,"xi"],[88,18,110,16],[88,21,110,19,"pixelsToMm"],[88,31,110,29],[88,32,110,30,"currentPoints"],[88,45,110,43],[88,46,110,44,"i"],[88,47,110,45],[88,48,110,46],[88,49,110,47,"x"],[88,50,110,48],[88,51,110,49],[89,10,111,8],[89,16,111,14,"yi"],[89,18,111,16],[89,21,111,19,"pixelsToMm"],[89,31,111,29],[89,32,111,30,"currentPoints"],[89,45,111,43],[89,46,111,44,"i"],[89,47,111,45],[89,48,111,46],[89,49,111,47,"y"],[89,50,111,48],[89,51,111,49],[90,10,112,8],[90,16,112,14,"xj"],[90,18,112,16],[90,21,112,19,"pixelsToMm"],[90,31,112,29],[90,32,112,30,"currentPoints"],[90,45,112,43],[90,46,112,44,"j"],[90,47,112,45],[90,48,112,46],[90,49,112,47,"x"],[90,50,112,48],[90,51,112,49],[91,10,113,8],[91,16,113,14,"yj"],[91,18,113,16],[91,21,113,19,"pixelsToMm"],[91,31,113,29],[91,32,113,30,"currentPoints"],[91,45,113,43],[91,46,113,44,"j"],[91,47,113,45],[91,48,113,46],[91,49,113,47,"y"],[91,50,113,48],[91,51,113,49],[92,10,115,8,"area"],[92,14,115,12],[92,18,115,16,"xi"],[92,20,115,18],[92,23,115,21,"yj"],[92,25,115,23],[92,28,115,26,"xj"],[92,30,115,28],[92,33,115,31,"yi"],[92,35,115,33],[93,10,117,8],[93,16,117,14,"dx"],[93,18,117,16],[93,21,117,19,"xj"],[93,23,117,21],[93,26,117,24,"xi"],[93,28,117,26],[94,10,118,8],[94,16,118,14,"dy"],[94,18,118,16],[94,21,118,19,"yj"],[94,23,118,21],[94,26,118,24,"yi"],[94,28,118,26],[95,10,119,8,"perimeter"],[95,19,119,17],[95,23,119,21,"Math"],[95,27,119,25],[95,28,119,26,"sqrt"],[95,32,119,30],[95,33,119,31,"dx"],[95,35,119,33],[95,38,119,36,"dx"],[95,40,119,38],[95,43,119,41,"dy"],[95,45,119,43],[95,48,119,46,"dy"],[95,50,119,48],[95,51,119,49],[96,8,120,6],[97,8,122,6,"area"],[97,12,122,10],[97,15,122,13,"Math"],[97,19,122,17],[97,20,122,18,"abs"],[97,23,122,21],[97,24,122,22,"area"],[97,28,122,26],[97,29,122,27],[97,32,122,30],[97,33,122,31],[98,8,123,6],[98,15,123,13],[99,10,123,15,"area"],[99,14,123,19],[100,10,123,21,"perimeter"],[101,8,123,31],[101,9,123,32],[102,6,124,4],[103,6,126,4],[103,13,126,11],[103,14,126,12],[103,15,126,13],[104,4,127,2],[104,5,127,3],[105,4,129,2,"saveMeasurement"],[105,19,129,17],[105,21,129,19],[105,27,129,19,"saveMeasurement"],[105,28,129,26,"name"],[105,32,129,30],[105,34,129,32,"imageData"],[105,43,129,41],[105,48,129,46],[106,6,130,4],[106,12,130,10],[107,8,130,12,"currentMode"],[107,19,130,23],[108,8,130,25,"currentPoints"],[108,21,130,38],[109,8,130,40,"calibrationScale"],[109,24,130,56],[110,8,130,58,"unit"],[111,6,130,63],[111,7,130,64],[111,10,130,67,"get"],[111,13,130,70],[111,14,130,71],[111,15,130,72],[112,6,131,4],[112,10,131,8],[112,11,131,9,"calibrationScale"],[112,27,131,25],[112,31,131,29,"currentPoints"],[112,44,131,42],[112,45,131,43,"length"],[112,51,131,49],[112,54,131,52],[112,55,131,53],[112,57,131,55],[113,6,133,4],[113,12,133,10,"result"],[113,18,133,16],[113,21,133,19,"get"],[113,24,133,22],[113,25,133,23],[113,26,133,24],[113,27,133,25,"calculateResult"],[113,42,133,40],[113,43,133,41],[113,44,133,42],[114,6,134,4],[114,12,134,10,"measurement"],[114,23,134,34],[114,26,134,37],[115,8,135,6,"id"],[115,10,135,8],[115,12,135,10,"Date"],[115,16,135,14],[115,17,135,15,"now"],[115,20,135,18],[115,21,135,19],[115,22,135,20],[115,23,135,21,"toString"],[115,31,135,29],[115,32,135,30],[115,33,135,31],[116,8,136,6,"name"],[116,12,136,10],[117,8,137,6,"mode"],[117,12,137,10],[117,14,137,12,"currentMode"],[117,25,137,23],[118,8,138,6,"points"],[118,14,138,12],[118,16,138,14,"currentPoints"],[118,29,138,27],[119,8,139,6,"calibrationScale"],[119,24,139,22],[120,8,140,6,"result"],[120,14,140,12],[121,8,141,6,"unit"],[121,12,141,10],[122,8,142,6,"timestamp"],[122,17,142,15],[122,19,142,17,"Date"],[122,23,142,21],[122,24,142,22,"now"],[122,27,142,25],[122,28,142,26],[122,29,142,27],[123,8,143,6,"imageData"],[124,6,144,4],[124,7,144,5],[125,6,146,4],[125,12,146,10,"measurements"],[125,24,146,22],[125,27,146,25],[125,28,146,26],[125,31,146,29,"get"],[125,34,146,32],[125,35,146,33],[125,36,146,34],[125,37,146,35,"measurements"],[125,49,146,47],[125,51,146,49,"measurement"],[125,62,146,60],[125,63,146,61],[126,6,147,4,"set"],[126,9,147,7],[126,10,147,8],[127,8,147,10,"measurements"],[127,20,147,22],[128,8,147,24,"currentPoints"],[128,21,147,37],[128,23,147,39],[129,6,147,42],[129,7,147,43],[129,8,147,44],[130,6,149,4],[130,10,149,8],[131,8,150,6],[131,14,150,12,"AsyncStorage"],[131,26,150,24],[131,27,150,24,"default"],[131,34,150,24],[131,35,150,25,"setItem"],[131,42,150,32],[131,43,150,33,"STORAGE_KEY"],[131,54,150,44],[131,56,150,46,"JSON"],[131,60,150,50],[131,61,150,51,"stringify"],[131,70,150,60],[131,71,150,61,"measurements"],[131,83,150,73],[131,84,150,74],[131,85,150,75],[132,6,151,4],[132,7,151,5],[132,8,151,6],[132,15,151,13,"error"],[132,20,151,18],[132,22,151,20],[133,8,152,6,"console"],[133,15,152,13],[133,16,152,14,"error"],[133,21,152,19],[133,22,152,20],[133,49,152,47],[133,51,152,49,"error"],[133,56,152,54],[133,57,152,55],[134,6,153,4],[135,4,154,2],[135,5,154,3],[136,4,156,2,"loadMeasurements"],[136,20,156,18],[136,22,156,20],[136,28,156,20,"loadMeasurements"],[136,29,156,20],[136,34,156,32],[137,6,157,4],[137,10,157,8],[138,8,158,6],[138,14,158,12,"data"],[138,18,158,16],[138,21,158,19],[138,27,158,25,"AsyncStorage"],[138,39,158,37],[138,40,158,37,"default"],[138,47,158,37],[138,48,158,38,"getItem"],[138,55,158,45],[138,56,158,46,"STORAGE_KEY"],[138,67,158,57],[138,68,158,58],[139,8,159,6],[139,12,159,10,"data"],[139,16,159,14],[139,18,159,16],[140,10,160,8],[140,16,160,14,"measurements"],[140,28,160,26],[140,31,160,29,"JSON"],[140,35,160,33],[140,36,160,34,"parse"],[140,41,160,39],[140,42,160,40,"data"],[140,46,160,44],[140,47,160,45],[141,10,161,8,"set"],[141,13,161,11],[141,14,161,12],[142,12,161,14,"measurements"],[143,10,161,27],[143,11,161,28],[143,12,161,29],[144,8,162,6],[145,6,163,4],[145,7,163,5],[145,8,163,6],[145,15,163,13,"error"],[145,20,163,18],[145,22,163,20],[146,8,164,6,"console"],[146,15,164,13],[146,16,164,14,"error"],[146,21,164,19],[146,22,164,20],[146,51,164,49],[146,53,164,51,"error"],[146,58,164,56],[146,59,164,57],[147,6,165,4],[148,4,166,2],[148,5,166,3],[149,4,168,2,"deleteMeasurement"],[149,21,168,19],[149,23,168,21],[149,29,168,28,"id"],[149,31,168,30],[149,35,168,35],[150,6,169,4],[150,12,169,10,"measurements"],[150,24,169,22],[150,27,169,25,"get"],[150,30,169,28],[150,31,169,29],[150,32,169,30],[150,33,169,31,"measurements"],[150,45,169,43],[150,46,169,44,"filter"],[150,52,169,50],[150,53,169,52,"m"],[150,54,169,53],[150,58,169,58,"m"],[150,59,169,59],[150,60,169,60,"id"],[150,62,169,62],[150,67,169,67,"id"],[150,69,169,69],[150,70,169,70],[151,6,170,4,"set"],[151,9,170,7],[151,10,170,8],[152,8,170,10,"measurements"],[153,6,170,23],[153,7,170,24],[153,8,170,25],[154,6,171,4],[154,10,171,8],[155,8,172,6],[155,14,172,12,"AsyncStorage"],[155,26,172,24],[155,27,172,24,"default"],[155,34,172,24],[155,35,172,25,"setItem"],[155,42,172,32],[155,43,172,33,"STORAGE_KEY"],[155,54,172,44],[155,56,172,46,"JSON"],[155,60,172,50],[155,61,172,51,"stringify"],[155,70,172,60],[155,71,172,61,"measurements"],[155,83,172,73],[155,84,172,74],[155,85,172,75],[156,6,173,4],[156,7,173,5],[156,8,173,6],[156,15,173,13,"error"],[156,20,173,18],[156,22,173,20],[157,8,174,6,"console"],[157,15,174,13],[157,16,174,14,"error"],[157,21,174,19],[157,22,174,20],[157,51,174,49],[157,53,174,51,"error"],[157,58,174,56],[157,59,174,57],[158,6,175,4],[159,4,176,2],[160,2,177,0],[160,3,177,1],[160,4,177,2],[160,5,177,3],[161,0,177,4],[161,3]],"functionMap":{"names":["<global>","create$argument_0","setMode","addPoint","set$argument_0","removeLastPoint","clearPoints","setCalibration","toggleUnit","calculateResult","pixelsToMm","saveMeasurement","loadMeasurements","deleteMeasurement","get.measurements.filter$argument_0"],"mappings":"AAA;4DCqD;WCS,uDD;YEE;QCE,kED;GFC;mBIE;QDC;MCE;GJC;eKE,gCL;kBME;GNG;cOE,UJ,sEI,CP;mBQE;uBCI,6CD;GRsC;mBUE;GVyB;oBWE;GXU;qBYE;mDCC,kBD;GZO;EDC"},"hasCjsExports":false},"type":"js/module"}]}