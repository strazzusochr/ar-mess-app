{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useMeasurementStore\", {\n    enumerable: true,\n    get: function () {\n      return useMeasurementStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  const STORAGE_KEY = '@measurements';\n  const useMeasurementStore = (0, _zustand.create)((set, get) => ({\n    measurements: [],\n    currentMode: 'distance',\n    currentPoints: [],\n    calibrationScale: null,\n    isCalibrated: false,\n    unit: 'metric',\n    currentMeasurement: null,\n    setMode: mode => set({\n      currentMode: mode,\n      currentPoints: []\n    }),\n    addPoint: point => {\n      const newPoint = {\n        ...point,\n        id: Date.now().toString()\n      };\n      set(state => ({\n        currentPoints: [...state.currentPoints, newPoint]\n      }));\n    },\n    removeLastPoint: () => {\n      set(state => ({\n        currentPoints: state.currentPoints.slice(0, -1)\n      }));\n    },\n    clearPoints: () => set({\n      currentPoints: []\n    }),\n    setCalibration: scale => set({\n      calibrationScale: scale,\n      isCalibrated: true\n    }),\n    toggleUnit: () => set(state => ({\n      unit: state.unit === 'metric' ? 'imperial' : 'metric'\n    })),\n    calculateResult: () => {\n      const {\n        currentPoints,\n        calibrationScale,\n        currentMode\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return {};\n      const pixelsToMm = pixels => pixels / calibrationScale;\n      if (currentMode === 'distance') {\n        let totalDistance = 0;\n        for (let i = 0; i < currentPoints.length - 1; i++) {\n          const dx = currentPoints[i + 1].x - currentPoints[i].x;\n          const dy = currentPoints[i + 1].y - currentPoints[i].y;\n          const distancePixels = Math.sqrt(dx * dx + dy * dy);\n          totalDistance += pixelsToMm(distancePixels);\n        }\n        return {\n          distance: totalDistance\n        };\n      }\n      if ((currentMode === 'area' || currentMode === 'volume') && currentPoints.length >= 3) {\n        // Shoelace formula for polygon area\n        let area = 0;\n        let perimeter = 0;\n        const n = currentPoints.length;\n        for (let i = 0; i < n; i++) {\n          const j = (i + 1) % n;\n          const xi = pixelsToMm(currentPoints[i].x);\n          const yi = pixelsToMm(currentPoints[i].y);\n          const xj = pixelsToMm(currentPoints[j].x);\n          const yj = pixelsToMm(currentPoints[j].y);\n          area += xi * yj - xj * yi;\n          const dx = xj - xi;\n          const dy = yj - yi;\n          perimeter += Math.sqrt(dx * dx + dy * dy);\n        }\n        area = Math.abs(area) / 2;\n        return {\n          area,\n          perimeter\n        };\n      }\n      return {};\n    },\n    saveMeasurement: async (name, imageData) => {\n      const {\n        currentMode,\n        currentPoints,\n        calibrationScale,\n        unit\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return;\n      const result = get().calculateResult();\n      const measurement = {\n        id: Date.now().toString(),\n        name,\n        mode: currentMode,\n        points: currentPoints,\n        calibrationScale,\n        result,\n        unit,\n        timestamp: Date.now(),\n        imageData\n      };\n      const measurements = [...get().measurements, measurement];\n      set({\n        measurements,\n        currentPoints: []\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error saving measurement:', error);\n      }\n    },\n    loadMeasurements: async () => {\n      try {\n        const data = await AsyncStorage.default.getItem(STORAGE_KEY);\n        if (data) {\n          const measurements = JSON.parse(data);\n          set({\n            measurements\n          });\n        }\n      } catch (error) {\n        console.error('Error loading measurements:', error);\n      }\n    },\n    deleteMeasurement: async id => {\n      const measurements = get().measurements.filter(m => m.id !== id);\n      set({\n        measurements\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error deleting measurement:', error);\n      }\n    }\n  }));\n});","lineCount":158,"map":[[12,2,54,0,"Object"],[12,8,54,0],[12,9,54,0,"defineProperty"],[12,23,54,0],[12,24,54,0,"exports"],[12,31,54,0],[13,4,54,0,"enumerable"],[13,14,54,0],[14,4,54,0,"get"],[14,7,54,0],[14,18,54,0,"get"],[14,19,54,0],[15,6,54,0],[15,13,54,0,"useMeasurementStore"],[15,32,54,0],[16,4,54,0],[17,2,54,0],[18,2,1,0],[18,6,1,0,"_zustand"],[18,14,1,0],[18,17,1,0,"require"],[18,24,1,0],[18,25,1,0,"_dependencyMap"],[18,39,1,0],[19,2,2,0],[19,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[19,42,2,0],[19,45,2,0,"require"],[19,52,2,0],[19,53,2,0,"_dependencyMap"],[19,67,2,0],[20,2,2,0],[20,6,2,0,"AsyncStorage"],[20,18,2,0],[20,21,2,0,"_interopDefault"],[20,36,2,0],[20,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[20,73,2,0],[21,2,52,0],[21,8,52,6,"STORAGE_KEY"],[21,19,52,17],[21,22,52,20],[21,37,52,35],[22,2,54,7],[22,8,54,13,"useMeasurementStore"],[22,27,54,32],[22,30,54,35],[22,34,54,35,"create"],[22,42,54,41],[22,43,54,41,"create"],[22,49,54,41],[22,51,54,60],[22,52,54,61,"set"],[22,55,54,64],[22,57,54,66,"get"],[22,60,54,69],[22,66,54,75],[23,4,55,2,"measurements"],[23,16,55,14],[23,18,55,16],[23,20,55,18],[24,4,56,2,"currentMode"],[24,15,56,13],[24,17,56,15],[24,27,56,25],[25,4,57,2,"currentPoints"],[25,17,57,15],[25,19,57,17],[25,21,57,19],[26,4,58,2,"calibrationScale"],[26,20,58,18],[26,22,58,20],[26,26,58,24],[27,4,59,2,"isCalibrated"],[27,16,59,14],[27,18,59,16],[27,23,59,21],[28,4,60,2,"unit"],[28,8,60,6],[28,10,60,8],[28,18,60,16],[29,4,61,2,"currentMeasurement"],[29,22,61,20],[29,24,61,22],[29,28,61,26],[30,4,63,2,"setMode"],[30,11,63,9],[30,13,63,12,"mode"],[30,17,63,16],[30,21,63,21,"set"],[30,24,63,24],[30,25,63,25],[31,6,63,27,"currentMode"],[31,17,63,38],[31,19,63,40,"mode"],[31,23,63,44],[32,6,63,46,"currentPoints"],[32,19,63,59],[32,21,63,61],[33,4,63,64],[33,5,63,65],[33,6,63,66],[34,4,65,2,"addPoint"],[34,12,65,10],[34,14,65,13,"point"],[34,19,65,18],[34,23,65,23],[35,6,66,4],[35,12,66,10,"newPoint"],[35,20,66,18],[35,23,66,21],[36,8,66,23],[36,11,66,26,"point"],[36,16,66,31],[37,8,66,33,"id"],[37,10,66,35],[37,12,66,37,"Date"],[37,16,66,41],[37,17,66,42,"now"],[37,20,66,45],[37,21,66,46],[37,22,66,47],[37,23,66,48,"toString"],[37,31,66,56],[37,32,66,57],[38,6,66,59],[38,7,66,60],[39,6,67,4,"set"],[39,9,67,7],[39,10,67,9,"state"],[39,15,67,14],[39,20,67,20],[40,8,67,22,"currentPoints"],[40,21,67,35],[40,23,67,37],[40,24,67,38],[40,27,67,41,"state"],[40,32,67,46],[40,33,67,47,"currentPoints"],[40,46,67,60],[40,48,67,62,"newPoint"],[40,56,67,70],[41,6,67,72],[41,7,67,73],[41,8,67,74],[41,9,67,75],[42,4,68,2],[42,5,68,3],[43,4,70,2,"removeLastPoint"],[43,19,70,17],[43,21,70,19,"removeLastPoint"],[43,22,70,19],[43,27,70,25],[44,6,71,4,"set"],[44,9,71,7],[44,10,71,9,"state"],[44,15,71,14],[44,20,71,20],[45,8,72,6,"currentPoints"],[45,21,72,19],[45,23,72,21,"state"],[45,28,72,26],[45,29,72,27,"currentPoints"],[45,42,72,40],[45,43,72,41,"slice"],[45,48,72,46],[45,49,72,47],[45,50,72,48],[45,52,72,50],[45,53,72,51],[45,54,72,52],[46,6,73,4],[46,7,73,5],[46,8,73,6],[46,9,73,7],[47,4,74,2],[47,5,74,3],[48,4,76,2,"clearPoints"],[48,15,76,13],[48,17,76,15,"clearPoints"],[48,18,76,15],[48,23,76,21,"set"],[48,26,76,24],[48,27,76,25],[49,6,76,27,"currentPoints"],[49,19,76,40],[49,21,76,42],[50,4,76,45],[50,5,76,46],[50,6,76,47],[51,4,78,2,"setCalibration"],[51,18,78,16],[51,20,78,19,"scale"],[51,25,78,24],[51,29,78,29,"set"],[51,32,78,32],[51,33,78,33],[52,6,78,35,"calibrationScale"],[52,22,78,51],[52,24,78,53,"scale"],[52,29,78,58],[53,6,78,60,"isCalibrated"],[53,18,78,72],[53,20,78,74],[54,4,78,79],[54,5,78,80],[54,6,78,81],[55,4,80,2,"toggleUnit"],[55,14,80,12],[55,16,80,14,"toggleUnit"],[55,17,80,14],[55,22,80,20,"set"],[55,25,80,23],[55,26,80,25,"state"],[55,31,80,30],[55,36,80,36],[56,6,80,38,"unit"],[56,10,80,42],[56,12,80,44,"state"],[56,17,80,49],[56,18,80,50,"unit"],[56,22,80,54],[56,27,80,59],[56,35,80,67],[56,38,80,70],[56,48,80,80],[56,51,80,83],[57,4,80,92],[57,5,80,93],[57,6,80,94],[57,7,80,95],[58,4,82,2,"calculateResult"],[58,19,82,17],[58,21,82,19,"calculateResult"],[58,22,82,19],[58,27,82,25],[59,6,83,4],[59,12,83,10],[60,8,83,12,"currentPoints"],[60,21,83,25],[61,8,83,27,"calibrationScale"],[61,24,83,43],[62,8,83,45,"currentMode"],[63,6,83,57],[63,7,83,58],[63,10,83,61,"get"],[63,13,83,64],[63,14,83,65],[63,15,83,66],[64,6,84,4],[64,10,84,8],[64,11,84,9,"calibrationScale"],[64,27,84,25],[64,31,84,29,"currentPoints"],[64,44,84,42],[64,45,84,43,"length"],[64,51,84,49],[64,54,84,52],[64,55,84,53],[64,57,84,55],[64,64,84,62],[64,65,84,63],[64,66,84,64],[65,6,86,4],[65,12,86,10,"pixelsToMm"],[65,22,86,20],[65,25,86,24,"pixels"],[65,31,86,38],[65,35,86,43,"pixels"],[65,41,86,49],[65,44,86,52,"calibrationScale"],[65,60,86,68],[66,6,88,4],[66,10,88,8,"currentMode"],[66,21,88,19],[66,26,88,24],[66,36,88,34],[66,38,88,36],[67,8,89,6],[67,12,89,10,"totalDistance"],[67,25,89,23],[67,28,89,26],[67,29,89,27],[68,8,90,6],[68,13,90,11],[68,17,90,15,"i"],[68,18,90,16],[68,21,90,19],[68,22,90,20],[68,24,90,22,"i"],[68,25,90,23],[68,28,90,26,"currentPoints"],[68,41,90,39],[68,42,90,40,"length"],[68,48,90,46],[68,51,90,49],[68,52,90,50],[68,54,90,52,"i"],[68,55,90,53],[68,57,90,55],[68,59,90,57],[69,10,91,8],[69,16,91,14,"dx"],[69,18,91,16],[69,21,91,19,"currentPoints"],[69,34,91,32],[69,35,91,33,"i"],[69,36,91,34],[69,39,91,37],[69,40,91,38],[69,41,91,39],[69,42,91,40,"x"],[69,43,91,41],[69,46,91,44,"currentPoints"],[69,59,91,57],[69,60,91,58,"i"],[69,61,91,59],[69,62,91,60],[69,63,91,61,"x"],[69,64,91,62],[70,10,92,8],[70,16,92,14,"dy"],[70,18,92,16],[70,21,92,19,"currentPoints"],[70,34,92,32],[70,35,92,33,"i"],[70,36,92,34],[70,39,92,37],[70,40,92,38],[70,41,92,39],[70,42,92,40,"y"],[70,43,92,41],[70,46,92,44,"currentPoints"],[70,59,92,57],[70,60,92,58,"i"],[70,61,92,59],[70,62,92,60],[70,63,92,61,"y"],[70,64,92,62],[71,10,93,8],[71,16,93,14,"distancePixels"],[71,30,93,28],[71,33,93,31,"Math"],[71,37,93,35],[71,38,93,36,"sqrt"],[71,42,93,40],[71,43,93,41,"dx"],[71,45,93,43],[71,48,93,46,"dx"],[71,50,93,48],[71,53,93,51,"dy"],[71,55,93,53],[71,58,93,56,"dy"],[71,60,93,58],[71,61,93,59],[72,10,94,8,"totalDistance"],[72,23,94,21],[72,27,94,25,"pixelsToMm"],[72,37,94,35],[72,38,94,36,"distancePixels"],[72,52,94,50],[72,53,94,51],[73,8,95,6],[74,8,96,6],[74,15,96,13],[75,10,96,15,"distance"],[75,18,96,23],[75,20,96,25,"totalDistance"],[76,8,96,39],[76,9,96,40],[77,6,97,4],[78,6,99,4],[78,10,99,8],[78,11,99,9,"currentMode"],[78,22,99,20],[78,27,99,25],[78,33,99,31],[78,37,99,35,"currentMode"],[78,48,99,46],[78,53,99,51],[78,61,99,59],[78,66,99,64,"currentPoints"],[78,79,99,77],[78,80,99,78,"length"],[78,86,99,84],[78,90,99,88],[78,91,99,89],[78,93,99,91],[79,8,100,6],[80,8,101,6],[80,12,101,10,"area"],[80,16,101,14],[80,19,101,17],[80,20,101,18],[81,8,102,6],[81,12,102,10,"perimeter"],[81,21,102,19],[81,24,102,22],[81,25,102,23],[82,8,103,6],[82,14,103,12,"n"],[82,15,103,13],[82,18,103,16,"currentPoints"],[82,31,103,29],[82,32,103,30,"length"],[82,38,103,36],[83,8,105,6],[83,13,105,11],[83,17,105,15,"i"],[83,18,105,16],[83,21,105,19],[83,22,105,20],[83,24,105,22,"i"],[83,25,105,23],[83,28,105,26,"n"],[83,29,105,27],[83,31,105,29,"i"],[83,32,105,30],[83,34,105,32],[83,36,105,34],[84,10,106,8],[84,16,106,14,"j"],[84,17,106,15],[84,20,106,18],[84,21,106,19,"i"],[84,22,106,20],[84,25,106,23],[84,26,106,24],[84,30,106,28,"n"],[84,31,106,29],[85,10,107,8],[85,16,107,14,"xi"],[85,18,107,16],[85,21,107,19,"pixelsToMm"],[85,31,107,29],[85,32,107,30,"currentPoints"],[85,45,107,43],[85,46,107,44,"i"],[85,47,107,45],[85,48,107,46],[85,49,107,47,"x"],[85,50,107,48],[85,51,107,49],[86,10,108,8],[86,16,108,14,"yi"],[86,18,108,16],[86,21,108,19,"pixelsToMm"],[86,31,108,29],[86,32,108,30,"currentPoints"],[86,45,108,43],[86,46,108,44,"i"],[86,47,108,45],[86,48,108,46],[86,49,108,47,"y"],[86,50,108,48],[86,51,108,49],[87,10,109,8],[87,16,109,14,"xj"],[87,18,109,16],[87,21,109,19,"pixelsToMm"],[87,31,109,29],[87,32,109,30,"currentPoints"],[87,45,109,43],[87,46,109,44,"j"],[87,47,109,45],[87,48,109,46],[87,49,109,47,"x"],[87,50,109,48],[87,51,109,49],[88,10,110,8],[88,16,110,14,"yj"],[88,18,110,16],[88,21,110,19,"pixelsToMm"],[88,31,110,29],[88,32,110,30,"currentPoints"],[88,45,110,43],[88,46,110,44,"j"],[88,47,110,45],[88,48,110,46],[88,49,110,47,"y"],[88,50,110,48],[88,51,110,49],[89,10,112,8,"area"],[89,14,112,12],[89,18,112,16,"xi"],[89,20,112,18],[89,23,112,21,"yj"],[89,25,112,23],[89,28,112,26,"xj"],[89,30,112,28],[89,33,112,31,"yi"],[89,35,112,33],[90,10,114,8],[90,16,114,14,"dx"],[90,18,114,16],[90,21,114,19,"xj"],[90,23,114,21],[90,26,114,24,"xi"],[90,28,114,26],[91,10,115,8],[91,16,115,14,"dy"],[91,18,115,16],[91,21,115,19,"yj"],[91,23,115,21],[91,26,115,24,"yi"],[91,28,115,26],[92,10,116,8,"perimeter"],[92,19,116,17],[92,23,116,21,"Math"],[92,27,116,25],[92,28,116,26,"sqrt"],[92,32,116,30],[92,33,116,31,"dx"],[92,35,116,33],[92,38,116,36,"dx"],[92,40,116,38],[92,43,116,41,"dy"],[92,45,116,43],[92,48,116,46,"dy"],[92,50,116,48],[92,51,116,49],[93,8,117,6],[94,8,119,6,"area"],[94,12,119,10],[94,15,119,13,"Math"],[94,19,119,17],[94,20,119,18,"abs"],[94,23,119,21],[94,24,119,22,"area"],[94,28,119,26],[94,29,119,27],[94,32,119,30],[94,33,119,31],[95,8,120,6],[95,15,120,13],[96,10,120,15,"area"],[96,14,120,19],[97,10,120,21,"perimeter"],[98,8,120,31],[98,9,120,32],[99,6,121,4],[100,6,123,4],[100,13,123,11],[100,14,123,12],[100,15,123,13],[101,4,124,2],[101,5,124,3],[102,4,126,2,"saveMeasurement"],[102,19,126,17],[102,21,126,19],[102,27,126,19,"saveMeasurement"],[102,28,126,26,"name"],[102,32,126,30],[102,34,126,32,"imageData"],[102,43,126,41],[102,48,126,46],[103,6,127,4],[103,12,127,10],[104,8,127,12,"currentMode"],[104,19,127,23],[105,8,127,25,"currentPoints"],[105,21,127,38],[106,8,127,40,"calibrationScale"],[106,24,127,56],[107,8,127,58,"unit"],[108,6,127,63],[108,7,127,64],[108,10,127,67,"get"],[108,13,127,70],[108,14,127,71],[108,15,127,72],[109,6,128,4],[109,10,128,8],[109,11,128,9,"calibrationScale"],[109,27,128,25],[109,31,128,29,"currentPoints"],[109,44,128,42],[109,45,128,43,"length"],[109,51,128,49],[109,54,128,52],[109,55,128,53],[109,57,128,55],[110,6,130,4],[110,12,130,10,"result"],[110,18,130,16],[110,21,130,19,"get"],[110,24,130,22],[110,25,130,23],[110,26,130,24],[110,27,130,25,"calculateResult"],[110,42,130,40],[110,43,130,41],[110,44,130,42],[111,6,131,4],[111,12,131,10,"measurement"],[111,23,131,34],[111,26,131,37],[112,8,132,6,"id"],[112,10,132,8],[112,12,132,10,"Date"],[112,16,132,14],[112,17,132,15,"now"],[112,20,132,18],[112,21,132,19],[112,22,132,20],[112,23,132,21,"toString"],[112,31,132,29],[112,32,132,30],[112,33,132,31],[113,8,133,6,"name"],[113,12,133,10],[114,8,134,6,"mode"],[114,12,134,10],[114,14,134,12,"currentMode"],[114,25,134,23],[115,8,135,6,"points"],[115,14,135,12],[115,16,135,14,"currentPoints"],[115,29,135,27],[116,8,136,6,"calibrationScale"],[116,24,136,22],[117,8,137,6,"result"],[117,14,137,12],[118,8,138,6,"unit"],[118,12,138,10],[119,8,139,6,"timestamp"],[119,17,139,15],[119,19,139,17,"Date"],[119,23,139,21],[119,24,139,22,"now"],[119,27,139,25],[119,28,139,26],[119,29,139,27],[120,8,140,6,"imageData"],[121,6,141,4],[121,7,141,5],[122,6,143,4],[122,12,143,10,"measurements"],[122,24,143,22],[122,27,143,25],[122,28,143,26],[122,31,143,29,"get"],[122,34,143,32],[122,35,143,33],[122,36,143,34],[122,37,143,35,"measurements"],[122,49,143,47],[122,51,143,49,"measurement"],[122,62,143,60],[122,63,143,61],[123,6,144,4,"set"],[123,9,144,7],[123,10,144,8],[124,8,144,10,"measurements"],[124,20,144,22],[125,8,144,24,"currentPoints"],[125,21,144,37],[125,23,144,39],[126,6,144,42],[126,7,144,43],[126,8,144,44],[127,6,146,4],[127,10,146,8],[128,8,147,6],[128,14,147,12,"AsyncStorage"],[128,26,147,24],[128,27,147,24,"default"],[128,34,147,24],[128,35,147,25,"setItem"],[128,42,147,32],[128,43,147,33,"STORAGE_KEY"],[128,54,147,44],[128,56,147,46,"JSON"],[128,60,147,50],[128,61,147,51,"stringify"],[128,70,147,60],[128,71,147,61,"measurements"],[128,83,147,73],[128,84,147,74],[128,85,147,75],[129,6,148,4],[129,7,148,5],[129,8,148,6],[129,15,148,13,"error"],[129,20,148,18],[129,22,148,20],[130,8,149,6,"console"],[130,15,149,13],[130,16,149,14,"error"],[130,21,149,19],[130,22,149,20],[130,49,149,47],[130,51,149,49,"error"],[130,56,149,54],[130,57,149,55],[131,6,150,4],[132,4,151,2],[132,5,151,3],[133,4,153,2,"loadMeasurements"],[133,20,153,18],[133,22,153,20],[133,28,153,20,"loadMeasurements"],[133,29,153,20],[133,34,153,32],[134,6,154,4],[134,10,154,8],[135,8,155,6],[135,14,155,12,"data"],[135,18,155,16],[135,21,155,19],[135,27,155,25,"AsyncStorage"],[135,39,155,37],[135,40,155,37,"default"],[135,47,155,37],[135,48,155,38,"getItem"],[135,55,155,45],[135,56,155,46,"STORAGE_KEY"],[135,67,155,57],[135,68,155,58],[136,8,156,6],[136,12,156,10,"data"],[136,16,156,14],[136,18,156,16],[137,10,157,8],[137,16,157,14,"measurements"],[137,28,157,26],[137,31,157,29,"JSON"],[137,35,157,33],[137,36,157,34,"parse"],[137,41,157,39],[137,42,157,40,"data"],[137,46,157,44],[137,47,157,45],[138,10,158,8,"set"],[138,13,158,11],[138,14,158,12],[139,12,158,14,"measurements"],[140,10,158,27],[140,11,158,28],[140,12,158,29],[141,8,159,6],[142,6,160,4],[142,7,160,5],[142,8,160,6],[142,15,160,13,"error"],[142,20,160,18],[142,22,160,20],[143,8,161,6,"console"],[143,15,161,13],[143,16,161,14,"error"],[143,21,161,19],[143,22,161,20],[143,51,161,49],[143,53,161,51,"error"],[143,58,161,56],[143,59,161,57],[144,6,162,4],[145,4,163,2],[145,5,163,3],[146,4,165,2,"deleteMeasurement"],[146,21,165,19],[146,23,165,21],[146,29,165,28,"id"],[146,31,165,30],[146,35,165,35],[147,6,166,4],[147,12,166,10,"measurements"],[147,24,166,22],[147,27,166,25,"get"],[147,30,166,28],[147,31,166,29],[147,32,166,30],[147,33,166,31,"measurements"],[147,45,166,43],[147,46,166,44,"filter"],[147,52,166,50],[147,53,166,52,"m"],[147,54,166,53],[147,58,166,58,"m"],[147,59,166,59],[147,60,166,60,"id"],[147,62,166,62],[147,67,166,67,"id"],[147,69,166,69],[147,70,166,70],[148,6,167,4,"set"],[148,9,167,7],[148,10,167,8],[149,8,167,10,"measurements"],[150,6,167,23],[150,7,167,24],[150,8,167,25],[151,6,168,4],[151,10,168,8],[152,8,169,6],[152,14,169,12,"AsyncStorage"],[152,26,169,24],[152,27,169,24,"default"],[152,34,169,24],[152,35,169,25,"setItem"],[152,42,169,32],[152,43,169,33,"STORAGE_KEY"],[152,54,169,44],[152,56,169,46,"JSON"],[152,60,169,50],[152,61,169,51,"stringify"],[152,70,169,60],[152,71,169,61,"measurements"],[152,83,169,73],[152,84,169,74],[152,85,169,75],[153,6,170,4],[153,7,170,5],[153,8,170,6],[153,15,170,13,"error"],[153,20,170,18],[153,22,170,20],[154,8,171,6,"console"],[154,15,171,13],[154,16,171,14,"error"],[154,21,171,19],[154,22,171,20],[154,51,171,49],[154,53,171,51,"error"],[154,58,171,56],[154,59,171,57],[155,6,172,4],[156,4,173,2],[157,2,174,0],[157,3,174,1],[157,4,174,2],[157,5,174,3],[158,0,174,4],[158,3]],"functionMap":{"names":["<global>","create$argument_0","setMode","addPoint","set$argument_0","removeLastPoint","clearPoints","setCalibration","toggleUnit","calculateResult","pixelsToMm","saveMeasurement","loadMeasurements","deleteMeasurement","get.measurements.filter$argument_0"],"mappings":"AAA;4DCqD;WCS,uDD;YEE;QCE,kED;GFC;mBIE;QDC;MCE;GJC;eKE,gCL;kBME,+DN;cOE,UJ,sEI,CP;mBQE;uBCI,6CD;GRsC;mBUE;GVyB;oBWE;GXU;qBYE;mDCC,kBD;GZO;EDC"},"hasCjsExports":false},"type":"js/module"}]}