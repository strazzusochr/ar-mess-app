{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.append = append;\n  exports.appendTransform = appendTransform;\n  exports.identity = void 0;\n  exports.reset = reset;\n  exports.toArray = toArray;\n  /**\n   * based on\n   * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n   */\n  const DEG_TO_RAD = Math.PI / 180;\n  const identity = exports.identity = [1, 0, 0, 1, 0, 0];\n  let a = 1;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  let tx = 0;\n  let ty = 0;\n  let hasInitialState = true;\n\n  /**\n   * Represents an affine transformation matrix, and provides tools for concatenating transforms.\n   *\n   * This matrix can be visualized as:\n   *\n   * \t[ a  c  tx\n   * \t  b  d  ty\n   * \t  0  0  1  ]\n   *\n   * Note the locations of b and c.\n   **/\n\n  /**\n   * Reset current matrix to an identity matrix.\n   * @method reset\n   **/\n  function reset() {\n    if (hasInitialState) {\n      return;\n    }\n    a = d = 1;\n    b = c = tx = ty = 0;\n    hasInitialState = true;\n  }\n\n  /**\n   * Returns an array with current matrix values.\n   * @method toArray\n   * @return {Array} an array with current matrix values.\n   **/\n  function toArray() {\n    if (hasInitialState) {\n      return identity;\n    }\n    return [a, b, c, d, tx, ty];\n  }\n\n  /**\n   * Appends the specified matrix properties to this matrix. All parameters are required.\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n   * @method append\n   * @param {Number} a2\n   * @param {Number} b2\n   * @param {Number} c2\n   * @param {Number} d2\n   * @param {Number} tx2\n   * @param {Number} ty2\n   **/\n  function append(a2, b2, c2, d2, tx2, ty2) {\n    const change = a2 !== 1 || b2 !== 0 || c2 !== 0 || d2 !== 1;\n    const translate = tx2 !== 0 || ty2 !== 0;\n    if (!change && !translate) {\n      return;\n    }\n    if (hasInitialState) {\n      hasInitialState = false;\n      a = a2;\n      b = b2;\n      c = c2;\n      d = d2;\n      tx = tx2;\n      ty = ty2;\n      return;\n    }\n    const a1 = a;\n    const b1 = b;\n    const c1 = c;\n    const d1 = d;\n    if (change) {\n      a = a1 * a2 + c1 * b2;\n      b = b1 * a2 + d1 * b2;\n      c = a1 * c2 + c1 * d2;\n      d = b1 * c2 + d1 * d2;\n    }\n    if (translate) {\n      tx = a1 * tx2 + c1 * ty2 + tx;\n      ty = b1 * tx2 + d1 * ty2 + ty;\n    }\n  }\n\n  /**\n   * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n   * For example, you can use this to generate a matrix representing the transformations of a display object:\n   *\n   * \treset();\n   * \tappendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n   * \tvar matrix = toArray()\n   *\n   * @method appendTransform\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} scaleX\n   * @param {Number} scaleY\n   * @param {Number} rotation\n   * @param {Number} skewX\n   * @param {Number} skewY\n   * @param {Number} regX Optional.\n   * @param {Number} regY Optional.\n   **/\n  function appendTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (x === 0 && y === 0 && scaleX === 1 && scaleY === 1 && rotation === 0 && skewX === 0 && skewY === 0 && regX === 0 && regY === 0) {\n      return;\n    }\n    let cos, sin;\n    if (rotation % 360) {\n      const r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    const a2 = cos * scaleX;\n    const b2 = sin * scaleX;\n    const c2 = -sin * scaleY;\n    const d2 = cos * scaleY;\n    if (skewX || skewY) {\n      const b1 = Math.tan(skewY * DEG_TO_RAD);\n      const c1 = Math.tan(skewX * DEG_TO_RAD);\n      append(a2 + c1 * b2, b1 * a2 + b2, c2 + c1 * d2, b1 * c2 + d2, x, y);\n    } else {\n      append(a2, b2, c2, d2, x, y);\n    }\n    if (regX || regY) {\n      // append the registration offset:\n      tx -= regX * a + regY * c;\n      ty -= regX * b + regY * d;\n      hasInitialState = false;\n    }\n  }\n});","lineCount":156,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"append"],[7,16,6,14],[7,19,6,17,"append"],[7,25,6,23],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"appendTransform"],[8,25,7,23],[8,28,7,26,"appendTransform"],[8,43,7,41],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"identity"],[9,18,8,16],[9,21,8,19],[9,26,8,24],[9,27,8,25],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"reset"],[10,15,9,13],[10,18,9,16,"reset"],[10,23,9,21],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"toArray"],[11,17,10,15],[11,20,10,18,"toArray"],[11,27,10,25],[12,2,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,2,15,0],[16,8,15,6,"DEG_TO_RAD"],[16,18,15,16],[16,21,15,19,"Math"],[16,25,15,23],[16,26,15,24,"PI"],[16,28,15,26],[16,31,15,29],[16,34,15,32],[17,2,16,0],[17,8,16,6,"identity"],[17,16,16,14],[17,19,16,17,"exports"],[17,26,16,24],[17,27,16,25,"identity"],[17,35,16,33],[17,38,16,36],[17,39,16,37],[17,40,16,38],[17,42,16,40],[17,43,16,41],[17,45,16,43],[17,46,16,44],[17,48,16,46],[17,49,16,47],[17,51,16,49],[17,52,16,50],[17,54,16,52],[17,55,16,53],[17,56,16,54],[18,2,17,0],[18,6,17,4,"a"],[18,7,17,5],[18,10,17,8],[18,11,17,9],[19,2,18,0],[19,6,18,4,"b"],[19,7,18,5],[19,10,18,8],[19,11,18,9],[20,2,19,0],[20,6,19,4,"c"],[20,7,19,5],[20,10,19,8],[20,11,19,9],[21,2,20,0],[21,6,20,4,"d"],[21,7,20,5],[21,10,20,8],[21,11,20,9],[22,2,21,0],[22,6,21,4,"tx"],[22,8,21,6],[22,11,21,9],[22,12,21,10],[23,2,22,0],[23,6,22,4,"ty"],[23,8,22,6],[23,11,22,9],[23,12,22,10],[24,2,23,0],[24,6,23,4,"hasInitialState"],[24,21,23,19],[24,24,23,22],[24,28,23,26],[26,2,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[38,2,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,2,41,0],[42,11,41,9,"reset"],[42,16,41,14,"reset"],[42,17,41,14],[42,19,41,17],[43,4,42,2],[43,8,42,6,"hasInitialState"],[43,23,42,21],[43,25,42,23],[44,6,43,4],[45,4,44,2],[46,4,45,2,"a"],[46,5,45,3],[46,8,45,6,"d"],[46,9,45,7],[46,12,45,10],[46,13,45,11],[47,4,46,2,"b"],[47,5,46,3],[47,8,46,6,"c"],[47,9,46,7],[47,12,46,10,"tx"],[47,14,46,12],[47,17,46,15,"ty"],[47,19,46,17],[47,22,46,20],[47,23,46,21],[48,4,47,2,"hasInitialState"],[48,19,47,17],[48,22,47,20],[48,26,47,24],[49,2,48,0],[51,2,50,0],[52,0,51,0],[53,0,52,0],[54,0,53,0],[55,0,54,0],[56,2,55,0],[56,11,55,9,"toArray"],[56,18,55,16,"toArray"],[56,19,55,16],[56,21,55,19],[57,4,56,2],[57,8,56,6,"hasInitialState"],[57,23,56,21],[57,25,56,23],[58,6,57,4],[58,13,57,11,"identity"],[58,21,57,19],[59,4,58,2],[60,4,59,2],[60,11,59,9],[60,12,59,10,"a"],[60,13,59,11],[60,15,59,13,"b"],[60,16,59,14],[60,18,59,16,"c"],[60,19,59,17],[60,21,59,19,"d"],[60,22,59,20],[60,24,59,22,"tx"],[60,26,59,24],[60,28,59,26,"ty"],[60,30,59,28],[60,31,59,29],[61,2,60,0],[63,2,62,0],[64,0,63,0],[65,0,64,0],[66,0,65,0],[67,0,66,0],[68,0,67,0],[69,0,68,0],[70,0,69,0],[71,0,70,0],[72,0,71,0],[73,0,72,0],[74,2,73,0],[74,11,73,9,"append"],[74,17,73,15,"append"],[74,18,73,16,"a2"],[74,20,73,18],[74,22,73,20,"b2"],[74,24,73,22],[74,26,73,24,"c2"],[74,28,73,26],[74,30,73,28,"d2"],[74,32,73,30],[74,34,73,32,"tx2"],[74,37,73,35],[74,39,73,37,"ty2"],[74,42,73,40],[74,44,73,42],[75,4,74,2],[75,10,74,8,"change"],[75,16,74,14],[75,19,74,17,"a2"],[75,21,74,19],[75,26,74,24],[75,27,74,25],[75,31,74,29,"b2"],[75,33,74,31],[75,38,74,36],[75,39,74,37],[75,43,74,41,"c2"],[75,45,74,43],[75,50,74,48],[75,51,74,49],[75,55,74,53,"d2"],[75,57,74,55],[75,62,74,60],[75,63,74,61],[76,4,75,2],[76,10,75,8,"translate"],[76,19,75,17],[76,22,75,20,"tx2"],[76,25,75,23],[76,30,75,28],[76,31,75,29],[76,35,75,33,"ty2"],[76,38,75,36],[76,43,75,41],[76,44,75,42],[77,4,76,2],[77,8,76,6],[77,9,76,7,"change"],[77,15,76,13],[77,19,76,17],[77,20,76,18,"translate"],[77,29,76,27],[77,31,76,29],[78,6,77,4],[79,4,78,2],[80,4,79,2],[80,8,79,6,"hasInitialState"],[80,23,79,21],[80,25,79,23],[81,6,80,4,"hasInitialState"],[81,21,80,19],[81,24,80,22],[81,29,80,27],[82,6,81,4,"a"],[82,7,81,5],[82,10,81,8,"a2"],[82,12,81,10],[83,6,82,4,"b"],[83,7,82,5],[83,10,82,8,"b2"],[83,12,82,10],[84,6,83,4,"c"],[84,7,83,5],[84,10,83,8,"c2"],[84,12,83,10],[85,6,84,4,"d"],[85,7,84,5],[85,10,84,8,"d2"],[85,12,84,10],[86,6,85,4,"tx"],[86,8,85,6],[86,11,85,9,"tx2"],[86,14,85,12],[87,6,86,4,"ty"],[87,8,86,6],[87,11,86,9,"ty2"],[87,14,86,12],[88,6,87,4],[89,4,88,2],[90,4,89,2],[90,10,89,8,"a1"],[90,12,89,10],[90,15,89,13,"a"],[90,16,89,14],[91,4,90,2],[91,10,90,8,"b1"],[91,12,90,10],[91,15,90,13,"b"],[91,16,90,14],[92,4,91,2],[92,10,91,8,"c1"],[92,12,91,10],[92,15,91,13,"c"],[92,16,91,14],[93,4,92,2],[93,10,92,8,"d1"],[93,12,92,10],[93,15,92,13,"d"],[93,16,92,14],[94,4,93,2],[94,8,93,6,"change"],[94,14,93,12],[94,16,93,14],[95,6,94,4,"a"],[95,7,94,5],[95,10,94,8,"a1"],[95,12,94,10],[95,15,94,13,"a2"],[95,17,94,15],[95,20,94,18,"c1"],[95,22,94,20],[95,25,94,23,"b2"],[95,27,94,25],[96,6,95,4,"b"],[96,7,95,5],[96,10,95,8,"b1"],[96,12,95,10],[96,15,95,13,"a2"],[96,17,95,15],[96,20,95,18,"d1"],[96,22,95,20],[96,25,95,23,"b2"],[96,27,95,25],[97,6,96,4,"c"],[97,7,96,5],[97,10,96,8,"a1"],[97,12,96,10],[97,15,96,13,"c2"],[97,17,96,15],[97,20,96,18,"c1"],[97,22,96,20],[97,25,96,23,"d2"],[97,27,96,25],[98,6,97,4,"d"],[98,7,97,5],[98,10,97,8,"b1"],[98,12,97,10],[98,15,97,13,"c2"],[98,17,97,15],[98,20,97,18,"d1"],[98,22,97,20],[98,25,97,23,"d2"],[98,27,97,25],[99,4,98,2],[100,4,99,2],[100,8,99,6,"translate"],[100,17,99,15],[100,19,99,17],[101,6,100,4,"tx"],[101,8,100,6],[101,11,100,9,"a1"],[101,13,100,11],[101,16,100,14,"tx2"],[101,19,100,17],[101,22,100,20,"c1"],[101,24,100,22],[101,27,100,25,"ty2"],[101,30,100,28],[101,33,100,31,"tx"],[101,35,100,33],[102,6,101,4,"ty"],[102,8,101,6],[102,11,101,9,"b1"],[102,13,101,11],[102,16,101,14,"tx2"],[102,19,101,17],[102,22,101,20,"d1"],[102,24,101,22],[102,27,101,25,"ty2"],[102,30,101,28],[102,33,101,31,"ty"],[102,35,101,33],[103,4,102,2],[104,2,103,0],[106,2,105,0],[107,0,106,0],[108,0,107,0],[109,0,108,0],[110,0,109,0],[111,0,110,0],[112,0,111,0],[113,0,112,0],[114,0,113,0],[115,0,114,0],[116,0,115,0],[117,0,116,0],[118,0,117,0],[119,0,118,0],[120,0,119,0],[121,0,120,0],[122,0,121,0],[123,0,122,0],[124,0,123,0],[125,2,124,0],[125,11,124,9,"appendTransform"],[125,26,124,24,"appendTransform"],[125,27,124,25,"x"],[125,28,124,26],[125,30,124,28,"y"],[125,31,124,29],[125,33,124,31,"scaleX"],[125,39,124,37],[125,41,124,39,"scaleY"],[125,47,124,45],[125,49,124,47,"rotation"],[125,57,124,55],[125,59,124,57,"skewX"],[125,64,124,62],[125,66,124,64,"skewY"],[125,71,124,69],[125,73,124,71,"regX"],[125,77,124,75],[125,79,124,77,"regY"],[125,83,124,81],[125,85,124,83],[126,4,125,2],[126,8,125,6,"x"],[126,9,125,7],[126,14,125,12],[126,15,125,13],[126,19,125,17,"y"],[126,20,125,18],[126,25,125,23],[126,26,125,24],[126,30,125,28,"scaleX"],[126,36,125,34],[126,41,125,39],[126,42,125,40],[126,46,125,44,"scaleY"],[126,52,125,50],[126,57,125,55],[126,58,125,56],[126,62,125,60,"rotation"],[126,70,125,68],[126,75,125,73],[126,76,125,74],[126,80,125,78,"skewX"],[126,85,125,83],[126,90,125,88],[126,91,125,89],[126,95,125,93,"skewY"],[126,100,125,98],[126,105,125,103],[126,106,125,104],[126,110,125,108,"regX"],[126,114,125,112],[126,119,125,117],[126,120,125,118],[126,124,125,122,"regY"],[126,128,125,126],[126,133,125,131],[126,134,125,132],[126,136,125,134],[127,6,126,4],[128,4,127,2],[129,4,128,2],[129,8,128,6,"cos"],[129,11,128,9],[129,13,128,11,"sin"],[129,16,128,14],[130,4,129,2],[130,8,129,6,"rotation"],[130,16,129,14],[130,19,129,17],[130,22,129,20],[130,24,129,22],[131,6,130,4],[131,12,130,10,"r"],[131,13,130,11],[131,16,130,14,"rotation"],[131,24,130,22],[131,27,130,25,"DEG_TO_RAD"],[131,37,130,35],[132,6,131,4,"cos"],[132,9,131,7],[132,12,131,10,"Math"],[132,16,131,14],[132,17,131,15,"cos"],[132,20,131,18],[132,21,131,19,"r"],[132,22,131,20],[132,23,131,21],[133,6,132,4,"sin"],[133,9,132,7],[133,12,132,10,"Math"],[133,16,132,14],[133,17,132,15,"sin"],[133,20,132,18],[133,21,132,19,"r"],[133,22,132,20],[133,23,132,21],[134,4,133,2],[134,5,133,3],[134,11,133,9],[135,6,134,4,"cos"],[135,9,134,7],[135,12,134,10],[135,13,134,11],[136,6,135,4,"sin"],[136,9,135,7],[136,12,135,10],[136,13,135,11],[137,4,136,2],[138,4,137,2],[138,10,137,8,"a2"],[138,12,137,10],[138,15,137,13,"cos"],[138,18,137,16],[138,21,137,19,"scaleX"],[138,27,137,25],[139,4,138,2],[139,10,138,8,"b2"],[139,12,138,10],[139,15,138,13,"sin"],[139,18,138,16],[139,21,138,19,"scaleX"],[139,27,138,25],[140,4,139,2],[140,10,139,8,"c2"],[140,12,139,10],[140,15,139,13],[140,16,139,14,"sin"],[140,19,139,17],[140,22,139,20,"scaleY"],[140,28,139,26],[141,4,140,2],[141,10,140,8,"d2"],[141,12,140,10],[141,15,140,13,"cos"],[141,18,140,16],[141,21,140,19,"scaleY"],[141,27,140,25],[142,4,141,2],[142,8,141,6,"skewX"],[142,13,141,11],[142,17,141,15,"skewY"],[142,22,141,20],[142,24,141,22],[143,6,142,4],[143,12,142,10,"b1"],[143,14,142,12],[143,17,142,15,"Math"],[143,21,142,19],[143,22,142,20,"tan"],[143,25,142,23],[143,26,142,24,"skewY"],[143,31,142,29],[143,34,142,32,"DEG_TO_RAD"],[143,44,142,42],[143,45,142,43],[144,6,143,4],[144,12,143,10,"c1"],[144,14,143,12],[144,17,143,15,"Math"],[144,21,143,19],[144,22,143,20,"tan"],[144,25,143,23],[144,26,143,24,"skewX"],[144,31,143,29],[144,34,143,32,"DEG_TO_RAD"],[144,44,143,42],[144,45,143,43],[145,6,144,4,"append"],[145,12,144,10],[145,13,144,11,"a2"],[145,15,144,13],[145,18,144,16,"c1"],[145,20,144,18],[145,23,144,21,"b2"],[145,25,144,23],[145,27,144,25,"b1"],[145,29,144,27],[145,32,144,30,"a2"],[145,34,144,32],[145,37,144,35,"b2"],[145,39,144,37],[145,41,144,39,"c2"],[145,43,144,41],[145,46,144,44,"c1"],[145,48,144,46],[145,51,144,49,"d2"],[145,53,144,51],[145,55,144,53,"b1"],[145,57,144,55],[145,60,144,58,"c2"],[145,62,144,60],[145,65,144,63,"d2"],[145,67,144,65],[145,69,144,67,"x"],[145,70,144,68],[145,72,144,70,"y"],[145,73,144,71],[145,74,144,72],[146,4,145,2],[146,5,145,3],[146,11,145,9],[147,6,146,4,"append"],[147,12,146,10],[147,13,146,11,"a2"],[147,15,146,13],[147,17,146,15,"b2"],[147,19,146,17],[147,21,146,19,"c2"],[147,23,146,21],[147,25,146,23,"d2"],[147,27,146,25],[147,29,146,27,"x"],[147,30,146,28],[147,32,146,30,"y"],[147,33,146,31],[147,34,146,32],[148,4,147,2],[149,4,148,2],[149,8,148,6,"regX"],[149,12,148,10],[149,16,148,14,"regY"],[149,20,148,18],[149,22,148,20],[150,6,149,4],[151,6,150,4,"tx"],[151,8,150,6],[151,12,150,10,"regX"],[151,16,150,14],[151,19,150,17,"a"],[151,20,150,18],[151,23,150,21,"regY"],[151,27,150,25],[151,30,150,28,"c"],[151,31,150,29],[152,6,151,4,"ty"],[152,8,151,6],[152,12,151,10,"regX"],[152,16,151,14],[152,19,151,17,"b"],[152,20,151,18],[152,23,151,21,"regY"],[152,27,151,25],[152,30,151,28,"d"],[152,31,151,29],[153,6,152,4,"hasInitialState"],[153,21,152,19],[153,24,152,22],[153,29,152,27],[154,4,153,2],[155,2,154,0],[156,0,154,1],[156,3]],"functionMap":{"names":["<global>","reset","toArray","append","appendTransform"],"mappings":"AAA;ACwC;CDO;AEO;CFK;AGa;CH8B;AIqB;CJ8B"},"hasCjsExports":true},"type":"js/module"}]}