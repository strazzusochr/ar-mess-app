{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useMeasurementStore\", {\n    enumerable: true,\n    get: function () {\n      return useMeasurementStore;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _zustand = require(_dependencyMap[1], \"zustand\");\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[2], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var STORAGE_KEY = '@measurements';\n  var useMeasurementStore = (0, _zustand.create)((set, get) => ({\n    measurements: [],\n    currentMode: 'distance',\n    currentPoints: [],\n    calibrationScale: null,\n    isCalibrated: false,\n    unit: 'metric',\n    currentMeasurement: null,\n    setMode: mode => set({\n      currentMode: mode,\n      currentPoints: []\n    }),\n    addPoint: point => {\n      var newPoint = {\n        ...point,\n        id: Date.now().toString()\n      };\n      set(state => ({\n        currentPoints: [...state.currentPoints, newPoint]\n      }));\n    },\n    removeLastPoint: () => {\n      set(state => ({\n        currentPoints: state.currentPoints.slice(0, -1)\n      }));\n    },\n    clearPoints: () => set({\n      currentPoints: []\n    }),\n    setCalibration: scale => {\n      console.log('Setting calibration scale:', scale);\n      set({\n        calibrationScale: scale,\n        isCalibrated: true\n      });\n    },\n    toggleUnit: () => set(state => ({\n      unit: state.unit === 'metric' ? 'imperial' : 'metric'\n    })),\n    calculateResult: () => {\n      var _get = get(),\n        currentPoints = _get.currentPoints,\n        calibrationScale = _get.calibrationScale,\n        currentMode = _get.currentMode;\n      if (!calibrationScale || currentPoints.length < 2) return {};\n      var pixelsToMm = pixels => pixels / calibrationScale;\n      if (currentMode === 'distance') {\n        var totalDistance = 0;\n        for (var i = 0; i < currentPoints.length - 1; i++) {\n          var dx = currentPoints[i + 1].x - currentPoints[i].x;\n          var dy = currentPoints[i + 1].y - currentPoints[i].y;\n          var distancePixels = Math.sqrt(dx * dx + dy * dy);\n          totalDistance += pixelsToMm(distancePixels);\n        }\n        return {\n          distance: totalDistance\n        };\n      }\n      if ((currentMode === 'area' || currentMode === 'volume') && currentPoints.length >= 3) {\n        // Shoelace formula for polygon area\n        var area = 0;\n        var perimeter = 0;\n        var n = currentPoints.length;\n        for (var _i = 0; _i < n; _i++) {\n          var j = (_i + 1) % n;\n          var xi = pixelsToMm(currentPoints[_i].x);\n          var yi = pixelsToMm(currentPoints[_i].y);\n          var xj = pixelsToMm(currentPoints[j].x);\n          var yj = pixelsToMm(currentPoints[j].y);\n          area += xi * yj - xj * yi;\n          var _dx = xj - xi;\n          var _dy = yj - yi;\n          perimeter += Math.sqrt(_dx * _dx + _dy * _dy);\n        }\n        area = Math.abs(area) / 2;\n        return {\n          area,\n          perimeter\n        };\n      }\n      return {};\n    },\n    saveMeasurement: function () {\n      var _ref = (0, _asyncToGenerator.default)(function* (name, imageData) {\n        var _get2 = get(),\n          currentMode = _get2.currentMode,\n          currentPoints = _get2.currentPoints,\n          calibrationScale = _get2.calibrationScale,\n          unit = _get2.unit;\n        if (!calibrationScale || currentPoints.length < 2) return;\n        var result = get().calculateResult();\n        var measurement = {\n          id: Date.now().toString(),\n          name,\n          mode: currentMode,\n          points: currentPoints,\n          calibrationScale,\n          result,\n          unit,\n          timestamp: Date.now(),\n          imageData\n        };\n        var measurements = [...get().measurements, measurement];\n        set({\n          measurements,\n          currentPoints: []\n        });\n        try {\n          yield AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n        } catch (error) {\n          console.error('Error saving measurement:', error);\n        }\n      });\n      return function saveMeasurement(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    loadMeasurements: function () {\n      var _ref2 = (0, _asyncToGenerator.default)(function* () {\n        try {\n          var data = yield AsyncStorage.default.getItem(STORAGE_KEY);\n          if (data) {\n            var measurements = JSON.parse(data);\n            set({\n              measurements\n            });\n          }\n        } catch (error) {\n          console.error('Error loading measurements:', error);\n        }\n      });\n      return function loadMeasurements() {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    deleteMeasurement: function () {\n      var _ref3 = (0, _asyncToGenerator.default)(function* (id) {\n        var measurements = get().measurements.filter(m => m.id !== id);\n        set({\n          measurements\n        });\n        try {\n          yield AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n        } catch (error) {\n          console.error('Error deleting measurement:', error);\n        }\n      });\n      return function deleteMeasurement(_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  }));\n});","lineCount":176,"map":[[12,2,54,0,"Object"],[12,8,54,0],[12,9,54,0,"defineProperty"],[12,23,54,0],[12,24,54,0,"exports"],[12,31,54,0],[13,4,54,0,"enumerable"],[13,14,54,0],[14,4,54,0,"get"],[14,7,54,0],[14,18,54,0,"get"],[14,19,54,0],[15,6,54,0],[15,13,54,0,"useMeasurementStore"],[15,32,54,0],[16,4,54,0],[17,2,54,0],[18,2,177,4],[18,6,177,4,"_babelRuntimeHelpersAsyncToGenerator"],[18,42,177,4],[18,45,177,4,"require"],[18,52,177,4],[18,53,177,4,"_dependencyMap"],[18,67,177,4],[19,2,177,4],[19,6,177,4,"_asyncToGenerator"],[19,23,177,4],[19,26,177,4,"_interopDefault"],[19,41,177,4],[19,42,177,4,"_babelRuntimeHelpersAsyncToGenerator"],[19,78,177,4],[20,2,1,0],[20,6,1,0,"_zustand"],[20,14,1,0],[20,17,1,0,"require"],[20,24,1,0],[20,25,1,0,"_dependencyMap"],[20,39,1,0],[21,2,2,0],[21,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[21,42,2,0],[21,45,2,0,"require"],[21,52,2,0],[21,53,2,0,"_dependencyMap"],[21,67,2,0],[22,2,2,0],[22,6,2,0,"AsyncStorage"],[22,18,2,0],[22,21,2,0,"_interopDefault"],[22,36,2,0],[22,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[22,73,2,0],[23,2,52,0],[23,6,52,6,"STORAGE_KEY"],[23,17,52,17],[23,20,52,20],[23,35,52,35],[24,2,54,7],[24,6,54,13,"useMeasurementStore"],[24,25,54,32],[24,28,54,35],[24,32,54,35,"create"],[24,40,54,41],[24,41,54,41,"create"],[24,47,54,41],[24,49,54,60],[24,50,54,61,"set"],[24,53,54,64],[24,55,54,66,"get"],[24,58,54,69],[24,64,54,75],[25,4,55,2,"measurements"],[25,16,55,14],[25,18,55,16],[25,20,55,18],[26,4,56,2,"currentMode"],[26,15,56,13],[26,17,56,15],[26,27,56,25],[27,4,57,2,"currentPoints"],[27,17,57,15],[27,19,57,17],[27,21,57,19],[28,4,58,2,"calibrationScale"],[28,20,58,18],[28,22,58,20],[28,26,58,24],[29,4,59,2,"isCalibrated"],[29,16,59,14],[29,18,59,16],[29,23,59,21],[30,4,60,2,"unit"],[30,8,60,6],[30,10,60,8],[30,18,60,16],[31,4,61,2,"currentMeasurement"],[31,22,61,20],[31,24,61,22],[31,28,61,26],[32,4,63,2,"setMode"],[32,11,63,9],[32,13,63,12,"mode"],[32,17,63,16],[32,21,63,21,"set"],[32,24,63,24],[32,25,63,25],[33,6,63,27,"currentMode"],[33,17,63,38],[33,19,63,40,"mode"],[33,23,63,44],[34,6,63,46,"currentPoints"],[34,19,63,59],[34,21,63,61],[35,4,63,64],[35,5,63,65],[35,6,63,66],[36,4,65,2,"addPoint"],[36,12,65,10],[36,14,65,13,"point"],[36,19,65,18],[36,23,65,23],[37,6,66,4],[37,10,66,10,"newPoint"],[37,18,66,18],[37,21,66,21],[38,8,66,23],[38,11,66,26,"point"],[38,16,66,31],[39,8,66,33,"id"],[39,10,66,35],[39,12,66,37,"Date"],[39,16,66,41],[39,17,66,42,"now"],[39,20,66,45],[39,21,66,46],[39,22,66,47],[39,23,66,48,"toString"],[39,31,66,56],[39,32,66,57],[40,6,66,59],[40,7,66,60],[41,6,67,4,"set"],[41,9,67,7],[41,10,67,9,"state"],[41,15,67,14],[41,20,67,20],[42,8,67,22,"currentPoints"],[42,21,67,35],[42,23,67,37],[42,24,67,38],[42,27,67,41,"state"],[42,32,67,46],[42,33,67,47,"currentPoints"],[42,46,67,60],[42,48,67,62,"newPoint"],[42,56,67,70],[43,6,67,72],[43,7,67,73],[43,8,67,74],[43,9,67,75],[44,4,68,2],[44,5,68,3],[45,4,70,2,"removeLastPoint"],[45,19,70,17],[45,21,70,19,"removeLastPoint"],[45,22,70,19],[45,27,70,25],[46,6,71,4,"set"],[46,9,71,7],[46,10,71,9,"state"],[46,15,71,14],[46,20,71,20],[47,8,72,6,"currentPoints"],[47,21,72,19],[47,23,72,21,"state"],[47,28,72,26],[47,29,72,27,"currentPoints"],[47,42,72,40],[47,43,72,41,"slice"],[47,48,72,46],[47,49,72,47],[47,50,72,48],[47,52,72,50],[47,53,72,51],[47,54,72,52],[48,6,73,4],[48,7,73,5],[48,8,73,6],[48,9,73,7],[49,4,74,2],[49,5,74,3],[50,4,76,2,"clearPoints"],[50,15,76,13],[50,17,76,15,"clearPoints"],[50,18,76,15],[50,23,76,21,"set"],[50,26,76,24],[50,27,76,25],[51,6,76,27,"currentPoints"],[51,19,76,40],[51,21,76,42],[52,4,76,45],[52,5,76,46],[52,6,76,47],[53,4,78,2,"setCalibration"],[53,18,78,16],[53,20,78,19,"scale"],[53,25,78,24],[53,29,78,29],[54,6,79,4,"console"],[54,13,79,11],[54,14,79,12,"log"],[54,17,79,15],[54,18,79,16],[54,46,79,44],[54,48,79,46,"scale"],[54,53,79,51],[54,54,79,52],[55,6,80,4,"set"],[55,9,80,7],[55,10,80,8],[56,8,80,10,"calibrationScale"],[56,24,80,26],[56,26,80,28,"scale"],[56,31,80,33],[57,8,80,35,"isCalibrated"],[57,20,80,47],[57,22,80,49],[58,6,80,54],[58,7,80,55],[58,8,80,56],[59,4,81,2],[59,5,81,3],[60,4,83,2,"toggleUnit"],[60,14,83,12],[60,16,83,14,"toggleUnit"],[60,17,83,14],[60,22,83,20,"set"],[60,25,83,23],[60,26,83,25,"state"],[60,31,83,30],[60,36,83,36],[61,6,83,38,"unit"],[61,10,83,42],[61,12,83,44,"state"],[61,17,83,49],[61,18,83,50,"unit"],[61,22,83,54],[61,27,83,59],[61,35,83,67],[61,38,83,70],[61,48,83,80],[61,51,83,83],[62,4,83,92],[62,5,83,93],[62,6,83,94],[62,7,83,95],[63,4,85,2,"calculateResult"],[63,19,85,17],[63,21,85,19,"calculateResult"],[63,22,85,19],[63,27,85,25],[64,6,86,4],[64,10,86,4,"_get"],[64,14,86,4],[64,17,86,61,"get"],[64,20,86,64],[64,21,86,65],[64,22,86,66],[65,8,86,12,"currentPoints"],[65,21,86,25],[65,24,86,25,"_get"],[65,28,86,25],[65,29,86,12,"currentPoints"],[65,42,86,25],[66,8,86,27,"calibrationScale"],[66,24,86,43],[66,27,86,43,"_get"],[66,31,86,43],[66,32,86,27,"calibrationScale"],[66,48,86,43],[67,8,86,45,"currentMode"],[67,19,86,56],[67,22,86,56,"_get"],[67,26,86,56],[67,27,86,45,"currentMode"],[67,38,86,56],[68,6,87,4],[68,10,87,8],[68,11,87,9,"calibrationScale"],[68,27,87,25],[68,31,87,29,"currentPoints"],[68,44,87,42],[68,45,87,43,"length"],[68,51,87,49],[68,54,87,52],[68,55,87,53],[68,57,87,55],[68,64,87,62],[68,65,87,63],[68,66,87,64],[69,6,89,4],[69,10,89,10,"pixelsToMm"],[69,20,89,20],[69,23,89,24,"pixels"],[69,29,89,38],[69,33,89,43,"pixels"],[69,39,89,49],[69,42,89,52,"calibrationScale"],[69,58,89,68],[70,6,91,4],[70,10,91,8,"currentMode"],[70,21,91,19],[70,26,91,24],[70,36,91,34],[70,38,91,36],[71,8,92,6],[71,12,92,10,"totalDistance"],[71,25,92,23],[71,28,92,26],[71,29,92,27],[72,8,93,6],[72,13,93,11],[72,17,93,15,"i"],[72,18,93,16],[72,21,93,19],[72,22,93,20],[72,24,93,22,"i"],[72,25,93,23],[72,28,93,26,"currentPoints"],[72,41,93,39],[72,42,93,40,"length"],[72,48,93,46],[72,51,93,49],[72,52,93,50],[72,54,93,52,"i"],[72,55,93,53],[72,57,93,55],[72,59,93,57],[73,10,94,8],[73,14,94,14,"dx"],[73,16,94,16],[73,19,94,19,"currentPoints"],[73,32,94,32],[73,33,94,33,"i"],[73,34,94,34],[73,37,94,37],[73,38,94,38],[73,39,94,39],[73,40,94,40,"x"],[73,41,94,41],[73,44,94,44,"currentPoints"],[73,57,94,57],[73,58,94,58,"i"],[73,59,94,59],[73,60,94,60],[73,61,94,61,"x"],[73,62,94,62],[74,10,95,8],[74,14,95,14,"dy"],[74,16,95,16],[74,19,95,19,"currentPoints"],[74,32,95,32],[74,33,95,33,"i"],[74,34,95,34],[74,37,95,37],[74,38,95,38],[74,39,95,39],[74,40,95,40,"y"],[74,41,95,41],[74,44,95,44,"currentPoints"],[74,57,95,57],[74,58,95,58,"i"],[74,59,95,59],[74,60,95,60],[74,61,95,61,"y"],[74,62,95,62],[75,10,96,8],[75,14,96,14,"distancePixels"],[75,28,96,28],[75,31,96,31,"Math"],[75,35,96,35],[75,36,96,36,"sqrt"],[75,40,96,40],[75,41,96,41,"dx"],[75,43,96,43],[75,46,96,46,"dx"],[75,48,96,48],[75,51,96,51,"dy"],[75,53,96,53],[75,56,96,56,"dy"],[75,58,96,58],[75,59,96,59],[76,10,97,8,"totalDistance"],[76,23,97,21],[76,27,97,25,"pixelsToMm"],[76,37,97,35],[76,38,97,36,"distancePixels"],[76,52,97,50],[76,53,97,51],[77,8,98,6],[78,8,99,6],[78,15,99,13],[79,10,99,15,"distance"],[79,18,99,23],[79,20,99,25,"totalDistance"],[80,8,99,39],[80,9,99,40],[81,6,100,4],[82,6,102,4],[82,10,102,8],[82,11,102,9,"currentMode"],[82,22,102,20],[82,27,102,25],[82,33,102,31],[82,37,102,35,"currentMode"],[82,48,102,46],[82,53,102,51],[82,61,102,59],[82,66,102,64,"currentPoints"],[82,79,102,77],[82,80,102,78,"length"],[82,86,102,84],[82,90,102,88],[82,91,102,89],[82,93,102,91],[83,8,103,6],[84,8,104,6],[84,12,104,10,"area"],[84,16,104,14],[84,19,104,17],[84,20,104,18],[85,8,105,6],[85,12,105,10,"perimeter"],[85,21,105,19],[85,24,105,22],[85,25,105,23],[86,8,106,6],[86,12,106,12,"n"],[86,13,106,13],[86,16,106,16,"currentPoints"],[86,29,106,29],[86,30,106,30,"length"],[86,36,106,36],[87,8,108,6],[87,13,108,11],[87,17,108,15,"i"],[87,19,108,16],[87,22,108,19],[87,23,108,20],[87,25,108,22,"i"],[87,27,108,23],[87,30,108,26,"n"],[87,31,108,27],[87,33,108,29,"i"],[87,35,108,30],[87,37,108,32],[87,39,108,34],[88,10,109,8],[88,14,109,14,"j"],[88,15,109,15],[88,18,109,18],[88,19,109,19,"i"],[88,21,109,20],[88,24,109,23],[88,25,109,24],[88,29,109,28,"n"],[88,30,109,29],[89,10,110,8],[89,14,110,14,"xi"],[89,16,110,16],[89,19,110,19,"pixelsToMm"],[89,29,110,29],[89,30,110,30,"currentPoints"],[89,43,110,43],[89,44,110,44,"i"],[89,46,110,45],[89,47,110,46],[89,48,110,47,"x"],[89,49,110,48],[89,50,110,49],[90,10,111,8],[90,14,111,14,"yi"],[90,16,111,16],[90,19,111,19,"pixelsToMm"],[90,29,111,29],[90,30,111,30,"currentPoints"],[90,43,111,43],[90,44,111,44,"i"],[90,46,111,45],[90,47,111,46],[90,48,111,47,"y"],[90,49,111,48],[90,50,111,49],[91,10,112,8],[91,14,112,14,"xj"],[91,16,112,16],[91,19,112,19,"pixelsToMm"],[91,29,112,29],[91,30,112,30,"currentPoints"],[91,43,112,43],[91,44,112,44,"j"],[91,45,112,45],[91,46,112,46],[91,47,112,47,"x"],[91,48,112,48],[91,49,112,49],[92,10,113,8],[92,14,113,14,"yj"],[92,16,113,16],[92,19,113,19,"pixelsToMm"],[92,29,113,29],[92,30,113,30,"currentPoints"],[92,43,113,43],[92,44,113,44,"j"],[92,45,113,45],[92,46,113,46],[92,47,113,47,"y"],[92,48,113,48],[92,49,113,49],[93,10,115,8,"area"],[93,14,115,12],[93,18,115,16,"xi"],[93,20,115,18],[93,23,115,21,"yj"],[93,25,115,23],[93,28,115,26,"xj"],[93,30,115,28],[93,33,115,31,"yi"],[93,35,115,33],[94,10,117,8],[94,14,117,14,"dx"],[94,17,117,16],[94,20,117,19,"xj"],[94,22,117,21],[94,25,117,24,"xi"],[94,27,117,26],[95,10,118,8],[95,14,118,14,"dy"],[95,17,118,16],[95,20,118,19,"yj"],[95,22,118,21],[95,25,118,24,"yi"],[95,27,118,26],[96,10,119,8,"perimeter"],[96,19,119,17],[96,23,119,21,"Math"],[96,27,119,25],[96,28,119,26,"sqrt"],[96,32,119,30],[96,33,119,31,"dx"],[96,36,119,33],[96,39,119,36,"dx"],[96,42,119,38],[96,45,119,41,"dy"],[96,48,119,43],[96,51,119,46,"dy"],[96,54,119,48],[96,55,119,49],[97,8,120,6],[98,8,122,6,"area"],[98,12,122,10],[98,15,122,13,"Math"],[98,19,122,17],[98,20,122,18,"abs"],[98,23,122,21],[98,24,122,22,"area"],[98,28,122,26],[98,29,122,27],[98,32,122,30],[98,33,122,31],[99,8,123,6],[99,15,123,13],[100,10,123,15,"area"],[100,14,123,19],[101,10,123,21,"perimeter"],[102,8,123,31],[102,9,123,32],[103,6,124,4],[104,6,126,4],[104,13,126,11],[104,14,126,12],[104,15,126,13],[105,4,127,2],[105,5,127,3],[106,4,129,2,"saveMeasurement"],[106,19,129,17],[107,6,129,17],[107,10,129,17,"_ref"],[107,14,129,17],[107,21,129,17,"_asyncToGenerator"],[107,38,129,17],[107,39,129,17,"default"],[107,46,129,17],[107,48,129,19],[107,59,129,26,"name"],[107,63,129,30],[107,65,129,32,"imageData"],[107,74,129,41],[107,76,129,46],[108,8,130,4],[108,12,130,4,"_get2"],[108,17,130,4],[108,20,130,67,"get"],[108,23,130,70],[108,24,130,71],[108,25,130,72],[109,10,130,12,"currentMode"],[109,21,130,23],[109,24,130,23,"_get2"],[109,29,130,23],[109,30,130,12,"currentMode"],[109,41,130,23],[110,10,130,25,"currentPoints"],[110,23,130,38],[110,26,130,38,"_get2"],[110,31,130,38],[110,32,130,25,"currentPoints"],[110,45,130,38],[111,10,130,40,"calibrationScale"],[111,26,130,56],[111,29,130,56,"_get2"],[111,34,130,56],[111,35,130,40,"calibrationScale"],[111,51,130,56],[112,10,130,58,"unit"],[112,14,130,62],[112,17,130,62,"_get2"],[112,22,130,62],[112,23,130,58,"unit"],[112,27,130,62],[113,8,131,4],[113,12,131,8],[113,13,131,9,"calibrationScale"],[113,29,131,25],[113,33,131,29,"currentPoints"],[113,46,131,42],[113,47,131,43,"length"],[113,53,131,49],[113,56,131,52],[113,57,131,53],[113,59,131,55],[114,8,133,4],[114,12,133,10,"result"],[114,18,133,16],[114,21,133,19,"get"],[114,24,133,22],[114,25,133,23],[114,26,133,24],[114,27,133,25,"calculateResult"],[114,42,133,40],[114,43,133,41],[114,44,133,42],[115,8,134,4],[115,12,134,10,"measurement"],[115,23,134,34],[115,26,134,37],[116,10,135,6,"id"],[116,12,135,8],[116,14,135,10,"Date"],[116,18,135,14],[116,19,135,15,"now"],[116,22,135,18],[116,23,135,19],[116,24,135,20],[116,25,135,21,"toString"],[116,33,135,29],[116,34,135,30],[116,35,135,31],[117,10,136,6,"name"],[117,14,136,10],[118,10,137,6,"mode"],[118,14,137,10],[118,16,137,12,"currentMode"],[118,27,137,23],[119,10,138,6,"points"],[119,16,138,12],[119,18,138,14,"currentPoints"],[119,31,138,27],[120,10,139,6,"calibrationScale"],[120,26,139,22],[121,10,140,6,"result"],[121,16,140,12],[122,10,141,6,"unit"],[122,14,141,10],[123,10,142,6,"timestamp"],[123,19,142,15],[123,21,142,17,"Date"],[123,25,142,21],[123,26,142,22,"now"],[123,29,142,25],[123,30,142,26],[123,31,142,27],[124,10,143,6,"imageData"],[125,8,144,4],[125,9,144,5],[126,8,146,4],[126,12,146,10,"measurements"],[126,24,146,22],[126,27,146,25],[126,28,146,26],[126,31,146,29,"get"],[126,34,146,32],[126,35,146,33],[126,36,146,34],[126,37,146,35,"measurements"],[126,49,146,47],[126,51,146,49,"measurement"],[126,62,146,60],[126,63,146,61],[127,8,147,4,"set"],[127,11,147,7],[127,12,147,8],[128,10,147,10,"measurements"],[128,22,147,22],[129,10,147,24,"currentPoints"],[129,23,147,37],[129,25,147,39],[130,8,147,42],[130,9,147,43],[130,10,147,44],[131,8,149,4],[131,12,149,8],[132,10,150,6],[132,16,150,12,"AsyncStorage"],[132,28,150,24],[132,29,150,24,"default"],[132,36,150,24],[132,37,150,25,"setItem"],[132,44,150,32],[132,45,150,33,"STORAGE_KEY"],[132,56,150,44],[132,58,150,46,"JSON"],[132,62,150,50],[132,63,150,51,"stringify"],[132,72,150,60],[132,73,150,61,"measurements"],[132,85,150,73],[132,86,150,74],[132,87,150,75],[133,8,151,4],[133,9,151,5],[133,10,151,6],[133,17,151,13,"error"],[133,22,151,18],[133,24,151,20],[134,10,152,6,"console"],[134,17,152,13],[134,18,152,14,"error"],[134,23,152,19],[134,24,152,20],[134,51,152,47],[134,53,152,49,"error"],[134,58,152,54],[134,59,152,55],[135,8,153,4],[136,6,154,2],[136,7,154,3],[137,6,154,3],[137,22,129,2,"saveMeasurement"],[137,37,129,17,"saveMeasurement"],[137,38,129,17,"_x"],[137,40,129,17],[137,42,129,17,"_x2"],[137,45,129,17],[138,8,129,17],[138,15,129,17,"_ref"],[138,19,129,17],[138,20,129,17,"apply"],[138,25,129,17],[138,32,129,17,"arguments"],[138,41,129,17],[139,6,129,17],[140,4,129,17],[140,7,154,3],[141,4,156,2,"loadMeasurements"],[141,20,156,18],[142,6,156,18],[142,10,156,18,"_ref2"],[142,15,156,18],[142,22,156,18,"_asyncToGenerator"],[142,39,156,18],[142,40,156,18,"default"],[142,47,156,18],[142,49,156,20],[142,62,156,32],[143,8,157,4],[143,12,157,8],[144,10,158,6],[144,14,158,12,"data"],[144,18,158,16],[144,27,158,25,"AsyncStorage"],[144,39,158,37],[144,40,158,37,"default"],[144,47,158,37],[144,48,158,38,"getItem"],[144,55,158,45],[144,56,158,46,"STORAGE_KEY"],[144,67,158,57],[144,68,158,58],[145,10,159,6],[145,14,159,10,"data"],[145,18,159,14],[145,20,159,16],[146,12,160,8],[146,16,160,14,"measurements"],[146,28,160,26],[146,31,160,29,"JSON"],[146,35,160,33],[146,36,160,34,"parse"],[146,41,160,39],[146,42,160,40,"data"],[146,46,160,44],[146,47,160,45],[147,12,161,8,"set"],[147,15,161,11],[147,16,161,12],[148,14,161,14,"measurements"],[149,12,161,27],[149,13,161,28],[149,14,161,29],[150,10,162,6],[151,8,163,4],[151,9,163,5],[151,10,163,6],[151,17,163,13,"error"],[151,22,163,18],[151,24,163,20],[152,10,164,6,"console"],[152,17,164,13],[152,18,164,14,"error"],[152,23,164,19],[152,24,164,20],[152,53,164,49],[152,55,164,51,"error"],[152,60,164,56],[152,61,164,57],[153,8,165,4],[154,6,166,2],[154,7,166,3],[155,6,166,3],[155,22,156,2,"loadMeasurements"],[155,38,156,18,"loadMeasurements"],[155,39,156,18],[156,8,156,18],[156,15,156,18,"_ref2"],[156,20,156,18],[156,21,156,18,"apply"],[156,26,156,18],[156,33,156,18,"arguments"],[156,42,156,18],[157,6,156,18],[158,4,156,18],[158,7,166,3],[159,4,168,2,"deleteMeasurement"],[159,21,168,19],[160,6,168,19],[160,10,168,19,"_ref3"],[160,15,168,19],[160,22,168,19,"_asyncToGenerator"],[160,39,168,19],[160,40,168,19,"default"],[160,47,168,19],[160,49,168,21],[160,60,168,28,"id"],[160,62,168,30],[160,64,168,35],[161,8,169,4],[161,12,169,10,"measurements"],[161,24,169,22],[161,27,169,25,"get"],[161,30,169,28],[161,31,169,29],[161,32,169,30],[161,33,169,31,"measurements"],[161,45,169,43],[161,46,169,44,"filter"],[161,52,169,50],[161,53,169,52,"m"],[161,54,169,53],[161,58,169,58,"m"],[161,59,169,59],[161,60,169,60,"id"],[161,62,169,62],[161,67,169,67,"id"],[161,69,169,69],[161,70,169,70],[162,8,170,4,"set"],[162,11,170,7],[162,12,170,8],[163,10,170,10,"measurements"],[164,8,170,23],[164,9,170,24],[164,10,170,25],[165,8,171,4],[165,12,171,8],[166,10,172,6],[166,16,172,12,"AsyncStorage"],[166,28,172,24],[166,29,172,24,"default"],[166,36,172,24],[166,37,172,25,"setItem"],[166,44,172,32],[166,45,172,33,"STORAGE_KEY"],[166,56,172,44],[166,58,172,46,"JSON"],[166,62,172,50],[166,63,172,51,"stringify"],[166,72,172,60],[166,73,172,61,"measurements"],[166,85,172,73],[166,86,172,74],[166,87,172,75],[167,8,173,4],[167,9,173,5],[167,10,173,6],[167,17,173,13,"error"],[167,22,173,18],[167,24,173,20],[168,10,174,6,"console"],[168,17,174,13],[168,18,174,14,"error"],[168,23,174,19],[168,24,174,20],[168,53,174,49],[168,55,174,51,"error"],[168,60,174,56],[168,61,174,57],[169,8,175,4],[170,6,176,2],[170,7,176,3],[171,6,176,3],[171,22,168,2,"deleteMeasurement"],[171,39,168,19,"deleteMeasurement"],[171,40,168,19,"_x3"],[171,43,168,19],[172,8,168,19],[172,15,168,19,"_ref3"],[172,20,168,19],[172,21,168,19,"apply"],[172,26,168,19],[172,33,168,19,"arguments"],[172,42,168,19],[173,6,168,19],[174,4,168,19],[175,2,177,0],[175,3,177,1],[175,4,177,2],[175,5,177,3],[176,0,177,4],[176,3]],"functionMap":{"names":["<global>","create$argument_0","setMode","addPoint","set$argument_0","removeLastPoint","clearPoints","setCalibration","toggleUnit","calculateResult","pixelsToMm","saveMeasurement","loadMeasurements","deleteMeasurement","get.measurements.filter$argument_0"],"mappings":"AAA;4DCqD;WCS,uDD;YEE;QCE,kED;GFC;mBIE;QDC;MCE;GJC;eKE,gCL;kBME;GNG;cOE,UJ,sEI,CP;mBQE;uBCI,6CD;GRsC;mBUE;GVyB;oBWE;GXU;qBYE;mDCC,kBD;GZO;EDC"},"hasCjsExports":false},"type":"js/module"}]}