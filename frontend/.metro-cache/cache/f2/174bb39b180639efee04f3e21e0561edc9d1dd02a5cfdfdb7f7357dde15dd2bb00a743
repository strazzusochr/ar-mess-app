{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"camelCaseToDashed\", {\n    enumerable: true,\n    get: function () {\n      return camelCaseToDashed;\n    }\n  });\n  Object.defineProperty(exports, \"getBoundingClientRect\", {\n    enumerable: true,\n    get: function () {\n      return getBoundingClientRect;\n    }\n  });\n  exports.remeasure = remeasure;\n  exports.encodeSvg = encodeSvg;\n  const camelCaseToDashed = camelCase => {\n    return camelCase.replace(/[A-Z]/g, m => '-' + m.toLowerCase());\n  };\n  const getBoundingClientRect = node => {\n    if (node) {\n      const isElement = node.nodeType === 1; /* Node.ELEMENT_NODE */\n      if (isElement && typeof node.getBoundingClientRect === 'function') {\n        return node.getBoundingClientRect();\n      }\n    }\n    throw new Error('Can not get boundingClientRect of ' + node || 'undefined');\n  };\n  const measureLayout = (node, callback) => {\n    const relativeNode = node === null || node === void 0 ? void 0 : node.parentNode;\n    if (relativeNode) {\n      setTimeout(() => {\n        // @ts-expect-error TODO: handle it better\n        const relativeRect = getBoundingClientRect(relativeNode);\n        const {\n          height,\n          left,\n          top,\n          width\n        } = getBoundingClientRect(node);\n        const x = left - relativeRect.left;\n        const y = top - relativeRect.top;\n        callback(x, y, width, height, left, top);\n      }, 0);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function remeasure() {\n    const tag = this.state.touchable.responderID;\n    if (tag === null) {\n      return;\n    }\n    measureLayout(tag, this._handleQueryLayout);\n  }\n\n  /* Taken from here: https://gist.github.com/jennyknuth/222825e315d45a738ed9d6e04c7a88d0 */\n  function encodeSvg(svgString) {\n    return svgString.replace('<svg', ~svgString.indexOf('xmlns') ? '<svg' : '<svg xmlns=\"http://www.w3.org/2000/svg\"').replace(/\"/g, \"'\").replace(/%/g, '%25').replace(/#/g, '%23').replace(/{/g, '%7B').replace(/}/g, '%7D').replace(/</g, '%3C').replace(/>/g, '%3E').replace(/\\s+/g, ' ');\n  }\n});","lineCount":65,"map":[[7,2,1,0,"Object"],[7,8,1,0],[7,9,1,0,"defineProperty"],[7,23,1,0],[7,24,1,0,"exports"],[7,31,1,0],[8,4,1,0,"enumerable"],[8,14,1,0],[9,4,1,0,"get"],[9,7,1,0],[9,18,1,0,"get"],[9,19,1,0],[10,6,1,0],[10,13,1,0,"camelCaseToDashed"],[10,30,1,0],[11,4,1,0],[12,2,1,0],[13,2,4,0,"Object"],[13,8,4,0],[13,9,4,0,"defineProperty"],[13,23,4,0],[13,24,4,0,"exports"],[13,31,4,0],[14,4,4,0,"enumerable"],[14,14,4,0],[15,4,4,0,"get"],[15,7,4,0],[15,18,4,0,"get"],[15,19,4,0],[16,6,4,0],[16,13,4,0,"getBoundingClientRect"],[16,34,4,0],[17,4,4,0],[18,2,4,0],[19,2,33,0,"exports"],[19,9,33,0],[19,10,33,0,"remeasure"],[19,19,33,0],[19,22,33,0,"remeasure"],[19,31,33,0],[20,2,42,0,"exports"],[20,9,42,0],[20,10,42,0,"encodeSvg"],[20,19,42,0],[20,22,42,0,"encodeSvg"],[20,31,42,0],[21,2,1,7],[21,8,1,13,"camelCaseToDashed"],[21,25,1,30],[21,28,1,33,"camelCase"],[21,37,1,42],[21,41,1,46],[22,4,2,2],[22,11,2,9,"camelCase"],[22,20,2,18],[22,21,2,19,"replace"],[22,28,2,26],[22,29,2,27],[22,37,2,35],[22,39,2,37,"m"],[22,40,2,38],[22,44,2,42],[22,47,2,45],[22,50,2,48,"m"],[22,51,2,49],[22,52,2,50,"toLowerCase"],[22,63,2,61],[22,64,2,62],[22,65,2,63],[22,66,2,64],[23,2,3,0],[23,3,3,1],[24,2,4,7],[24,8,4,13,"getBoundingClientRect"],[24,29,4,34],[24,32,4,37,"node"],[24,36,4,41],[24,40,4,45],[25,4,5,2],[25,8,5,6,"node"],[25,12,5,10],[25,14,5,12],[26,6,6,4],[26,12,6,10,"isElement"],[26,21,6,19],[26,24,6,22,"node"],[26,28,6,26],[26,29,6,27,"nodeType"],[26,37,6,35],[26,42,6,40],[26,43,6,41],[26,44,6,42],[26,45,6,43],[27,6,7,4],[27,10,7,8,"isElement"],[27,19,7,17],[27,23,7,21],[27,30,7,28,"node"],[27,34,7,32],[27,35,7,33,"getBoundingClientRect"],[27,56,7,54],[27,61,7,59],[27,71,7,69],[27,73,7,71],[28,8,8,6],[28,15,8,13,"node"],[28,19,8,17],[28,20,8,18,"getBoundingClientRect"],[28,41,8,39],[28,42,8,40],[28,43,8,41],[29,6,9,4],[30,4,10,2],[31,4,11,2],[31,10,11,8],[31,14,11,12,"Error"],[31,19,11,17],[31,20,11,18],[31,56,11,54],[31,59,11,57,"node"],[31,63,11,61],[31,67,11,65],[31,78,11,76],[31,79,11,77],[32,2,12,0],[32,3,12,1],[33,2,13,0],[33,8,13,6,"measureLayout"],[33,21,13,19],[33,24,13,22,"measureLayout"],[33,25,13,23,"node"],[33,29,13,27],[33,31,13,29,"callback"],[33,39,13,37],[33,44,13,42],[34,4,14,2],[34,10,14,8,"relativeNode"],[34,22,14,20],[34,25,14,23,"node"],[34,29,14,27],[34,34,14,32],[34,38,14,36],[34,42,14,40,"node"],[34,46,14,44],[34,51,14,49],[34,56,14,54],[34,57,14,55],[34,60,14,58],[34,65,14,63],[34,66,14,64],[34,69,14,67,"node"],[34,73,14,71],[34,74,14,72,"parentNode"],[34,84,14,82],[35,4,15,2],[35,8,15,6,"relativeNode"],[35,20,15,18],[35,22,15,20],[36,6,16,4,"setTimeout"],[36,16,16,14],[36,17,16,15],[36,23,16,21],[37,8,17,6],[38,8,18,6],[38,14,18,12,"relativeRect"],[38,26,18,24],[38,29,18,27,"getBoundingClientRect"],[38,50,18,48],[38,51,18,49,"relativeNode"],[38,63,18,61],[38,64,18,62],[39,8,19,6],[39,14,19,12],[40,10,20,8,"height"],[40,16,20,14],[41,10,21,8,"left"],[41,14,21,12],[42,10,22,8,"top"],[42,13,22,11],[43,10,23,8,"width"],[44,8,24,6],[44,9,24,7],[44,12,24,10,"getBoundingClientRect"],[44,33,24,31],[44,34,24,32,"node"],[44,38,24,36],[44,39,24,37],[45,8,25,6],[45,14,25,12,"x"],[45,15,25,13],[45,18,25,16,"left"],[45,22,25,20],[45,25,25,23,"relativeRect"],[45,37,25,35],[45,38,25,36,"left"],[45,42,25,40],[46,8,26,6],[46,14,26,12,"y"],[46,15,26,13],[46,18,26,16,"top"],[46,21,26,19],[46,24,26,22,"relativeRect"],[46,36,26,34],[46,37,26,35,"top"],[46,40,26,38],[47,8,27,6,"callback"],[47,16,27,14],[47,17,27,15,"x"],[47,18,27,16],[47,20,27,18,"y"],[47,21,27,19],[47,23,27,21,"width"],[47,28,27,26],[47,30,27,28,"height"],[47,36,27,34],[47,38,27,36,"left"],[47,42,27,40],[47,44,27,42,"top"],[47,47,27,45],[47,48,27,46],[48,6,28,4],[48,7,28,5],[48,9,28,7],[48,10,28,8],[48,11,28,9],[49,4,29,2],[50,2,30,0],[50,3,30,1],[52,2,32,0],[53,2,33,7],[53,11,33,16,"remeasure"],[53,20,33,25,"remeasure"],[53,21,33,25],[53,23,33,28],[54,4,34,2],[54,10,34,8,"tag"],[54,13,34,11],[54,16,34,14],[54,20,34,18],[54,21,34,19,"state"],[54,26,34,24],[54,27,34,25,"touchable"],[54,36,34,34],[54,37,34,35,"responderID"],[54,48,34,46],[55,4,35,2],[55,8,35,6,"tag"],[55,11,35,9],[55,16,35,14],[55,20,35,18],[55,22,35,20],[56,6,36,4],[57,4,37,2],[58,4,38,2,"measureLayout"],[58,17,38,15],[58,18,38,16,"tag"],[58,21,38,19],[58,23,38,21],[58,27,38,25],[58,28,38,26,"_handleQueryLayout"],[58,46,38,44],[58,47,38,45],[59,2,39,0],[61,2,41,0],[62,2,42,7],[62,11,42,16,"encodeSvg"],[62,20,42,25,"encodeSvg"],[62,21,42,26,"svgString"],[62,30,42,35],[62,32,42,37],[63,4,43,2],[63,11,43,9,"svgString"],[63,20,43,18],[63,21,43,19,"replace"],[63,28,43,26],[63,29,43,27],[63,35,43,33],[63,37,43,35],[63,38,43,36,"svgString"],[63,47,43,45],[63,48,43,46,"indexOf"],[63,55,43,53],[63,56,43,54],[63,63,43,61],[63,64,43,62],[63,67,43,65],[63,73,43,71],[63,76,43,74],[63,117,43,115],[63,118,43,116],[63,119,43,117,"replace"],[63,126,43,124],[63,127,43,125],[63,131,43,129],[63,133,43,131],[63,136,43,134],[63,137,43,135],[63,138,43,136,"replace"],[63,145,43,143],[63,146,43,144],[63,150,43,148],[63,152,43,150],[63,157,43,155],[63,158,43,156],[63,159,43,157,"replace"],[63,166,43,164],[63,167,43,165],[63,171,43,169],[63,173,43,171],[63,178,43,176],[63,179,43,177],[63,180,43,178,"replace"],[63,187,43,185],[63,188,43,186],[63,192,43,190],[63,194,43,192],[63,199,43,197],[63,200,43,198],[63,201,43,199,"replace"],[63,208,43,206],[63,209,43,207],[63,213,43,211],[63,215,43,213],[63,220,43,218],[63,221,43,219],[63,222,43,220,"replace"],[63,229,43,227],[63,230,43,228],[63,234,43,232],[63,236,43,234],[63,241,43,239],[63,242,43,240],[63,243,43,241,"replace"],[63,250,43,248],[63,251,43,249],[63,255,43,253],[63,257,43,255],[63,262,43,260],[63,263,43,261],[63,264,43,262,"replace"],[63,271,43,269],[63,272,43,270],[63,278,43,276],[63,280,43,278],[63,283,43,281],[63,284,43,282],[64,2,44,0],[65,0,44,1],[65,3]],"functionMap":{"names":["<global>","camelCaseToDashed","camelCase.replace$argument_1","getBoundingClientRect","measureLayout","setTimeout$argument_0","remeasure","encodeSvg"],"mappings":"AAA,iCC;qCCC,0BD;CDC;qCGC;CHQ;sBIC;eCG;KDY;CJE;OMG;CNM;OOG;CPE"},"hasCjsExports":false},"type":"js/module"}]}