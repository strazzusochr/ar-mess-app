{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":53,"index":53}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/DeviceEventEmitter","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"oyzjoDTnmzvralkBUpVLTrRSEl0=","exportNames":["*"],"imports":1}},{"name":"./Audio/RecordingConstants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":105},"end":{"line":3,"column":69,"index":174}}],"key":"PLZx+w+meD0mX+Vfg7jl8Oy4mG0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  const _excluded = [\"uri\"];\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _babelRuntimeHelpersObjectWithoutPropertiesLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\n  var _objectWithoutPropertiesLoose = _interopDefault(_babelRuntimeHelpersObjectWithoutPropertiesLoose);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _reactNativeWebDistExportsDeviceEventEmitter = require(_dependencyMap[2], \"react-native-web/dist/exports/DeviceEventEmitter\");\n  var DeviceEventEmitter = _interopDefault(_reactNativeWebDistExportsDeviceEventEmitter);\n  var _AudioRecordingConstants = require(_dependencyMap[3], \"./Audio/RecordingConstants\");\n  async function getPermissionWithQueryAsync(name) {\n    if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n    try {\n      const {\n        state\n      } = await navigator.permissions.query({\n        name\n      });\n      switch (state) {\n        case 'granted':\n          return _expoModulesCore.PermissionStatus.GRANTED;\n        case 'denied':\n          return _expoModulesCore.PermissionStatus.DENIED;\n        default:\n          return _expoModulesCore.PermissionStatus.UNDETERMINED;\n      }\n    } catch {\n      // Firefox - TypeError: 'microphone' (value of 'name' member of PermissionDescriptor) is not a valid value for enumeration PermissionName.\n      return _expoModulesCore.PermissionStatus.UNDETERMINED;\n    }\n  }\n  function getUserMedia(constraints) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      return navigator.mediaDevices.getUserMedia(constraints);\n    }\n    // Some browsers partially implement mediaDevices. We can't just assign an object\n    // with getUserMedia as it would overwrite existing properties.\n    // Here, we will just add the getUserMedia property if it's missing.\n    // First get ahold of the legacy getUserMedia, if present\n    const getUserMedia =\n    // TODO: this method is deprecated, migrate to https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n      const error = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n    return new Promise((resolve, reject) => {\n      // TODO(@kitten): The types indicates that this is incorrect.\n      // Please check whether this is correct!\n      // @ts-expect-error: The `successCallback` doesn't match a `resolve` function\n      getUserMedia.call(navigator, constraints, resolve, reject);\n    });\n  }\n  function getStatusFromMedia(media) {\n    if (!media) {\n      return {\n        isLoaded: false,\n        error: undefined\n      };\n    }\n    const isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n    const status = {\n      isLoaded: true,\n      uri: media.src,\n      progressUpdateIntervalMillis: 100,\n      //TODO: Bacon: Add interval between calls\n      durationMillis: media.duration * 1000,\n      positionMillis: media.currentTime * 1000,\n      // playableDurationMillis: media.buffered * 1000,\n      // seekMillisToleranceBefore?: number\n      // seekMillisToleranceAfter?: number\n      shouldPlay: media.autoplay,\n      isPlaying,\n      isBuffering: false,\n      //media.waiting,\n      rate: media.playbackRate,\n      // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n      shouldCorrectPitch: false,\n      volume: media.volume,\n      audioPan: 0,\n      isMuted: media.muted,\n      isLooping: media.loop,\n      didJustFinish: media.ended\n    };\n    return status;\n  }\n  async function setStatusForMedia(media, status) {\n    if (status.positionMillis !== undefined) {\n      media.currentTime = status.positionMillis / 1000;\n    }\n    // if (status.progressUpdateIntervalMillis !== undefined) {\n    //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n    // }\n    // if (status.seekMillisToleranceBefore !== undefined) {\n    //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n    // }\n    // if (status.seekMillisToleranceAfter !== undefined) {\n    //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n    // }\n    // if (status.shouldCorrectPitch !== undefined) {\n    //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n    // }\n    if (status.shouldPlay !== undefined) {\n      if (status.shouldPlay) {\n        await media.play();\n      } else {\n        await media.pause();\n      }\n    }\n    if (status.rate !== undefined) {\n      media.playbackRate = status.rate;\n    }\n    if (status.shouldCorrectPitch !== undefined) {\n      media.preservesPitch = status.shouldCorrectPitch;\n    }\n    if (status.volume !== undefined) {\n      media.volume = status.volume;\n    }\n    if (status.isMuted !== undefined) {\n      media.muted = status.isMuted;\n    }\n    if (status.isLooping !== undefined) {\n      media.loop = status.isLooping;\n    }\n    return getStatusFromMedia(media);\n  }\n  let mediaRecorder = null;\n  let mediaRecorderUptimeOfLastStartResume = 0;\n  let mediaRecorderDurationAlreadyRecorded = 0;\n  let mediaRecorderIsRecording = false;\n  function getAudioRecorderDurationMillis() {\n    let duration = mediaRecorderDurationAlreadyRecorded;\n    if (mediaRecorderIsRecording && mediaRecorderUptimeOfLastStartResume > 0) {\n      duration += Date.now() - mediaRecorderUptimeOfLastStartResume;\n    }\n    return duration;\n  }\n  var _default = {\n    async getStatusForVideo(element) {\n      return getStatusFromMedia(element);\n    },\n    async loadForVideo(element, nativeSource, fullInitialStatus) {\n      return getStatusFromMedia(element);\n    },\n    async unloadForVideo(element) {\n      return getStatusFromMedia(element);\n    },\n    async setStatusForVideo(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    async replayVideo(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    /* Audio */\n    async setAudioMode() {},\n    async setAudioIsEnabled() {},\n    async getStatusForSound(element) {\n      return getStatusFromMedia(element);\n    },\n    async loadForSound(nativeSource, fullInitialStatus) {\n      const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n      const media = new Audio(source);\n      media.ontimeupdate = () => {\n        DeviceEventEmitter.default.emit('didUpdatePlaybackStatus', {\n          key: media,\n          status: getStatusFromMedia(media)\n        });\n      };\n      media.onerror = () => {\n        DeviceEventEmitter.default.emit('ExponentAV.onError', {\n          key: media,\n          error: media.error.message\n        });\n      };\n      const status = await setStatusForMedia(media, fullInitialStatus);\n      return [media, status];\n    },\n    async unloadForSound(element) {\n      element.pause();\n      element.removeAttribute('src');\n      element.load();\n      return getStatusFromMedia(element);\n    },\n    async setStatusForSound(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    async replaySound(element, status) {\n      return setStatusForMedia(element, status);\n    },\n    /* Recording */\n    //   async setUnloadedCallbackForAndroidRecording() {},\n    async getAudioRecordingStatus() {\n      return {\n        canRecord: mediaRecorder?.state === 'recording' || mediaRecorder?.state === 'inactive',\n        isRecording: mediaRecorder?.state === 'recording',\n        isDoneRecording: false,\n        durationMillis: getAudioRecorderDurationMillis(),\n        uri: null\n      };\n    },\n    // TODO(@kitten): Needs to be typed\n    async prepareAudioRecorder(options) {\n      if (typeof navigator !== 'undefined' && !navigator.mediaDevices) {\n        throw new Error('No media devices available');\n      }\n      mediaRecorderUptimeOfLastStartResume = 0;\n      mediaRecorderDurationAlreadyRecorded = 0;\n      const stream = await getUserMedia({\n        audio: true\n      });\n      mediaRecorder = new window.MediaRecorder(stream, options?.web || _AudioRecordingConstants.RecordingOptionsPresets.HIGH_QUALITY.web);\n      mediaRecorder.addEventListener('pause', () => {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n      });\n      mediaRecorder.addEventListener('resume', () => {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('start', () => {\n        mediaRecorderUptimeOfLastStartResume = Date.now();\n        mediaRecorderDurationAlreadyRecorded = 0;\n        mediaRecorderIsRecording = true;\n      });\n      mediaRecorder.addEventListener('stop', () => {\n        mediaRecorderDurationAlreadyRecorded = getAudioRecorderDurationMillis();\n        mediaRecorderIsRecording = false;\n        // Clears recording icon in Chrome tab\n        stream.getTracks().forEach(track => track.stop());\n      });\n      const _await$this$getAudioR = await this.getAudioRecordingStatus(),\n        status = (0, _objectWithoutPropertiesLoose.default)(_await$this$getAudioR, _excluded);\n      return {\n        uri: null,\n        status\n      };\n    },\n    async startAudioRecording() {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (mediaRecorder.state === 'paused') {\n        mediaRecorder.resume();\n      } else {\n        mediaRecorder.start();\n      }\n      return this.getAudioRecordingStatus();\n    },\n    async pauseAudioRecording() {\n      if (mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      // Set status to paused\n      mediaRecorder.pause();\n      return this.getAudioRecordingStatus();\n    },\n    async stopAudioRecording() {\n      const _mediaRecorder = mediaRecorder;\n      if (_mediaRecorder === null) {\n        throw new Error('Cannot start an audio recording without initializing a MediaRecorder. Run prepareToRecordAsync() before attempting to start an audio recording.');\n      }\n      if (_mediaRecorder.state === 'inactive') {\n        return this.getAudioRecordingStatus();\n      }\n      const dataPromise = new Promise(resolve => _mediaRecorder.addEventListener('dataavailable', e => resolve(e.data)));\n      _mediaRecorder.stop();\n      const data = await dataPromise;\n      const url = URL.createObjectURL(data);\n      return Object.assign({}, await this.getAudioRecordingStatus(), {\n        uri: url\n      });\n    },\n    async unloadAudioRecorder() {\n      mediaRecorder = null;\n    },\n    async getPermissionsAsync() {\n      const maybeStatus = await getPermissionWithQueryAsync('microphone');\n      switch (maybeStatus) {\n        case _expoModulesCore.PermissionStatus.GRANTED:\n          return {\n            status: _expoModulesCore.PermissionStatus.GRANTED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: true\n          };\n        case _expoModulesCore.PermissionStatus.DENIED:\n          return {\n            status: _expoModulesCore.PermissionStatus.DENIED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false\n          };\n        default:\n          return await this.requestPermissionsAsync();\n      }\n    },\n    async requestPermissionsAsync() {\n      try {\n        const stream = await getUserMedia({\n          audio: true\n        });\n        stream.getTracks().forEach(track => track.stop());\n        return {\n          status: _expoModulesCore.PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true\n        };\n      } catch {\n        return {\n          status: _expoModulesCore.PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        };\n      }\n    }\n  };\n});","lineCount":334,"map":[[13,2,135,0,"Object"],[13,8,135,0],[13,9,135,0,"defineProperty"],[13,23,135,0],[13,24,135,0,"exports"],[13,31,135,0],[14,4,135,0,"enumerable"],[14,14,135,0],[15,4,135,0,"get"],[15,7,135,0],[15,18,135,0,"get"],[15,19,135,0],[16,6,135,0],[16,13,135,0,"_default"],[16,21,135,0],[17,4,135,0],[18,2,135,0],[19,2,310,2],[19,6,310,2,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[19,54,310,2],[19,57,310,2,"require"],[19,64,310,2],[19,65,310,2,"_dependencyMap"],[19,79,310,2],[20,2,310,2],[20,6,310,2,"_objectWithoutPropertiesLoose"],[20,35,310,2],[20,38,310,2,"_interopDefault"],[20,53,310,2],[20,54,310,2,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[20,102,310,2],[21,2,1,0],[21,6,1,0,"_expoModulesCore"],[21,22,1,0],[21,25,1,0,"require"],[21,32,1,0],[21,33,1,0,"_dependencyMap"],[21,47,1,0],[22,2,1,53],[22,6,1,53,"_reactNativeWebDistExportsDeviceEventEmitter"],[22,50,1,53],[22,53,1,53,"require"],[22,60,1,53],[22,61,1,53,"_dependencyMap"],[22,75,1,53],[23,2,1,53],[23,6,1,53,"DeviceEventEmitter"],[23,24,1,53],[23,27,1,53,"_interopDefault"],[23,42,1,53],[23,43,1,53,"_reactNativeWebDistExportsDeviceEventEmitter"],[23,87,1,53],[24,2,3,0],[24,6,3,0,"_AudioRecordingConstants"],[24,30,3,0],[24,33,3,0,"require"],[24,40,3,0],[24,41,3,0,"_dependencyMap"],[24,55,3,0],[25,2,4,0],[25,17,4,15,"getPermissionWithQueryAsync"],[25,44,4,42,"getPermissionWithQueryAsync"],[25,45,4,43,"name"],[25,49,4,47],[25,51,4,49],[26,4,5,4],[26,8,5,8],[26,9,5,9,"navigator"],[26,18,5,18],[26,22,5,22],[26,23,5,23,"navigator"],[26,32,5,32],[26,33,5,33,"permissions"],[26,44,5,44],[26,48,5,48],[26,49,5,49,"navigator"],[26,58,5,58],[26,59,5,59,"permissions"],[26,70,5,70],[26,71,5,71,"query"],[26,76,5,76],[26,78,6,8],[26,85,6,15],[26,89,6,19],[27,4,7,4],[27,8,7,8],[28,6,8,8],[28,12,8,14],[29,8,8,16,"state"],[30,6,8,22],[30,7,8,23],[30,10,8,26],[30,16,8,32,"navigator"],[30,25,8,41],[30,26,8,42,"permissions"],[30,37,8,53],[30,38,8,54,"query"],[30,43,8,59],[30,44,8,60],[31,8,8,62,"name"],[32,6,8,67],[32,7,8,68],[32,8,8,69],[33,6,9,8],[33,14,9,16,"state"],[33,19,9,21],[34,8,10,12],[34,13,10,17],[34,22,10,26],[35,10,11,16],[35,17,11,23,"PermissionStatus"],[35,33,11,39],[35,34,11,39,"PermissionStatus"],[35,50,11,39],[35,51,11,40,"GRANTED"],[35,58,11,47],[36,8,12,12],[36,13,12,17],[36,21,12,25],[37,10,13,16],[37,17,13,23,"PermissionStatus"],[37,33,13,39],[37,34,13,39,"PermissionStatus"],[37,50,13,39],[37,51,13,40,"DENIED"],[37,57,13,46],[38,8,14,12],[39,10,15,16],[39,17,15,23,"PermissionStatus"],[39,33,15,39],[39,34,15,39,"PermissionStatus"],[39,50,15,39],[39,51,15,40,"UNDETERMINED"],[39,63,15,52],[40,6,16,8],[41,4,17,4],[41,5,17,5],[41,6,18,4],[41,12,18,10],[42,6,19,8],[43,6,20,8],[43,13,20,15,"PermissionStatus"],[43,29,20,31],[43,30,20,31,"PermissionStatus"],[43,46,20,31],[43,47,20,32,"UNDETERMINED"],[43,59,20,44],[44,4,21,4],[45,2,22,0],[46,2,23,0],[46,11,23,9,"getUserMedia"],[46,23,23,21,"getUserMedia"],[46,24,23,22,"constraints"],[46,35,23,33],[46,37,23,35],[47,4,24,4],[47,8,24,8,"navigator"],[47,17,24,17],[47,18,24,18,"mediaDevices"],[47,30,24,30],[47,34,24,34,"navigator"],[47,43,24,43],[47,44,24,44,"mediaDevices"],[47,56,24,56],[47,57,24,57,"getUserMedia"],[47,69,24,69],[47,71,24,71],[48,6,25,8],[48,13,25,15,"navigator"],[48,22,25,24],[48,23,25,25,"mediaDevices"],[48,35,25,37],[48,36,25,38,"getUserMedia"],[48,48,25,50],[48,49,25,51,"constraints"],[48,60,25,62],[48,61,25,63],[49,4,26,4],[50,4,27,4],[51,4,28,4],[52,4,29,4],[53,4,30,4],[54,4,31,4],[54,10,31,10,"getUserMedia"],[54,22,31,22],[55,4,32,4],[56,4,33,4,"navigator"],[56,13,33,13],[56,14,33,14,"getUserMedia"],[56,26,33,26],[56,30,34,8,"navigator"],[56,39,34,17],[56,40,34,18,"webkitGetUserMedia"],[56,58,34,36],[56,62,35,8,"navigator"],[56,71,35,17],[56,72,35,18,"mozGetUserMedia"],[56,87,35,33],[56,91,36,8],[56,103,36,20],[57,6,37,12],[57,12,37,18,"error"],[57,17,37,23],[57,20,37,26],[57,24,37,30,"Error"],[57,29,37,35],[57,30,37,36],[57,56,37,62],[57,57,37,63],[58,6,38,12,"error"],[58,11,38,17],[58,12,38,18,"code"],[58,16,38,22],[58,19,38,25],[58,20,38,26],[59,6,39,12,"error"],[59,11,39,17],[59,12,39,18,"name"],[59,16,39,22],[59,19,39,25],[59,36,39,42],[60,6,40,12],[60,12,40,18,"error"],[60,17,40,23],[61,4,41,8],[61,5,41,9],[62,4,42,4],[62,11,42,11],[62,15,42,15,"Promise"],[62,22,42,22],[62,23,42,23],[62,24,42,24,"resolve"],[62,31,42,31],[62,33,42,33,"reject"],[62,39,42,39],[62,44,42,44],[63,6,43,8],[64,6,44,8],[65,6,45,8],[66,6,46,8,"getUserMedia"],[66,18,46,20],[66,19,46,21,"call"],[66,23,46,25],[66,24,46,26,"navigator"],[66,33,46,35],[66,35,46,37,"constraints"],[66,46,46,48],[66,48,46,50,"resolve"],[66,55,46,57],[66,57,46,59,"reject"],[66,63,46,65],[66,64,46,66],[67,4,47,4],[67,5,47,5],[67,6,47,6],[68,2,48,0],[69,2,49,0],[69,11,49,9,"getStatusFromMedia"],[69,29,49,27,"getStatusFromMedia"],[69,30,49,28,"media"],[69,35,49,33],[69,37,49,35],[70,4,50,4],[70,8,50,8],[70,9,50,9,"media"],[70,14,50,14],[70,16,50,16],[71,6,51,8],[71,13,51,15],[72,8,52,12,"isLoaded"],[72,16,52,20],[72,18,52,22],[72,23,52,27],[73,8,53,12,"error"],[73,13,53,17],[73,15,53,19,"undefined"],[74,6,54,8],[74,7,54,9],[75,4,55,4],[76,4,56,4],[76,10,56,10,"isPlaying"],[76,19,56,19],[76,22,56,22],[76,23,56,23],[76,25,56,25,"media"],[76,30,56,30],[76,31,56,31,"currentTime"],[76,42,56,42],[76,45,56,45],[76,46,56,46],[76,50,57,8],[76,51,57,9,"media"],[76,56,57,14],[76,57,57,15,"paused"],[76,63,57,21],[76,67,58,8],[76,68,58,9,"media"],[76,73,58,14],[76,74,58,15,"ended"],[76,79,58,20],[76,83,59,8,"media"],[76,88,59,13],[76,89,59,14,"readyState"],[76,99,59,24],[76,102,59,27],[76,103,59,28],[76,104,59,29],[77,4,60,4],[77,10,60,10,"status"],[77,16,60,16],[77,19,60,19],[78,6,61,8,"isLoaded"],[78,14,61,16],[78,16,61,18],[78,20,61,22],[79,6,62,8,"uri"],[79,9,62,11],[79,11,62,13,"media"],[79,16,62,18],[79,17,62,19,"src"],[79,20,62,22],[80,6,63,8,"progressUpdateIntervalMillis"],[80,34,63,36],[80,36,63,38],[80,39,63,41],[81,6,63,43],[82,6,64,8,"durationMillis"],[82,20,64,22],[82,22,64,24,"media"],[82,27,64,29],[82,28,64,30,"duration"],[82,36,64,38],[82,39,64,41],[82,43,64,45],[83,6,65,8,"positionMillis"],[83,20,65,22],[83,22,65,24,"media"],[83,27,65,29],[83,28,65,30,"currentTime"],[83,39,65,41],[83,42,65,44],[83,46,65,48],[84,6,66,8],[85,6,67,8],[86,6,68,8],[87,6,69,8,"shouldPlay"],[87,16,69,18],[87,18,69,20,"media"],[87,23,69,25],[87,24,69,26,"autoplay"],[87,32,69,34],[88,6,70,8,"isPlaying"],[88,15,70,17],[89,6,71,8,"isBuffering"],[89,17,71,19],[89,19,71,21],[89,24,71,26],[90,6,71,28],[91,6,72,8,"rate"],[91,10,72,12],[91,12,72,14,"media"],[91,17,72,19],[91,18,72,20,"playbackRate"],[91,30,72,32],[92,6,73,8],[93,6,74,8,"shouldCorrectPitch"],[93,24,74,26],[93,26,74,28],[93,31,74,33],[94,6,75,8,"volume"],[94,12,75,14],[94,14,75,16,"media"],[94,19,75,21],[94,20,75,22,"volume"],[94,26,75,28],[95,6,76,8,"audioPan"],[95,14,76,16],[95,16,76,18],[95,17,76,19],[96,6,77,8,"isMuted"],[96,13,77,15],[96,15,77,17,"media"],[96,20,77,22],[96,21,77,23,"muted"],[96,26,77,28],[97,6,78,8,"isLooping"],[97,15,78,17],[97,17,78,19,"media"],[97,22,78,24],[97,23,78,25,"loop"],[97,27,78,29],[98,6,79,8,"didJustFinish"],[98,19,79,21],[98,21,79,23,"media"],[98,26,79,28],[98,27,79,29,"ended"],[99,4,80,4],[99,5,80,5],[100,4,81,4],[100,11,81,11,"status"],[100,17,81,17],[101,2,82,0],[102,2,83,0],[102,17,83,15,"setStatusForMedia"],[102,34,83,32,"setStatusForMedia"],[102,35,83,33,"media"],[102,40,83,38],[102,42,83,40,"status"],[102,48,83,46],[102,50,83,48],[103,4,84,4],[103,8,84,8,"status"],[103,14,84,14],[103,15,84,15,"positionMillis"],[103,29,84,29],[103,34,84,34,"undefined"],[103,43,84,43],[103,45,84,45],[104,6,85,8,"media"],[104,11,85,13],[104,12,85,14,"currentTime"],[104,23,85,25],[104,26,85,28,"status"],[104,32,85,34],[104,33,85,35,"positionMillis"],[104,47,85,49],[104,50,85,52],[104,54,85,56],[105,4,86,4],[106,4,87,4],[107,4,88,4],[108,4,89,4],[109,4,90,4],[110,4,91,4],[111,4,92,4],[112,4,93,4],[113,4,94,4],[114,4,95,4],[115,4,96,4],[116,4,97,4],[117,4,98,4],[118,4,99,4],[118,8,99,8,"status"],[118,14,99,14],[118,15,99,15,"shouldPlay"],[118,25,99,25],[118,30,99,30,"undefined"],[118,39,99,39],[118,41,99,41],[119,6,100,8],[119,10,100,12,"status"],[119,16,100,18],[119,17,100,19,"shouldPlay"],[119,27,100,29],[119,29,100,31],[120,8,101,12],[120,14,101,18,"media"],[120,19,101,23],[120,20,101,24,"play"],[120,24,101,28],[120,25,101,29],[120,26,101,30],[121,6,102,8],[121,7,102,9],[121,13,103,13],[122,8,104,12],[122,14,104,18,"media"],[122,19,104,23],[122,20,104,24,"pause"],[122,25,104,29],[122,26,104,30],[122,27,104,31],[123,6,105,8],[124,4,106,4],[125,4,107,4],[125,8,107,8,"status"],[125,14,107,14],[125,15,107,15,"rate"],[125,19,107,19],[125,24,107,24,"undefined"],[125,33,107,33],[125,35,107,35],[126,6,108,8,"media"],[126,11,108,13],[126,12,108,14,"playbackRate"],[126,24,108,26],[126,27,108,29,"status"],[126,33,108,35],[126,34,108,36,"rate"],[126,38,108,40],[127,4,109,4],[128,4,110,4],[128,8,110,8,"status"],[128,14,110,14],[128,15,110,15,"shouldCorrectPitch"],[128,33,110,33],[128,38,110,38,"undefined"],[128,47,110,47],[128,49,110,49],[129,6,111,8,"media"],[129,11,111,13],[129,12,111,14,"preservesPitch"],[129,26,111,28],[129,29,111,31,"status"],[129,35,111,37],[129,36,111,38,"shouldCorrectPitch"],[129,54,111,56],[130,4,112,4],[131,4,113,4],[131,8,113,8,"status"],[131,14,113,14],[131,15,113,15,"volume"],[131,21,113,21],[131,26,113,26,"undefined"],[131,35,113,35],[131,37,113,37],[132,6,114,8,"media"],[132,11,114,13],[132,12,114,14,"volume"],[132,18,114,20],[132,21,114,23,"status"],[132,27,114,29],[132,28,114,30,"volume"],[132,34,114,36],[133,4,115,4],[134,4,116,4],[134,8,116,8,"status"],[134,14,116,14],[134,15,116,15,"isMuted"],[134,22,116,22],[134,27,116,27,"undefined"],[134,36,116,36],[134,38,116,38],[135,6,117,8,"media"],[135,11,117,13],[135,12,117,14,"muted"],[135,17,117,19],[135,20,117,22,"status"],[135,26,117,28],[135,27,117,29,"isMuted"],[135,34,117,36],[136,4,118,4],[137,4,119,4],[137,8,119,8,"status"],[137,14,119,14],[137,15,119,15,"isLooping"],[137,24,119,24],[137,29,119,29,"undefined"],[137,38,119,38],[137,40,119,40],[138,6,120,8,"media"],[138,11,120,13],[138,12,120,14,"loop"],[138,16,120,18],[138,19,120,21,"status"],[138,25,120,27],[138,26,120,28,"isLooping"],[138,35,120,37],[139,4,121,4],[140,4,122,4],[140,11,122,11,"getStatusFromMedia"],[140,29,122,29],[140,30,122,30,"media"],[140,35,122,35],[140,36,122,36],[141,2,123,0],[142,2,124,0],[142,6,124,4,"mediaRecorder"],[142,19,124,17],[142,22,124,20],[142,26,124,24],[143,2,125,0],[143,6,125,4,"mediaRecorderUptimeOfLastStartResume"],[143,42,125,40],[143,45,125,43],[143,46,125,44],[144,2,126,0],[144,6,126,4,"mediaRecorderDurationAlreadyRecorded"],[144,42,126,40],[144,45,126,43],[144,46,126,44],[145,2,127,0],[145,6,127,4,"mediaRecorderIsRecording"],[145,30,127,28],[145,33,127,31],[145,38,127,36],[146,2,128,0],[146,11,128,9,"getAudioRecorderDurationMillis"],[146,41,128,39,"getAudioRecorderDurationMillis"],[146,42,128,39],[146,44,128,42],[147,4,129,4],[147,8,129,8,"duration"],[147,16,129,16],[147,19,129,19,"mediaRecorderDurationAlreadyRecorded"],[147,55,129,55],[148,4,130,4],[148,8,130,8,"mediaRecorderIsRecording"],[148,32,130,32],[148,36,130,36,"mediaRecorderUptimeOfLastStartResume"],[148,72,130,72],[148,75,130,75],[148,76,130,76],[148,78,130,78],[149,6,131,8,"duration"],[149,14,131,16],[149,18,131,20,"Date"],[149,22,131,24],[149,23,131,25,"now"],[149,26,131,28],[149,27,131,29],[149,28,131,30],[149,31,131,33,"mediaRecorderUptimeOfLastStartResume"],[149,67,131,69],[150,4,132,4],[151,4,133,4],[151,11,133,11,"duration"],[151,19,133,19],[152,2,134,0],[153,2,135,0],[153,6,135,0,"_default"],[153,14,135,0],[153,17,135,15],[154,4,136,4],[154,10,136,10,"getStatusForVideo"],[154,27,136,27,"getStatusForVideo"],[154,28,136,28,"element"],[154,35,136,35],[154,37,136,37],[155,6,137,8],[155,13,137,15,"getStatusFromMedia"],[155,31,137,33],[155,32,137,34,"element"],[155,39,137,41],[155,40,137,42],[156,4,138,4],[156,5,138,5],[157,4,139,4],[157,10,139,10,"loadForVideo"],[157,22,139,22,"loadForVideo"],[157,23,139,23,"element"],[157,30,139,30],[157,32,139,32,"nativeSource"],[157,44,139,44],[157,46,139,46,"fullInitialStatus"],[157,63,139,63],[157,65,139,65],[158,6,140,8],[158,13,140,15,"getStatusFromMedia"],[158,31,140,33],[158,32,140,34,"element"],[158,39,140,41],[158,40,140,42],[159,4,141,4],[159,5,141,5],[160,4,142,4],[160,10,142,10,"unloadForVideo"],[160,24,142,24,"unloadForVideo"],[160,25,142,25,"element"],[160,32,142,32],[160,34,142,34],[161,6,143,8],[161,13,143,15,"getStatusFromMedia"],[161,31,143,33],[161,32,143,34,"element"],[161,39,143,41],[161,40,143,42],[162,4,144,4],[162,5,144,5],[163,4,145,4],[163,10,145,10,"setStatusForVideo"],[163,27,145,27,"setStatusForVideo"],[163,28,145,28,"element"],[163,35,145,35],[163,37,145,37,"status"],[163,43,145,43],[163,45,145,45],[164,6,146,8],[164,13,146,15,"setStatusForMedia"],[164,30,146,32],[164,31,146,33,"element"],[164,38,146,40],[164,40,146,42,"status"],[164,46,146,48],[164,47,146,49],[165,4,147,4],[165,5,147,5],[166,4,148,4],[166,10,148,10,"replayVideo"],[166,21,148,21,"replayVideo"],[166,22,148,22,"element"],[166,29,148,29],[166,31,148,31,"status"],[166,37,148,37],[166,39,148,39],[167,6,149,8],[167,13,149,15,"setStatusForMedia"],[167,30,149,32],[167,31,149,33,"element"],[167,38,149,40],[167,40,149,42,"status"],[167,46,149,48],[167,47,149,49],[168,4,150,4],[168,5,150,5],[169,4,151,4],[170,4,152,4],[170,10,152,10,"setAudioMode"],[170,22,152,22,"setAudioMode"],[170,23,152,22],[170,25,152,25],[170,26,152,27],[170,27,152,28],[171,4,153,4],[171,10,153,10,"setAudioIsEnabled"],[171,27,153,27,"setAudioIsEnabled"],[171,28,153,27],[171,30,153,30],[171,31,153,32],[171,32,153,33],[172,4,154,4],[172,10,154,10,"getStatusForSound"],[172,27,154,27,"getStatusForSound"],[172,28,154,28,"element"],[172,35,154,35],[172,37,154,37],[173,6,155,8],[173,13,155,15,"getStatusFromMedia"],[173,31,155,33],[173,32,155,34,"element"],[173,39,155,41],[173,40,155,42],[174,4,156,4],[174,5,156,5],[175,4,157,4],[175,10,157,10,"loadForSound"],[175,22,157,22,"loadForSound"],[175,23,157,23,"nativeSource"],[175,35,157,35],[175,37,157,37,"fullInitialStatus"],[175,54,157,54],[175,56,157,56],[176,6,158,8],[176,12,158,14,"source"],[176,18,158,20],[176,21,158,23],[176,28,158,30,"nativeSource"],[176,40,158,42],[176,45,158,47],[176,53,158,55],[176,56,158,58,"nativeSource"],[176,68,158,70],[176,71,158,73,"nativeSource"],[176,83,158,85],[176,84,158,86,"uri"],[176,87,158,89],[177,6,159,8],[177,12,159,14,"media"],[177,17,159,19],[177,20,159,22],[177,24,159,26,"Audio"],[177,29,159,31],[177,30,159,32,"source"],[177,36,159,38],[177,37,159,39],[178,6,160,8,"media"],[178,11,160,13],[178,12,160,14,"ontimeupdate"],[178,24,160,26],[178,27,160,29],[178,33,160,35],[179,8,161,12,"DeviceEventEmitter"],[179,26,161,30],[179,27,161,30,"default"],[179,34,161,30],[179,35,161,31,"emit"],[179,39,161,35],[179,40,161,36],[179,65,161,61],[179,67,161,63],[180,10,162,16,"key"],[180,13,162,19],[180,15,162,21,"media"],[180,20,162,26],[181,10,163,16,"status"],[181,16,163,22],[181,18,163,24,"getStatusFromMedia"],[181,36,163,42],[181,37,163,43,"media"],[181,42,163,48],[182,8,164,12],[182,9,164,13],[182,10,164,14],[183,6,165,8],[183,7,165,9],[184,6,166,8,"media"],[184,11,166,13],[184,12,166,14,"onerror"],[184,19,166,21],[184,22,166,24],[184,28,166,30],[185,8,167,12,"DeviceEventEmitter"],[185,26,167,30],[185,27,167,30,"default"],[185,34,167,30],[185,35,167,31,"emit"],[185,39,167,35],[185,40,167,36],[185,60,167,56],[185,62,167,58],[186,10,168,16,"key"],[186,13,168,19],[186,15,168,21,"media"],[186,20,168,26],[187,10,169,16,"error"],[187,15,169,21],[187,17,169,23,"media"],[187,22,169,28],[187,23,169,29,"error"],[187,28,169,34],[187,29,169,35,"message"],[188,8,170,12],[188,9,170,13],[188,10,170,14],[189,6,171,8],[189,7,171,9],[190,6,172,8],[190,12,172,14,"status"],[190,18,172,20],[190,21,172,23],[190,27,172,29,"setStatusForMedia"],[190,44,172,46],[190,45,172,47,"media"],[190,50,172,52],[190,52,172,54,"fullInitialStatus"],[190,69,172,71],[190,70,172,72],[191,6,173,8],[191,13,173,15],[191,14,173,16,"media"],[191,19,173,21],[191,21,173,23,"status"],[191,27,173,29],[191,28,173,30],[192,4,174,4],[192,5,174,5],[193,4,175,4],[193,10,175,10,"unloadForSound"],[193,24,175,24,"unloadForSound"],[193,25,175,25,"element"],[193,32,175,32],[193,34,175,34],[194,6,176,8,"element"],[194,13,176,15],[194,14,176,16,"pause"],[194,19,176,21],[194,20,176,22],[194,21,176,23],[195,6,177,8,"element"],[195,13,177,15],[195,14,177,16,"removeAttribute"],[195,29,177,31],[195,30,177,32],[195,35,177,37],[195,36,177,38],[196,6,178,8,"element"],[196,13,178,15],[196,14,178,16,"load"],[196,18,178,20],[196,19,178,21],[196,20,178,22],[197,6,179,8],[197,13,179,15,"getStatusFromMedia"],[197,31,179,33],[197,32,179,34,"element"],[197,39,179,41],[197,40,179,42],[198,4,180,4],[198,5,180,5],[199,4,181,4],[199,10,181,10,"setStatusForSound"],[199,27,181,27,"setStatusForSound"],[199,28,181,28,"element"],[199,35,181,35],[199,37,181,37,"status"],[199,43,181,43],[199,45,181,45],[200,6,182,8],[200,13,182,15,"setStatusForMedia"],[200,30,182,32],[200,31,182,33,"element"],[200,38,182,40],[200,40,182,42,"status"],[200,46,182,48],[200,47,182,49],[201,4,183,4],[201,5,183,5],[202,4,184,4],[202,10,184,10,"replaySound"],[202,21,184,21,"replaySound"],[202,22,184,22,"element"],[202,29,184,29],[202,31,184,31,"status"],[202,37,184,37],[202,39,184,39],[203,6,185,8],[203,13,185,15,"setStatusForMedia"],[203,30,185,32],[203,31,185,33,"element"],[203,38,185,40],[203,40,185,42,"status"],[203,46,185,48],[203,47,185,49],[204,4,186,4],[204,5,186,5],[205,4,187,4],[206,4,188,4],[207,4,189,4],[207,10,189,10,"getAudioRecordingStatus"],[207,33,189,33,"getAudioRecordingStatus"],[207,34,189,33],[207,36,189,36],[208,6,190,8],[208,13,190,15],[209,8,191,12,"canRecord"],[209,17,191,21],[209,19,191,23,"mediaRecorder"],[209,32,191,36],[209,34,191,38,"state"],[209,39,191,43],[209,44,191,48],[209,55,191,59],[209,59,191,63,"mediaRecorder"],[209,72,191,76],[209,74,191,78,"state"],[209,79,191,83],[209,84,191,88],[209,94,191,98],[210,8,192,12,"isRecording"],[210,19,192,23],[210,21,192,25,"mediaRecorder"],[210,34,192,38],[210,36,192,40,"state"],[210,41,192,45],[210,46,192,50],[210,57,192,61],[211,8,193,12,"isDoneRecording"],[211,23,193,27],[211,25,193,29],[211,30,193,34],[212,8,194,12,"durationMillis"],[212,22,194,26],[212,24,194,28,"getAudioRecorderDurationMillis"],[212,54,194,58],[212,55,194,59],[212,56,194,60],[213,8,195,12,"uri"],[213,11,195,15],[213,13,195,17],[214,6,196,8],[214,7,196,9],[215,4,197,4],[215,5,197,5],[216,4,198,4],[217,4,199,4],[217,10,199,10,"prepareAudioRecorder"],[217,30,199,30,"prepareAudioRecorder"],[217,31,199,31,"options"],[217,38,199,38],[217,40,199,40],[218,6,200,8],[218,10,200,12],[218,17,200,19,"navigator"],[218,26,200,28],[218,31,200,33],[218,42,200,44],[218,46,200,48],[218,47,200,49,"navigator"],[218,56,200,58],[218,57,200,59,"mediaDevices"],[218,69,200,71],[218,71,200,73],[219,8,201,12],[219,14,201,18],[219,18,201,22,"Error"],[219,23,201,27],[219,24,201,28],[219,52,201,56],[219,53,201,57],[220,6,202,8],[221,6,203,8,"mediaRecorderUptimeOfLastStartResume"],[221,42,203,44],[221,45,203,47],[221,46,203,48],[222,6,204,8,"mediaRecorderDurationAlreadyRecorded"],[222,42,204,44],[222,45,204,47],[222,46,204,48],[223,6,205,8],[223,12,205,14,"stream"],[223,18,205,20],[223,21,205,23],[223,27,205,29,"getUserMedia"],[223,39,205,41],[223,40,205,42],[224,8,205,44,"audio"],[224,13,205,49],[224,15,205,51],[225,6,205,56],[225,7,205,57],[225,8,205,58],[226,6,206,8,"mediaRecorder"],[226,19,206,21],[226,22,206,24],[226,26,206,28,"window"],[226,32,206,34],[226,33,206,35,"MediaRecorder"],[226,46,206,48],[226,47,206,49,"stream"],[226,53,206,55],[226,55,206,57,"options"],[226,62,206,64],[226,64,206,66,"web"],[226,67,206,69],[226,71,206,73,"RecordingOptionsPresets"],[226,95,206,96],[226,96,206,96,"RecordingOptionsPresets"],[226,119,206,96],[226,120,206,97,"HIGH_QUALITY"],[226,132,206,109],[226,133,206,110,"web"],[226,136,206,113],[226,137,206,114],[227,6,207,8,"mediaRecorder"],[227,19,207,21],[227,20,207,22,"addEventListener"],[227,36,207,38],[227,37,207,39],[227,44,207,46],[227,46,207,48],[227,52,207,54],[228,8,208,12,"mediaRecorderDurationAlreadyRecorded"],[228,44,208,48],[228,47,208,51,"getAudioRecorderDurationMillis"],[228,77,208,81],[228,78,208,82],[228,79,208,83],[229,8,209,12,"mediaRecorderIsRecording"],[229,32,209,36],[229,35,209,39],[229,40,209,44],[230,6,210,8],[230,7,210,9],[230,8,210,10],[231,6,211,8,"mediaRecorder"],[231,19,211,21],[231,20,211,22,"addEventListener"],[231,36,211,38],[231,37,211,39],[231,45,211,47],[231,47,211,49],[231,53,211,55],[232,8,212,12,"mediaRecorderUptimeOfLastStartResume"],[232,44,212,48],[232,47,212,51,"Date"],[232,51,212,55],[232,52,212,56,"now"],[232,55,212,59],[232,56,212,60],[232,57,212,61],[233,8,213,12,"mediaRecorderIsRecording"],[233,32,213,36],[233,35,213,39],[233,39,213,43],[234,6,214,8],[234,7,214,9],[234,8,214,10],[235,6,215,8,"mediaRecorder"],[235,19,215,21],[235,20,215,22,"addEventListener"],[235,36,215,38],[235,37,215,39],[235,44,215,46],[235,46,215,48],[235,52,215,54],[236,8,216,12,"mediaRecorderUptimeOfLastStartResume"],[236,44,216,48],[236,47,216,51,"Date"],[236,51,216,55],[236,52,216,56,"now"],[236,55,216,59],[236,56,216,60],[236,57,216,61],[237,8,217,12,"mediaRecorderDurationAlreadyRecorded"],[237,44,217,48],[237,47,217,51],[237,48,217,52],[238,8,218,12,"mediaRecorderIsRecording"],[238,32,218,36],[238,35,218,39],[238,39,218,43],[239,6,219,8],[239,7,219,9],[239,8,219,10],[240,6,220,8,"mediaRecorder"],[240,19,220,21],[240,20,220,22,"addEventListener"],[240,36,220,38],[240,37,220,39],[240,43,220,45],[240,45,220,47],[240,51,220,53],[241,8,221,12,"mediaRecorderDurationAlreadyRecorded"],[241,44,221,48],[241,47,221,51,"getAudioRecorderDurationMillis"],[241,77,221,81],[241,78,221,82],[241,79,221,83],[242,8,222,12,"mediaRecorderIsRecording"],[242,32,222,36],[242,35,222,39],[242,40,222,44],[243,8,223,12],[244,8,224,12,"stream"],[244,14,224,18],[244,15,224,19,"getTracks"],[244,24,224,28],[244,25,224,29],[244,26,224,30],[244,27,224,31,"forEach"],[244,34,224,38],[244,35,224,40,"track"],[244,40,224,45],[244,44,224,50,"track"],[244,49,224,55],[244,50,224,56,"stop"],[244,54,224,60],[244,55,224,61],[244,56,224,62],[244,57,224,63],[245,6,225,8],[245,7,225,9],[245,8,225,10],[246,6,226,8],[246,12,226,8,"_await$this$getAudioR"],[246,33,226,8],[246,36,226,35],[246,42,226,41],[246,46,226,45],[246,47,226,46,"getAudioRecordingStatus"],[246,70,226,69],[246,71,226,70],[246,72,226,71],[247,8,226,24,"status"],[247,14,226,30],[247,21,226,30,"_objectWithoutPropertiesLoose"],[247,50,226,30],[247,51,226,30,"default"],[247,58,226,30],[247,60,226,30,"_await$this$getAudioR"],[247,81,226,30],[247,83,226,30,"_excluded"],[247,92,226,30],[248,6,227,8],[248,13,227,15],[249,8,227,17,"uri"],[249,11,227,20],[249,13,227,22],[249,17,227,26],[250,8,227,28,"status"],[251,6,227,35],[251,7,227,36],[252,4,228,4],[252,5,228,5],[253,4,229,4],[253,10,229,10,"startAudioRecording"],[253,29,229,29,"startAudioRecording"],[253,30,229,29],[253,32,229,32],[254,6,230,8],[254,10,230,12,"mediaRecorder"],[254,23,230,25],[254,28,230,30],[254,32,230,34],[254,34,230,36],[255,8,231,12],[255,14,231,18],[255,18,231,22,"Error"],[255,23,231,27],[255,24,231,28],[255,169,231,173],[255,170,231,174],[256,6,232,8],[257,6,233,8],[257,10,233,12,"mediaRecorder"],[257,23,233,25],[257,24,233,26,"state"],[257,29,233,31],[257,34,233,36],[257,42,233,44],[257,44,233,46],[258,8,234,12,"mediaRecorder"],[258,21,234,25],[258,22,234,26,"resume"],[258,28,234,32],[258,29,234,33],[258,30,234,34],[259,6,235,8],[259,7,235,9],[259,13,236,13],[260,8,237,12,"mediaRecorder"],[260,21,237,25],[260,22,237,26,"start"],[260,27,237,31],[260,28,237,32],[260,29,237,33],[261,6,238,8],[262,6,239,8],[262,13,239,15],[262,17,239,19],[262,18,239,20,"getAudioRecordingStatus"],[262,41,239,43],[262,42,239,44],[262,43,239,45],[263,4,240,4],[263,5,240,5],[264,4,241,4],[264,10,241,10,"pauseAudioRecording"],[264,29,241,29,"pauseAudioRecording"],[264,30,241,29],[264,32,241,32],[265,6,242,8],[265,10,242,12,"mediaRecorder"],[265,23,242,25],[265,28,242,30],[265,32,242,34],[265,34,242,36],[266,8,243,12],[266,14,243,18],[266,18,243,22,"Error"],[266,23,243,27],[266,24,243,28],[266,169,243,173],[266,170,243,174],[267,6,244,8],[268,6,245,8],[269,6,246,8,"mediaRecorder"],[269,19,246,21],[269,20,246,22,"pause"],[269,25,246,27],[269,26,246,28],[269,27,246,29],[270,6,247,8],[270,13,247,15],[270,17,247,19],[270,18,247,20,"getAudioRecordingStatus"],[270,41,247,43],[270,42,247,44],[270,43,247,45],[271,4,248,4],[271,5,248,5],[272,4,249,4],[272,10,249,10,"stopAudioRecording"],[272,28,249,28,"stopAudioRecording"],[272,29,249,28],[272,31,249,31],[273,6,250,8],[273,12,250,14,"_mediaRecorder"],[273,26,250,28],[273,29,250,31,"mediaRecorder"],[273,42,250,44],[274,6,251,8],[274,10,251,12,"_mediaRecorder"],[274,24,251,26],[274,29,251,31],[274,33,251,35],[274,35,251,37],[275,8,252,12],[275,14,252,18],[275,18,252,22,"Error"],[275,23,252,27],[275,24,252,28],[275,169,252,173],[275,170,252,174],[276,6,253,8],[277,6,254,8],[277,10,254,12,"_mediaRecorder"],[277,24,254,26],[277,25,254,27,"state"],[277,30,254,32],[277,35,254,37],[277,45,254,47],[277,47,254,49],[278,8,255,12],[278,15,255,19],[278,19,255,23],[278,20,255,24,"getAudioRecordingStatus"],[278,43,255,47],[278,44,255,48],[278,45,255,49],[279,6,256,8],[280,6,257,8],[280,12,257,14,"dataPromise"],[280,23,257,25],[280,26,257,28],[280,30,257,32,"Promise"],[280,37,257,39],[280,38,257,41,"resolve"],[280,45,257,48],[280,49,257,53,"_mediaRecorder"],[280,63,257,67],[280,64,257,68,"addEventListener"],[280,80,257,84],[280,81,257,85],[280,96,257,100],[280,98,257,103,"e"],[280,99,257,104],[280,103,257,109,"resolve"],[280,110,257,116],[280,111,257,117,"e"],[280,112,257,118],[280,113,257,119,"data"],[280,117,257,123],[280,118,257,124],[280,119,257,125],[280,120,257,126],[281,6,258,8,"_mediaRecorder"],[281,20,258,22],[281,21,258,23,"stop"],[281,25,258,27],[281,26,258,28],[281,27,258,29],[282,6,259,8],[282,12,259,14,"data"],[282,16,259,18],[282,19,259,21],[282,25,259,27,"dataPromise"],[282,36,259,38],[283,6,260,8],[283,12,260,14,"url"],[283,15,260,17],[283,18,260,20,"URL"],[283,21,260,23],[283,22,260,24,"createObjectURL"],[283,37,260,39],[283,38,260,40,"data"],[283,42,260,44],[283,43,260,45],[284,6,261,8],[284,13,261,8,"Object"],[284,19,261,8],[284,20,261,8,"assign"],[284,26,261,8],[284,31,262,16],[284,37,262,22],[284,41,262,26],[284,42,262,27,"getAudioRecordingStatus"],[284,65,262,50],[284,66,262,51],[284,67,262,52],[285,8,263,12,"uri"],[285,11,263,15],[285,13,263,17,"url"],[286,6,263,20],[287,4,265,4],[287,5,265,5],[288,4,266,4],[288,10,266,10,"unloadAudioRecorder"],[288,29,266,29,"unloadAudioRecorder"],[288,30,266,29],[288,32,266,32],[289,6,267,8,"mediaRecorder"],[289,19,267,21],[289,22,267,24],[289,26,267,28],[290,4,268,4],[290,5,268,5],[291,4,269,4],[291,10,269,10,"getPermissionsAsync"],[291,29,269,29,"getPermissionsAsync"],[291,30,269,29],[291,32,269,32],[292,6,270,8],[292,12,270,14,"maybeStatus"],[292,23,270,25],[292,26,270,28],[292,32,270,34,"getPermissionWithQueryAsync"],[292,59,270,61],[292,60,270,62],[292,72,270,74],[292,73,270,75],[293,6,271,8],[293,14,271,16,"maybeStatus"],[293,25,271,27],[294,8,272,12],[294,13,272,17,"PermissionStatus"],[294,29,272,33],[294,30,272,33,"PermissionStatus"],[294,46,272,33],[294,47,272,34,"GRANTED"],[294,54,272,41],[295,10,273,16],[295,17,273,23],[296,12,274,20,"status"],[296,18,274,26],[296,20,274,28,"PermissionStatus"],[296,36,274,44],[296,37,274,44,"PermissionStatus"],[296,53,274,44],[296,54,274,45,"GRANTED"],[296,61,274,52],[297,12,275,20,"expires"],[297,19,275,27],[297,21,275,29],[297,28,275,36],[298,12,276,20,"canAskAgain"],[298,23,276,31],[298,25,276,33],[298,29,276,37],[299,12,277,20,"granted"],[299,19,277,27],[299,21,277,29],[300,10,278,16],[300,11,278,17],[301,8,279,12],[301,13,279,17,"PermissionStatus"],[301,29,279,33],[301,30,279,33,"PermissionStatus"],[301,46,279,33],[301,47,279,34,"DENIED"],[301,53,279,40],[302,10,280,16],[302,17,280,23],[303,12,281,20,"status"],[303,18,281,26],[303,20,281,28,"PermissionStatus"],[303,36,281,44],[303,37,281,44,"PermissionStatus"],[303,53,281,44],[303,54,281,45,"DENIED"],[303,60,281,51],[304,12,282,20,"expires"],[304,19,282,27],[304,21,282,29],[304,28,282,36],[305,12,283,20,"canAskAgain"],[305,23,283,31],[305,25,283,33],[305,29,283,37],[306,12,284,20,"granted"],[306,19,284,27],[306,21,284,29],[307,10,285,16],[307,11,285,17],[308,8,286,12],[309,10,287,16],[309,17,287,23],[309,23,287,29],[309,27,287,33],[309,28,287,34,"requestPermissionsAsync"],[309,51,287,57],[309,52,287,58],[309,53,287,59],[310,6,288,8],[311,4,289,4],[311,5,289,5],[312,4,290,4],[312,10,290,10,"requestPermissionsAsync"],[312,33,290,33,"requestPermissionsAsync"],[312,34,290,33],[312,36,290,36],[313,6,291,8],[313,10,291,12],[314,8,292,12],[314,14,292,18,"stream"],[314,20,292,24],[314,23,292,27],[314,29,292,33,"getUserMedia"],[314,41,292,45],[314,42,292,46],[315,10,292,48,"audio"],[315,15,292,53],[315,17,292,55],[316,8,292,60],[316,9,292,61],[316,10,292,62],[317,8,293,12,"stream"],[317,14,293,18],[317,15,293,19,"getTracks"],[317,24,293,28],[317,25,293,29],[317,26,293,30],[317,27,293,31,"forEach"],[317,34,293,38],[317,35,293,40,"track"],[317,40,293,45],[317,44,293,50,"track"],[317,49,293,55],[317,50,293,56,"stop"],[317,54,293,60],[317,55,293,61],[317,56,293,62],[317,57,293,63],[318,8,294,12],[318,15,294,19],[319,10,295,16,"status"],[319,16,295,22],[319,18,295,24,"PermissionStatus"],[319,34,295,40],[319,35,295,40,"PermissionStatus"],[319,51,295,40],[319,52,295,41,"GRANTED"],[319,59,295,48],[320,10,296,16,"expires"],[320,17,296,23],[320,19,296,25],[320,26,296,32],[321,10,297,16,"canAskAgain"],[321,21,297,27],[321,23,297,29],[321,27,297,33],[322,10,298,16,"granted"],[322,17,298,23],[322,19,298,25],[323,8,299,12],[323,9,299,13],[324,6,300,8],[324,7,300,9],[324,8,301,8],[324,14,301,14],[325,8,302,12],[325,15,302,19],[326,10,303,16,"status"],[326,16,303,22],[326,18,303,24,"PermissionStatus"],[326,34,303,40],[326,35,303,40,"PermissionStatus"],[326,51,303,40],[326,52,303,41,"DENIED"],[326,58,303,47],[327,10,304,16,"expires"],[327,17,304,23],[327,19,304,25],[327,26,304,32],[328,10,305,16,"canAskAgain"],[328,21,305,27],[328,23,305,29],[328,27,305,33],[329,10,306,16,"granted"],[329,17,306,23],[329,19,306,25],[330,8,307,12],[330,9,307,13],[331,6,308,8],[332,4,309,4],[333,2,310,0],[333,3,310,1],[334,0,310,2],[334,3]],"functionMap":{"names":["<global>","getPermissionWithQueryAsync","getUserMedia","<anonymous>","Promise$argument_0","getStatusFromMedia","setStatusForMedia","getAudioRecorderDurationMillis","default.getStatusForVideo","default.loadForVideo","default.unloadForVideo","default.setStatusForVideo","default.replayVideo","default.setAudioMode","default.setAudioIsEnabled","default.getStatusForSound","default.loadForSound","media.ontimeupdate","media.onerror","default.unloadForSound","default.setStatusForSound","default.replaySound","default.getAudioRecordingStatus","default.prepareAudioRecorder","mediaRecorder.addEventListener$argument_1","stream.getTracks.forEach$argument_0","default.startAudioRecording","default.pauseAudioRecording","default.stopAudioRecording","_mediaRecorder.addEventListener$argument_1","default.unloadAudioRecorder","default.getPermissionsAsync","default.requestPermissionsAsync"],"mappings":"AAA;ACG;CDkB;AEC;QCa;SDK;uBEC;KFK;CFC;AKC;CLiC;AMC;CNwC;AOK;CPM;IQE;KRE;ISC;KTE;IUC;KVE;IWC;KXE;IYC;KZE;IaE,wBb;IcC,6Bd;IeC;KfE;IgBC;6BCG;SDK;wBEC;SFK;KhBG;ImBC;KnBK;IoBC;KpBE;IqBC;KrBE;IsBG;KtBQ;IuBE;gDCQ;SDG;iDCC;SDG;gDCC;SDI;+CCC;uCCI,uBD;SDC;KvBG;I0BC;K1BW;I2BC;K3BO;I4BC;wCxBQ,8DyB,sBzB,CwB;K5BQ;I8BC;K9BE;I+BC;K/BoB;IgCC;uCPG,uBO;KhCgB"},"hasCjsExports":false},"type":"js/module"}]}