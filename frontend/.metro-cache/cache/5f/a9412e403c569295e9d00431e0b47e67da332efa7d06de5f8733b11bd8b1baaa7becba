{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./AudioAvailability","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":61,"index":148}}],"key":"bSBjZOQMb5YC9PXMSfyUskC29qA=","exportNames":["*"],"imports":1}},{"name":"../AV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":149},"end":{"line":3,"column":135,"index":284}}],"key":"CKKx7GRKZ+dPvq8Nb7FmQZUl2kI=","exportNames":["*"],"imports":1}},{"name":"../ExponentAV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":285},"end":{"line":4,"column":39,"index":324}}],"key":"EFxOD5hqmWNncIOpuO+BTl9k+bk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _Sound;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"Sound\", {\n    enumerable: true,\n    get: function () {\n      return Sound;\n    }\n  });\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _expoModulesCore = require(_dependencyMap[4], \"expo-modules-core\");\n  var _AudioAvailability = require(_dependencyMap[5], \"./AudioAvailability\");\n  var _AV = require(_dependencyMap[6], \"../AV\");\n  var _ExponentAV = require(_dependencyMap[7], \"../ExponentAV\");\n  var ExponentAV = _interopDefault(_ExponentAV);\n  // @needsAudit\n  /**\n   * This class represents a sound corresponding to an Asset or URL.\n   * @return A newly constructed instance of `Audio.Sound`.\n   *\n   * @example\n   * ```ts\n   * const sound = new Audio.Sound();\n   * try {\n   *   await sound.loadAsync(require('./assets/sounds/hello.mp3'));\n   *   await sound.playAsync();\n   *   // Your sound is playing!\n   *\n   *   // Don't forget to unload the sound from memory\n   *   // when you are done using the Sound object\n   *   await sound.unloadAsync();\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * > Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`.\n   * > See the [AV documentation](/versions/latest/sdk/av) for further information.\n   */\n  var Sound = /*#__PURE__*/function () {\n    function Sound() {\n      var _this = this;\n      (0, _classCallCheck.default)(this, Sound);\n      this._loaded = false;\n      this._loading = false;\n      this._key = null;\n      this._lastStatusUpdate = null;\n      this._lastStatusUpdateTime = null;\n      this._subscriptions = [];\n      this._eventEmitter = new _expoModulesCore.LegacyEventEmitter(ExponentAV.default);\n      this._coalesceStatusUpdatesInMillis = 100;\n      this._onPlaybackStatusUpdate = null;\n      this._onMetadataUpdate = null;\n      this._onAudioSampleReceived = null;\n      this._internalStatusUpdateCallback = _ref => {\n        var key = _ref.key,\n          status = _ref.status;\n        if (this._key === key) {\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n        }\n      };\n      this._internalMetadataUpdateCallback = _ref2 => {\n        var key = _ref2.key,\n          metadata = _ref2.metadata;\n        if (this._key === key) {\n          this._onMetadataUpdate?.(metadata);\n        }\n      };\n      this._internalErrorCallback = _ref3 => {\n        var key = _ref3.key,\n          error = _ref3.error;\n        if (this._key === key) {\n          this._errorCallback(error);\n        }\n      };\n      this._errorCallback = error => {\n        this._clearSubscriptions();\n        this._loaded = false;\n        this._key = null;\n        this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));\n      };\n      // ### Unified playback API ### (consistent with Video.js)\n      // All calls automatically call onPlaybackStatusUpdate as a side effect.\n      // Get status API\n      this.getStatusAsync = /*#__PURE__*/(0, _asyncToGenerator.default)(function* () {\n        if (_this._loaded) {\n          return _this._performOperationAndHandleStatusAsync(() => ExponentAV.default.getStatusForSound(_this._key));\n        }\n        var status = (0, _AV.getUnloadedStatus)();\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n        return status;\n      });\n    }\n    return (0, _createClass.default)(Sound, [{\n      key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n      value:\n      // Internal methods\n      function _callOnPlaybackStatusUpdateForNewStatus(status) {\n        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n          this._onPlaybackStatusUpdate(status);\n          this._lastStatusUpdateTime = new Date();\n          this._lastStatusUpdate = JSON.stringify(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function () {\n        var _performOperationAndHandleStatusAsync2 = (0, _asyncToGenerator.default)(function* (operation) {\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._loaded) {\n            var status = yield operation();\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            return status;\n          } else {\n            throw new Error('Cannot complete operation because sound is not loaded.');\n          }\n        });\n        function _performOperationAndHandleStatusAsync(_x) {\n          return _performOperationAndHandleStatusAsync2.apply(this, arguments);\n        }\n        return _performOperationAndHandleStatusAsync;\n      }()\n    }, {\n      key: \"_updateAudioSampleReceivedCallback\",\n      value: function _updateAudioSampleReceivedCallback() {\n        if (globalThis.__EXAV_setOnAudioSampleReceivedCallback == null) {\n          if (_expoModulesCore.Platform.OS === 'ios' || _expoModulesCore.Platform.OS === 'android') {\n            console.warn('expo-av: Failed to set up Audio Sample Buffer callback. ' + \"Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://docs.expo.dev/workflow/debugging)? \" + 'Audio Sample Buffer callbacks are not supported while using Remote Debugging, you will need to disable it to use them.');\n            return;\n          } else {\n            throw new _expoModulesCore.UnavailabilityError('expo-av', 'setOnAudioSampleReceived');\n          }\n        }\n        if (this._key == null) {\n          throw new Error('Cannot set Audio Sample Buffer callback when the Sound instance has not been successfully loaded/initialized!');\n        }\n        if (typeof this._key !== 'number') {\n          throw new Error(`Cannot set Audio Sample Buffer callback when Sound instance key is of type ${typeof this._key}! (expected: number)`);\n        }\n        globalThis.__EXAV_setOnAudioSampleReceivedCallback(this._key, this._onAudioSampleReceived);\n      }\n    }, {\n      key: \"_subscribeToNativeEvents\",\n      value:\n      // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n      function _subscribeToNativeEvents() {\n        if (this._loaded) {\n          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback), this._eventEmitter.addListener('didUpdateMetadata', this._internalMetadataUpdateCallback));\n          this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n        }\n      }\n    }, {\n      key: \"_clearSubscriptions\",\n      value: function _clearSubscriptions() {\n        this._subscriptions.forEach(e => e.remove());\n        this._subscriptions = [];\n      }\n    }, {\n      key: \"setOnPlaybackStatusUpdate\",\n      value:\n      /**\n       * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n       *\n       * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n       * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n       * while the media is in the loaded state.\n       *\n       * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n       * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n       *\n       * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n       */\n      function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n      }\n      /**\n       * Sets a function to be called whenever the metadata of the sound object changes, if one is set.\n       * @param onMetadataUpdate A function taking a single object of type `AVMetadata` as a parameter.\n       * @platform ios\n       */\n    }, {\n      key: \"setOnMetadataUpdate\",\n      value: function setOnMetadataUpdate(onMetadataUpdate) {\n        this._onMetadataUpdate = onMetadataUpdate;\n      }\n      /**\n       * Sets a function to be called during playback, receiving the audio sample as parameter.\n       * @param callback A function taking the `AudioSampleCallback` as parameter.\n       */\n    }, {\n      key: \"setOnAudioSampleReceived\",\n      value: function setOnAudioSampleReceived(callback) {\n        this._onAudioSampleReceived = callback;\n        if (this._key != null) {\n          this._updateAudioSampleReceivedCallback();\n        }\n      }\n      // Loading / unloading API\n    }, {\n      key: \"loadAsync\",\n      value: function () {\n        var _loadAsync = (0, _asyncToGenerator.default)(function* (source) {\n          var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          (0, _AudioAvailability.throwIfAudioIsDisabled)();\n          if (this._loading) {\n            throw new Error('The Sound is already loading.');\n          }\n          if (!this._loaded) {\n            this._loading = true;\n            var _yield$getNativeSourc = yield (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst),\n              nativeSource = _yield$getNativeSourc.nativeSource,\n              fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n            // This is a workaround, since using load with resolve / reject seems to not work.\n            return new Promise((resolve, reject) => {\n              var loadSuccess = result => {\n                var _result = (0, _slicedToArray.default)(result, 2),\n                  key = _result[0],\n                  status = _result[1];\n                this._key = key;\n                this._loaded = true;\n                this._loading = false;\n                this._subscribeToNativeEvents();\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n                resolve(status);\n              };\n              var loadError = error => {\n                this._loading = false;\n                reject(error);\n              };\n              ExponentAV.default.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n            });\n          } else {\n            throw new Error('The Sound is already loaded.');\n          }\n        });\n        function loadAsync(_x2) {\n          return _loadAsync.apply(this, arguments);\n        }\n        return loadAsync;\n      }()\n    }, {\n      key: \"unloadAsync\",\n      value: function () {\n        var _unloadAsync = (0, _asyncToGenerator.default)(function* () {\n          if (this._loaded) {\n            this._loaded = false;\n            var key = this._key;\n            this._key = null;\n            var status = yield ExponentAV.default.unloadForSound(key);\n            this._callOnPlaybackStatusUpdateForNewStatus(status);\n            this._clearSubscriptions();\n            return status;\n          } else {\n            return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n          }\n        });\n        function unloadAsync() {\n          return _unloadAsync.apply(this, arguments);\n        }\n        return unloadAsync;\n      }() // Set status API (only available while isLoaded = true)\n    }, {\n      key: \"setStatusAsync\",\n      value: function () {\n        var _setStatusAsync = (0, _asyncToGenerator.default)(function* (status) {\n          (0, _AV.assertStatusValuesInBounds)(status);\n          return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.setStatusForSound(this._key, status));\n        });\n        function setStatusAsync(_x3) {\n          return _setStatusAsync.apply(this, arguments);\n        }\n        return setStatusAsync;\n      }()\n    }, {\n      key: \"replayAsync\",\n      value: function () {\n        var _replayAsync = (0, _asyncToGenerator.default)(function* () {\n          var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          if (status.positionMillis && status.positionMillis !== 0) {\n            throw new Error('Requested position after replay has to be 0.');\n          }\n          return this._performOperationAndHandleStatusAsync(() => ExponentAV.default.replaySound(this._key, {\n            ...status,\n            positionMillis: 0,\n            shouldPlay: true\n          }));\n        });\n        function replayAsync() {\n          return _replayAsync.apply(this, arguments);\n        }\n        return replayAsync;\n      }() // Methods of the Playback interface that are set via PlaybackMixin\n    }]);\n  }();\n  _Sound = Sound;\n  /** @deprecated Use `Sound.createAsync()` instead */\n  Sound.create = /*#__PURE__*/function () {\n    var _ref5 = (0, _asyncToGenerator.default)(function* (source) {\n      var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      console.warn(`Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`);\n      return _Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n    });\n    return function (_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Creates and loads a sound from source.\n   *\n   * ```ts\n   * const { sound } = await Audio.Sound.createAsync(\n   *   source,\n   *   initialStatus,\n   *   onPlaybackStatusUpdate,\n   *   downloadFirst\n   * );\n   *\n   * // Which is equivalent to the following:\n   * const sound = new Audio.Sound();\n   * sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n   * await sound.loadAsync(source, initialStatus, downloadFirst);\n   * ```\n   *\n   * @param source The source of the sound. See the [AV documentation](/versions/latest/sdk/av/#playback-api) for details on the possible `source` values.\n   *\n   * @param initialStatus The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. See the [AV documentation](/versions/latest/sdk/av) for details on `PlaybackStatusToSet` and the default\n   * initial playback status.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed.\n   * See the [AV documentation](/versions/latest/sdk/av) for details on the functionality provided by `onPlaybackStatusUpdate`\n   *\n   * @param downloadFirst If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`.\n   * Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const { sound: soundObject, status } = await Audio.Sound.createAsync(\n   *     require('./assets/sounds/hello.mp3'),\n   *     { shouldPlay: true }\n   *   );\n   *   // Your sound is playing!\n   * } catch (error) {\n   *   // An error occurred!\n   * }\n   * ```\n   *\n   * @return A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.\n   */\n  Sound.createAsync = /*#__PURE__*/function () {\n    var _ref6 = (0, _asyncToGenerator.default)(function* (source) {\n      var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var sound = new _Sound();\n      sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n      var status = yield sound.loadAsync(source, initialStatus, downloadFirst);\n      return {\n        sound,\n        status\n      };\n    });\n    return function (_x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  Object.assign(Sound.prototype, _AV.PlaybackMixin);\n});","lineCount":390,"map":[[13,2,29,0,"Object"],[13,8,29,0],[13,9,29,0,"defineProperty"],[13,23,29,0],[13,24,29,0,"exports"],[13,31,29,0],[14,4,29,0,"enumerable"],[14,14,29,0],[15,4,29,0,"get"],[15,7,29,0],[15,18,29,0,"get"],[15,19,29,0],[16,6,29,0],[16,13,29,0,"Sound"],[16,18,29,0],[17,4,29,0],[18,2,29,0],[19,2,287,1],[19,6,287,1,"_babelRuntimeHelpersSlicedToArray"],[19,39,287,1],[19,42,287,1,"require"],[19,49,287,1],[19,50,287,1,"_dependencyMap"],[19,64,287,1],[20,2,287,1],[20,6,287,1,"_slicedToArray"],[20,20,287,1],[20,23,287,1,"_interopDefault"],[20,38,287,1],[20,39,287,1,"_babelRuntimeHelpersSlicedToArray"],[20,72,287,1],[21,2,287,1],[21,6,287,1,"_babelRuntimeHelpersAsyncToGenerator"],[21,42,287,1],[21,45,287,1,"require"],[21,52,287,1],[21,53,287,1,"_dependencyMap"],[21,67,287,1],[22,2,287,1],[22,6,287,1,"_asyncToGenerator"],[22,23,287,1],[22,26,287,1,"_interopDefault"],[22,41,287,1],[22,42,287,1,"_babelRuntimeHelpersAsyncToGenerator"],[22,78,287,1],[23,2,287,1],[23,6,287,1,"_babelRuntimeHelpersClassCallCheck"],[23,40,287,1],[23,43,287,1,"require"],[23,50,287,1],[23,51,287,1,"_dependencyMap"],[23,65,287,1],[24,2,287,1],[24,6,287,1,"_classCallCheck"],[24,21,287,1],[24,24,287,1,"_interopDefault"],[24,39,287,1],[24,40,287,1,"_babelRuntimeHelpersClassCallCheck"],[24,74,287,1],[25,2,287,1],[25,6,287,1,"_babelRuntimeHelpersCreateClass"],[25,37,287,1],[25,40,287,1,"require"],[25,47,287,1],[25,48,287,1,"_dependencyMap"],[25,62,287,1],[26,2,287,1],[26,6,287,1,"_createClass"],[26,18,287,1],[26,21,287,1,"_interopDefault"],[26,36,287,1],[26,37,287,1,"_babelRuntimeHelpersCreateClass"],[26,68,287,1],[27,2,1,0],[27,6,1,0,"_expoModulesCore"],[27,22,1,0],[27,25,1,0,"require"],[27,32,1,0],[27,33,1,0,"_dependencyMap"],[27,47,1,0],[28,2,2,0],[28,6,2,0,"_AudioAvailability"],[28,24,2,0],[28,27,2,0,"require"],[28,34,2,0],[28,35,2,0,"_dependencyMap"],[28,49,2,0],[29,2,3,0],[29,6,3,0,"_AV"],[29,9,3,0],[29,12,3,0,"require"],[29,19,3,0],[29,20,3,0,"_dependencyMap"],[29,34,3,0],[30,2,4,0],[30,6,4,0,"_ExponentAV"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,4,0],[31,6,4,0,"ExponentAV"],[31,16,4,0],[31,19,4,0,"_interopDefault"],[31,34,4,0],[31,35,4,0,"_ExponentAV"],[31,46,4,0],[32,2,5,0],[33,2,6,0],[34,0,7,0],[35,0,8,0],[36,0,9,0],[37,0,10,0],[38,0,11,0],[39,0,12,0],[40,0,13,0],[41,0,14,0],[42,0,15,0],[43,0,16,0],[44,0,17,0],[45,0,18,0],[46,0,19,0],[47,0,20,0],[48,0,21,0],[49,0,22,0],[50,0,23,0],[51,0,24,0],[52,0,25,0],[53,0,26,0],[54,0,27,0],[55,0,28,0],[56,2,6,0],[56,6,29,13,"Sound"],[56,11,29,18],[57,4,29,18],[57,13,29,18,"Sound"],[57,19,29,18],[58,6,29,18],[58,10,29,18,"_this"],[58,15,29,18],[59,6,29,18],[59,10,29,18,"_classCallCheck"],[59,25,29,18],[59,26,29,18,"default"],[59,33,29,18],[59,41,29,18,"Sound"],[59,46,29,18],[60,6,29,18],[60,11,30,4,"_loaded"],[60,18,30,11],[60,21,30,14],[60,26,30,19],[61,6,30,19],[61,11,31,4,"_loading"],[61,19,31,12],[61,22,31,15],[61,27,31,20],[62,6,31,20],[62,11,32,4,"_key"],[62,15,32,8],[62,18,32,11],[62,22,32,15],[63,6,32,15],[63,11,33,4,"_lastStatusUpdate"],[63,28,33,21],[63,31,33,24],[63,35,33,28],[64,6,33,28],[64,11,34,4,"_lastStatusUpdateTime"],[64,32,34,25],[64,35,34,28],[64,39,34,32],[65,6,34,32],[65,11,35,4,"_subscriptions"],[65,25,35,18],[65,28,35,21],[65,30,35,23],[66,6,35,23],[66,11,36,4,"_eventEmitter"],[66,24,36,17],[66,27,36,20],[66,31,36,24,"LegacyEventEmitter"],[66,47,36,42],[66,48,36,42,"LegacyEventEmitter"],[66,66,36,42],[66,67,36,43,"ExponentAV"],[66,77,36,53],[66,78,36,53,"default"],[66,85,36,53],[66,86,36,54],[67,6,36,54],[67,11,37,4,"_coalesceStatusUpdatesInMillis"],[67,41,37,34],[67,44,37,37],[67,47,37,40],[68,6,37,40],[68,11,38,4,"_onPlaybackStatusUpdate"],[68,34,38,27],[68,37,38,30],[68,41,38,34],[69,6,38,34],[69,11,39,4,"_onMetadataUpdate"],[69,28,39,21],[69,31,39,24],[69,35,39,28],[70,6,39,28],[70,11,40,4,"_onAudioSampleReceived"],[70,33,40,26],[70,36,40,29],[70,40,40,33],[71,6,40,33],[71,11,139,4,"_internalStatusUpdateCallback"],[71,40,139,33],[71,43,139,36,"_ref"],[71,47,139,36],[71,51,139,58],[72,8,139,58],[72,12,139,39,"key"],[72,15,139,42],[72,18,139,42,"_ref"],[72,22,139,42],[72,23,139,39,"key"],[72,26,139,42],[73,10,139,44,"status"],[73,16,139,50],[73,19,139,50,"_ref"],[73,23,139,50],[73,24,139,44,"status"],[73,30,139,50],[74,8,140,8],[74,12,140,12],[74,16,140,16],[74,17,140,17,"_key"],[74,21,140,21],[74,26,140,26,"key"],[74,29,140,29],[74,31,140,31],[75,10,141,12],[75,14,141,16],[75,15,141,17,"_callOnPlaybackStatusUpdateForNewStatus"],[75,54,141,56],[75,55,141,57,"status"],[75,61,141,63],[75,62,141,64],[76,8,142,8],[77,6,143,4],[77,7,143,5],[78,6,143,5],[78,11,144,4,"_internalMetadataUpdateCallback"],[78,42,144,35],[78,45,144,38,"_ref2"],[78,50,144,38],[78,54,144,62],[79,8,144,62],[79,12,144,41,"key"],[79,15,144,44],[79,18,144,44,"_ref2"],[79,23,144,44],[79,24,144,41,"key"],[79,27,144,44],[80,10,144,46,"metadata"],[80,18,144,54],[80,21,144,54,"_ref2"],[80,26,144,54],[80,27,144,46,"metadata"],[80,35,144,54],[81,8,145,8],[81,12,145,12],[81,16,145,16],[81,17,145,17,"_key"],[81,21,145,21],[81,26,145,26,"key"],[81,29,145,29],[81,31,145,31],[82,10,146,12],[82,14,146,16],[82,15,146,17,"_onMetadataUpdate"],[82,32,146,34],[82,35,146,37,"metadata"],[82,43,146,45],[82,44,146,46],[83,8,147,8],[84,6,148,4],[84,7,148,5],[85,6,148,5],[85,11,149,4,"_internalErrorCallback"],[85,33,149,26],[85,36,149,29,"_ref3"],[85,41,149,29],[85,45,149,49],[86,8,149,49],[86,12,149,32,"key"],[86,15,149,35],[86,18,149,35,"_ref3"],[86,23,149,35],[86,24,149,32,"key"],[86,27,149,35],[87,10,149,37,"error"],[87,15,149,42],[87,18,149,42,"_ref3"],[87,23,149,42],[87,24,149,37,"error"],[87,29,149,42],[88,8,150,8],[88,12,150,12],[88,16,150,16],[88,17,150,17,"_key"],[88,21,150,21],[88,26,150,26,"key"],[88,29,150,29],[88,31,150,31],[89,10,151,12],[89,14,151,16],[89,15,151,17,"_errorCallback"],[89,29,151,31],[89,30,151,32,"error"],[89,35,151,37],[89,36,151,38],[90,8,152,8],[91,6,153,4],[91,7,153,5],[92,6,153,5],[92,11,165,4,"_errorCallback"],[92,25,165,18],[92,28,165,22,"error"],[92,33,165,27],[92,37,165,32],[93,8,166,8],[93,12,166,12],[93,13,166,13,"_clearSubscriptions"],[93,32,166,32],[93,33,166,33],[93,34,166,34],[94,8,167,8],[94,12,167,12],[94,13,167,13,"_loaded"],[94,20,167,20],[94,23,167,23],[94,28,167,28],[95,8,168,8],[95,12,168,12],[95,13,168,13,"_key"],[95,17,168,17],[95,20,168,20],[95,24,168,24],[96,8,169,8],[96,12,169,12],[96,13,169,13,"_callOnPlaybackStatusUpdateForNewStatus"],[96,52,169,52],[96,53,169,53],[96,57,169,53,"getUnloadedStatus"],[96,60,169,70],[96,61,169,70,"getUnloadedStatus"],[96,78,169,70],[96,80,169,71,"error"],[96,85,169,76],[96,86,169,77],[96,87,169,78],[97,6,170,4],[97,7,170,5],[98,6,171,4],[99,6,172,4],[100,6,173,4],[101,6,173,4],[101,11,174,4,"getStatusAsync"],[101,25,174,18],[101,45,174,18,"_asyncToGenerator"],[101,62,174,18],[101,63,174,18,"default"],[101,70,174,18],[101,72,174,21],[101,85,174,33],[102,8,175,8],[102,12,175,12,"_this"],[102,17,175,16],[102,18,175,17,"_loaded"],[102,25,175,24],[102,27,175,26],[103,10,176,12],[103,17,176,19,"_this"],[103,22,176,23],[103,23,176,24,"_performOperationAndHandleStatusAsync"],[103,60,176,61],[103,61,176,62],[103,67,176,68,"ExponentAV"],[103,77,176,78],[103,78,176,78,"default"],[103,85,176,78],[103,86,176,79,"getStatusForSound"],[103,103,176,96],[103,104,176,97,"_this"],[103,109,176,101],[103,110,176,102,"_key"],[103,114,176,106],[103,115,176,107],[103,116,176,108],[104,8,177,8],[105,8,178,8],[105,12,178,14,"status"],[105,18,178,20],[105,21,178,23],[105,25,178,23,"getUnloadedStatus"],[105,28,178,40],[105,29,178,40,"getUnloadedStatus"],[105,46,178,40],[105,48,178,41],[105,49,178,42],[106,8,179,8,"_this"],[106,13,179,12],[106,14,179,13,"_callOnPlaybackStatusUpdateForNewStatus"],[106,53,179,52],[106,54,179,53,"status"],[106,60,179,59],[106,61,179,60],[107,8,180,8],[107,15,180,15,"status"],[107,21,180,21],[108,6,181,4],[108,7,181,5],[109,4,181,5],[110,4,181,5],[110,15,181,5,"_createClass"],[110,27,181,5],[110,28,181,5,"default"],[110,35,181,5],[110,37,181,5,"Sound"],[110,42,181,5],[111,6,181,5,"key"],[111,9,181,5],[112,6,181,5,"value"],[112,11,181,5],[113,6,96,4],[114,6,97,4],[114,15,97,4,"_callOnPlaybackStatusUpdateForNewStatus"],[114,54,97,43,"_callOnPlaybackStatusUpdateForNewStatus"],[114,55,97,44,"status"],[114,61,97,50],[114,63,97,52],[115,8,98,8],[115,12,98,14,"shouldDismissBasedOnCoalescing"],[115,42,98,44],[115,45,98,47],[115,49,98,51],[115,50,98,52,"_lastStatusUpdateTime"],[115,71,98,73],[115,75,99,12,"JSON"],[115,79,99,16],[115,80,99,17,"stringify"],[115,89,99,26],[115,90,99,27,"status"],[115,96,99,33],[115,97,99,34],[115,102,99,39],[115,106,99,43],[115,107,99,44,"_lastStatusUpdate"],[115,124,99,61],[115,128,100,12,"Date"],[115,132,100,16],[115,133,100,17,"now"],[115,136,100,20],[115,137,100,21],[115,138,100,22],[115,141,100,25],[115,145,100,29],[115,146,100,30,"_lastStatusUpdateTime"],[115,167,100,51],[115,168,100,52,"getTime"],[115,175,100,59],[115,176,100,60],[115,177,100,61],[115,180,100,64],[115,184,100,68],[115,185,100,69,"_coalesceStatusUpdatesInMillis"],[115,215,100,99],[116,8,101,8],[116,12,101,12],[116,16,101,16],[116,17,101,17,"_onPlaybackStatusUpdate"],[116,40,101,40],[116,44,101,44],[116,48,101,48],[116,52,101,52],[116,53,101,53,"shouldDismissBasedOnCoalescing"],[116,83,101,83],[116,85,101,85],[117,10,102,12],[117,14,102,16],[117,15,102,17,"_onPlaybackStatusUpdate"],[117,38,102,40],[117,39,102,41,"status"],[117,45,102,47],[117,46,102,48],[118,10,103,12],[118,14,103,16],[118,15,103,17,"_lastStatusUpdateTime"],[118,36,103,38],[118,39,103,41],[118,43,103,45,"Date"],[118,47,103,49],[118,48,103,50],[118,49,103,51],[119,10,104,12],[119,14,104,16],[119,15,104,17,"_lastStatusUpdate"],[119,32,104,34],[119,35,104,37,"JSON"],[119,39,104,41],[119,40,104,42,"stringify"],[119,49,104,51],[119,50,104,52,"status"],[119,56,104,58],[119,57,104,59],[120,8,105,8],[121,6,106,4],[122,4,106,5],[123,6,106,5,"key"],[123,9,106,5],[124,6,106,5,"value"],[124,11,106,5],[125,8,106,5],[125,12,106,5,"_performOperationAndHandleStatusAsync2"],[125,50,106,5],[125,57,106,5,"_asyncToGenerator"],[125,74,106,5],[125,75,106,5,"default"],[125,82,106,5],[125,84,107,4],[125,95,107,48,"operation"],[125,104,107,57],[125,106,107,59],[126,10,108,8],[126,14,108,8,"throwIfAudioIsDisabled"],[126,32,108,30],[126,33,108,30,"throwIfAudioIsDisabled"],[126,55,108,30],[126,57,108,31],[126,58,108,32],[127,10,109,8],[127,14,109,12],[127,18,109,16],[127,19,109,17,"_loaded"],[127,26,109,24],[127,28,109,26],[128,12,110,12],[128,16,110,18,"status"],[128,22,110,24],[128,31,110,33,"operation"],[128,40,110,42],[128,41,110,43],[128,42,110,44],[129,12,111,12],[129,16,111,16],[129,17,111,17,"_callOnPlaybackStatusUpdateForNewStatus"],[129,56,111,56],[129,57,111,57,"status"],[129,63,111,63],[129,64,111,64],[130,12,112,12],[130,19,112,19,"status"],[130,25,112,25],[131,10,113,8],[131,11,113,9],[131,17,114,13],[132,12,115,12],[132,18,115,18],[132,22,115,22,"Error"],[132,27,115,27],[132,28,115,28],[132,84,115,84],[132,85,115,85],[133,10,116,8],[134,8,117,4],[134,9,117,5],[135,8,117,5],[135,17,107,10,"_performOperationAndHandleStatusAsync"],[135,54,107,47,"_performOperationAndHandleStatusAsync"],[135,55,107,47,"_x"],[135,57,107,47],[136,10,107,47],[136,17,107,47,"_performOperationAndHandleStatusAsync2"],[136,55,107,47],[136,56,107,47,"apply"],[136,61,107,47],[136,68,107,47,"arguments"],[136,77,107,47],[137,8,107,47],[138,8,107,47],[138,15,107,10,"_performOperationAndHandleStatusAsync"],[138,52,107,47],[139,6,107,47],[140,4,107,47],[141,6,107,47,"key"],[141,9,107,47],[142,6,107,47,"value"],[142,11,107,47],[142,13,118,4],[142,22,118,4,"_updateAudioSampleReceivedCallback"],[142,56,118,38,"_updateAudioSampleReceivedCallback"],[142,57,118,38],[142,59,118,41],[143,8,119,8],[143,12,119,12,"globalThis"],[143,22,119,22],[143,23,119,23,"__EXAV_setOnAudioSampleReceivedCallback"],[143,62,119,62],[143,66,119,66],[143,70,119,70],[143,72,119,72],[144,10,120,12],[144,14,120,16,"Platform"],[144,30,120,24],[144,31,120,24,"Platform"],[144,39,120,24],[144,40,120,25,"OS"],[144,42,120,27],[144,47,120,32],[144,52,120,37],[144,56,120,41,"Platform"],[144,72,120,49],[144,73,120,49,"Platform"],[144,81,120,49],[144,82,120,50,"OS"],[144,84,120,52],[144,89,120,57],[144,98,120,66],[144,100,120,68],[145,12,121,16,"console"],[145,19,121,23],[145,20,121,24,"warn"],[145,24,121,28],[145,25,121,29],[145,83,121,87],[145,86,122,20],[145,200,122,134],[145,203,123,20],[145,323,123,140],[145,324,123,141],[146,12,124,16],[147,10,125,12],[147,11,125,13],[147,17,126,17],[148,12,127,16],[148,18,127,22],[148,22,127,26,"UnavailabilityError"],[148,38,127,45],[148,39,127,45,"UnavailabilityError"],[148,58,127,45],[148,59,127,46],[148,68,127,55],[148,70,127,57],[148,96,127,83],[148,97,127,84],[149,10,128,12],[150,8,129,8],[151,8,130,8],[151,12,130,12],[151,16,130,16],[151,17,130,17,"_key"],[151,21,130,21],[151,25,130,25],[151,29,130,29],[151,31,130,31],[152,10,131,12],[152,16,131,18],[152,20,131,22,"Error"],[152,25,131,27],[152,26,131,28],[152,137,131,139],[152,138,131,140],[153,8,132,8],[154,8,133,8],[154,12,133,12],[154,19,133,19],[154,23,133,23],[154,24,133,24,"_key"],[154,28,133,28],[154,33,133,33],[154,41,133,41],[154,43,133,43],[155,10,134,12],[155,16,134,18],[155,20,134,22,"Error"],[155,25,134,27],[155,26,134,28],[155,104,134,106],[155,111,134,113],[155,115,134,117],[155,116,135,17,"_key"],[155,120,135,21],[155,142,135,43],[155,143,135,44],[156,8,136,8],[157,8,137,8,"globalThis"],[157,18,137,18],[157,19,137,19,"__EXAV_setOnAudioSampleReceivedCallback"],[157,58,137,58],[157,59,137,59],[157,63,137,63],[157,64,137,64,"_key"],[157,68,137,68],[157,70,137,70],[157,74,137,74],[157,75,137,75,"_onAudioSampleReceived"],[157,97,137,97],[157,98,137,98],[158,6,138,4],[159,4,138,5],[160,6,138,5,"key"],[160,9,138,5],[161,6,138,5,"value"],[161,11,138,5],[162,6,154,4],[163,6,155,4],[163,15,155,4,"_subscribeToNativeEvents"],[163,39,155,28,"_subscribeToNativeEvents"],[163,40,155,28],[163,42,155,31],[164,8,156,8],[164,12,156,12],[164,16,156,16],[164,17,156,17,"_loaded"],[164,24,156,24],[164,26,156,26],[165,10,157,12],[165,14,157,16],[165,15,157,17,"_subscriptions"],[165,29,157,31],[165,30,157,32,"push"],[165,34,157,36],[165,35,157,37],[165,39,157,41],[165,40,157,42,"_eventEmitter"],[165,53,157,55],[165,54,157,56,"addListener"],[165,65,157,67],[165,66,157,68],[165,91,157,93],[165,93,157,95],[165,97,157,99],[165,98,157,100,"_internalStatusUpdateCallback"],[165,127,157,129],[165,128,157,130],[165,130,157,132],[165,134,157,136],[165,135,157,137,"_eventEmitter"],[165,148,157,150],[165,149,157,151,"addListener"],[165,160,157,162],[165,161,157,163],[165,180,157,182],[165,182,157,184],[165,186,157,188],[165,187,157,189,"_internalMetadataUpdateCallback"],[165,218,157,220],[165,219,157,221],[165,220,157,222],[166,10,158,12],[166,14,158,16],[166,15,158,17,"_subscriptions"],[166,29,158,31],[166,30,158,32,"push"],[166,34,158,36],[166,35,158,37],[166,39,158,41],[166,40,158,42,"_eventEmitter"],[166,53,158,55],[166,54,158,56,"addListener"],[166,65,158,67],[166,66,158,68],[166,86,158,88],[166,88,158,90],[166,92,158,94],[166,93,158,95,"_internalErrorCallback"],[166,115,158,117],[166,116,158,118],[166,117,158,119],[167,8,159,8],[168,6,160,4],[169,4,160,5],[170,6,160,5,"key"],[170,9,160,5],[171,6,160,5,"value"],[171,11,160,5],[171,13,161,4],[171,22,161,4,"_clearSubscriptions"],[171,41,161,23,"_clearSubscriptions"],[171,42,161,23],[171,44,161,26],[172,8,162,8],[172,12,162,12],[172,13,162,13,"_subscriptions"],[172,27,162,27],[172,28,162,28,"forEach"],[172,35,162,35],[172,36,162,37,"e"],[172,37,162,38],[172,41,162,43,"e"],[172,42,162,44],[172,43,162,45,"remove"],[172,49,162,51],[172,50,162,52],[172,51,162,53],[172,52,162,54],[173,8,163,8],[173,12,163,12],[173,13,163,13,"_subscriptions"],[173,27,163,27],[173,30,163,30],[173,32,163,32],[174,6,164,4],[175,4,164,5],[176,6,164,5,"key"],[176,9,164,5],[177,6,164,5,"value"],[177,11,164,5],[178,6,182,4],[179,0,183,0],[180,0,184,0],[181,0,185,0],[182,0,186,0],[183,0,187,0],[184,0,188,0],[185,0,189,0],[186,0,190,0],[187,0,191,0],[188,0,192,0],[189,0,193,0],[190,6,194,4],[190,15,194,4,"setOnPlaybackStatusUpdate"],[190,40,194,29,"setOnPlaybackStatusUpdate"],[190,41,194,30,"onPlaybackStatusUpdate"],[190,63,194,52],[190,65,194,54],[191,8,195,8],[191,12,195,12],[191,13,195,13,"_onPlaybackStatusUpdate"],[191,36,195,36],[191,39,195,39,"onPlaybackStatusUpdate"],[191,61,195,61],[192,8,196,8],[192,12,196,12],[192,13,196,13,"getStatusAsync"],[192,27,196,27],[192,28,196,28],[192,29,196,29],[193,6,197,4],[194,6,198,4],[195,0,199,0],[196,0,200,0],[197,0,201,0],[198,0,202,0],[199,4,198,4],[200,6,198,4,"key"],[200,9,198,4],[201,6,198,4,"value"],[201,11,198,4],[201,13,203,4],[201,22,203,4,"setOnMetadataUpdate"],[201,41,203,23,"setOnMetadataUpdate"],[201,42,203,24,"onMetadataUpdate"],[201,58,203,40],[201,60,203,42],[202,8,204,8],[202,12,204,12],[202,13,204,13,"_onMetadataUpdate"],[202,30,204,30],[202,33,204,33,"onMetadataUpdate"],[202,49,204,49],[203,6,205,4],[204,6,206,4],[205,0,207,0],[206,0,208,0],[207,0,209,0],[208,4,206,4],[209,6,206,4,"key"],[209,9,206,4],[210,6,206,4,"value"],[210,11,206,4],[210,13,210,4],[210,22,210,4,"setOnAudioSampleReceived"],[210,46,210,28,"setOnAudioSampleReceived"],[210,47,210,29,"callback"],[210,55,210,37],[210,57,210,39],[211,8,211,8],[211,12,211,12],[211,13,211,13,"_onAudioSampleReceived"],[211,35,211,35],[211,38,211,38,"callback"],[211,46,211,46],[212,8,212,8],[212,12,212,12],[212,16,212,16],[212,17,212,17,"_key"],[212,21,212,21],[212,25,212,25],[212,29,212,29],[212,31,212,31],[213,10,213,12],[213,14,213,16],[213,15,213,17,"_updateAudioSampleReceivedCallback"],[213,49,213,51],[213,50,213,52],[213,51,213,53],[214,8,214,8],[215,6,215,4],[216,6,216,4],[217,4,216,4],[218,6,216,4,"key"],[218,9,216,4],[219,6,216,4,"value"],[219,11,216,4],[220,8,216,4],[220,12,216,4,"_loadAsync"],[220,22,216,4],[220,29,216,4,"_asyncToGenerator"],[220,46,216,4],[220,47,216,4,"default"],[220,54,216,4],[220,56,217,4],[220,67,217,20,"source"],[220,73,217,26],[220,75,217,70],[221,10,217,70],[221,14,217,28,"initialStatus"],[221,27,217,41],[221,30,217,41,"arguments"],[221,39,217,41],[221,40,217,41,"length"],[221,46,217,41],[221,54,217,41,"arguments"],[221,63,217,41],[221,71,217,41,"undefined"],[221,80,217,41],[221,83,217,41,"arguments"],[221,92,217,41],[221,98,217,44],[221,99,217,45],[221,100,217,46],[222,10,217,46],[222,14,217,48,"downloadFirst"],[222,27,217,61],[222,30,217,61,"arguments"],[222,39,217,61],[222,40,217,61,"length"],[222,46,217,61],[222,54,217,61,"arguments"],[222,63,217,61],[222,71,217,61,"undefined"],[222,80,217,61],[222,83,217,61,"arguments"],[222,92,217,61],[222,98,217,64],[222,102,217,68],[223,10,218,8],[223,14,218,8,"throwIfAudioIsDisabled"],[223,32,218,30],[223,33,218,30,"throwIfAudioIsDisabled"],[223,55,218,30],[223,57,218,31],[223,58,218,32],[224,10,219,8],[224,14,219,12],[224,18,219,16],[224,19,219,17,"_loading"],[224,27,219,25],[224,29,219,27],[225,12,220,12],[225,18,220,18],[225,22,220,22,"Error"],[225,27,220,27],[225,28,220,28],[225,59,220,59],[225,60,220,60],[226,10,221,8],[227,10,222,8],[227,14,222,12],[227,15,222,13],[227,19,222,17],[227,20,222,18,"_loaded"],[227,27,222,25],[227,29,222,27],[228,12,223,12],[228,16,223,16],[228,17,223,17,"_loading"],[228,25,223,25],[228,28,223,28],[228,32,223,32],[229,12,224,12],[229,16,224,12,"_yield$getNativeSourc"],[229,37,224,12],[229,46,224,62],[229,50,224,62,"getNativeSourceAndFullInitialStatusForLoadAsync"],[229,53,224,109],[229,54,224,109,"getNativeSourceAndFullInitialStatusForLoadAsync"],[229,101,224,109],[229,103,224,110,"source"],[229,109,224,116],[229,111,224,118,"initialStatus"],[229,124,224,131],[229,126,224,133,"downloadFirst"],[229,139,224,146],[229,140,224,147],[230,14,224,20,"nativeSource"],[230,26,224,32],[230,29,224,32,"_yield$getNativeSourc"],[230,50,224,32],[230,51,224,20,"nativeSource"],[230,63,224,32],[231,14,224,34,"fullInitialStatus"],[231,31,224,51],[231,34,224,51,"_yield$getNativeSourc"],[231,55,224,51],[231,56,224,34,"fullInitialStatus"],[231,73,224,51],[232,12,225,12],[233,12,226,12],[233,19,226,19],[233,23,226,23,"Promise"],[233,30,226,30],[233,31,226,31],[233,32,226,32,"resolve"],[233,39,226,39],[233,41,226,41,"reject"],[233,47,226,47],[233,52,226,52],[234,14,227,16],[234,18,227,22,"loadSuccess"],[234,29,227,33],[234,32,227,37,"result"],[234,38,227,43],[234,42,227,48],[235,16,228,20],[235,20,228,20,"_result"],[235,27,228,20],[235,34,228,20,"_slicedToArray"],[235,48,228,20],[235,49,228,20,"default"],[235,56,228,20],[235,58,228,42,"result"],[235,64,228,48],[236,18,228,27,"key"],[236,21,228,30],[236,24,228,30,"_result"],[236,31,228,30],[237,18,228,32,"status"],[237,24,228,38],[237,27,228,38,"_result"],[237,34,228,38],[238,16,229,20],[238,20,229,24],[238,21,229,25,"_key"],[238,25,229,29],[238,28,229,32,"key"],[238,31,229,35],[239,16,230,20],[239,20,230,24],[239,21,230,25,"_loaded"],[239,28,230,32],[239,31,230,35],[239,35,230,39],[240,16,231,20],[240,20,231,24],[240,21,231,25,"_loading"],[240,29,231,33],[240,32,231,36],[240,37,231,41],[241,16,232,20],[241,20,232,24],[241,21,232,25,"_subscribeToNativeEvents"],[241,45,232,49],[241,46,232,50],[241,47,232,51],[242,16,233,20],[242,20,233,24],[242,21,233,25,"_callOnPlaybackStatusUpdateForNewStatus"],[242,60,233,64],[242,61,233,65,"status"],[242,67,233,71],[242,68,233,72],[243,16,234,20,"resolve"],[243,23,234,27],[243,24,234,28,"status"],[243,30,234,34],[243,31,234,35],[244,14,235,16],[244,15,235,17],[245,14,236,16],[245,18,236,22,"loadError"],[245,27,236,31],[245,30,236,35,"error"],[245,35,236,40],[245,39,236,45],[246,16,237,20],[246,20,237,24],[246,21,237,25,"_loading"],[246,29,237,33],[246,32,237,36],[246,37,237,41],[247,16,238,20,"reject"],[247,22,238,26],[247,23,238,27,"error"],[247,28,238,32],[247,29,238,33],[248,14,239,16],[248,15,239,17],[249,14,240,16,"ExponentAV"],[249,24,240,26],[249,25,240,26,"default"],[249,32,240,26],[249,33,240,27,"loadForSound"],[249,45,240,39],[249,46,240,40,"nativeSource"],[249,58,240,52],[249,60,240,54,"fullInitialStatus"],[249,77,240,71],[249,78,240,72],[249,79,240,73,"then"],[249,83,240,77],[249,84,240,78,"loadSuccess"],[249,95,240,89],[249,96,240,90],[249,97,240,91,"catch"],[249,102,240,96],[249,103,240,97,"loadError"],[249,112,240,106],[249,113,240,107],[250,12,241,12],[250,13,241,13],[250,14,241,14],[251,10,242,8],[251,11,242,9],[251,17,243,13],[252,12,244,12],[252,18,244,18],[252,22,244,22,"Error"],[252,27,244,27],[252,28,244,28],[252,58,244,58],[252,59,244,59],[253,10,245,8],[254,8,246,4],[254,9,246,5],[255,8,246,5],[255,17,217,10,"loadAsync"],[255,26,217,19,"loadAsync"],[255,27,217,19,"_x2"],[255,30,217,19],[256,10,217,19],[256,17,217,19,"_loadAsync"],[256,27,217,19],[256,28,217,19,"apply"],[256,33,217,19],[256,40,217,19,"arguments"],[256,49,217,19],[257,8,217,19],[258,8,217,19],[258,15,217,10,"loadAsync"],[258,24,217,19],[259,6,217,19],[260,4,217,19],[261,6,217,19,"key"],[261,9,217,19],[262,6,217,19,"value"],[262,11,217,19],[263,8,217,19],[263,12,217,19,"_unloadAsync"],[263,24,217,19],[263,31,217,19,"_asyncToGenerator"],[263,48,217,19],[263,49,217,19,"default"],[263,56,217,19],[263,58,247,4],[263,71,247,24],[264,10,248,8],[264,14,248,12],[264,18,248,16],[264,19,248,17,"_loaded"],[264,26,248,24],[264,28,248,26],[265,12,249,12],[265,16,249,16],[265,17,249,17,"_loaded"],[265,24,249,24],[265,27,249,27],[265,32,249,32],[266,12,250,12],[266,16,250,18,"key"],[266,19,250,21],[266,22,250,24],[266,26,250,28],[266,27,250,29,"_key"],[266,31,250,33],[267,12,251,12],[267,16,251,16],[267,17,251,17,"_key"],[267,21,251,21],[267,24,251,24],[267,28,251,28],[268,12,252,12],[268,16,252,18,"status"],[268,22,252,24],[268,31,252,33,"ExponentAV"],[268,41,252,43],[268,42,252,43,"default"],[268,49,252,43],[268,50,252,44,"unloadForSound"],[268,64,252,58],[268,65,252,59,"key"],[268,68,252,62],[268,69,252,63],[269,12,253,12],[269,16,253,16],[269,17,253,17,"_callOnPlaybackStatusUpdateForNewStatus"],[269,56,253,56],[269,57,253,57,"status"],[269,63,253,63],[269,64,253,64],[270,12,254,12],[270,16,254,16],[270,17,254,17,"_clearSubscriptions"],[270,36,254,36],[270,37,254,37],[270,38,254,38],[271,12,255,12],[271,19,255,19,"status"],[271,25,255,25],[272,10,256,8],[272,11,256,9],[272,17,257,13],[273,12,258,12],[273,19,258,19],[273,23,258,23],[273,24,258,24,"getStatusAsync"],[273,38,258,38],[273,39,258,39],[273,40,258,40],[273,41,258,41],[273,42,258,42],[274,10,259,8],[275,8,260,4],[275,9,260,5],[276,8,260,5],[276,17,247,10,"unloadAsync"],[276,28,247,21,"unloadAsync"],[276,29,247,21],[277,10,247,21],[277,17,247,21,"_unloadAsync"],[277,29,247,21],[277,30,247,21,"apply"],[277,35,247,21],[277,42,247,21,"arguments"],[277,51,247,21],[278,8,247,21],[279,8,247,21],[279,15,247,10,"unloadAsync"],[279,26,247,21],[280,6,247,21],[280,10,261,4],[281,4,261,4],[282,6,261,4,"key"],[282,9,261,4],[283,6,261,4,"value"],[283,11,261,4],[284,8,261,4],[284,12,261,4,"_setStatusAsync"],[284,27,261,4],[284,34,261,4,"_asyncToGenerator"],[284,51,261,4],[284,52,261,4,"default"],[284,59,261,4],[284,61,262,4],[284,72,262,25,"status"],[284,78,262,31],[284,80,262,33],[285,10,263,8],[285,14,263,8,"assertStatusValuesInBounds"],[285,17,263,34],[285,18,263,34,"assertStatusValuesInBounds"],[285,44,263,34],[285,46,263,35,"status"],[285,52,263,41],[285,53,263,42],[286,10,264,8],[286,17,264,15],[286,21,264,19],[286,22,264,20,"_performOperationAndHandleStatusAsync"],[286,59,264,57],[286,60,264,58],[286,66,264,64,"ExponentAV"],[286,76,264,74],[286,77,264,74,"default"],[286,84,264,74],[286,85,264,75,"setStatusForSound"],[286,102,264,92],[286,103,264,93],[286,107,264,97],[286,108,264,98,"_key"],[286,112,264,102],[286,114,264,104,"status"],[286,120,264,110],[286,121,264,111],[286,122,264,112],[287,8,265,4],[287,9,265,5],[288,8,265,5],[288,17,262,10,"setStatusAsync"],[288,31,262,24,"setStatusAsync"],[288,32,262,24,"_x3"],[288,35,262,24],[289,10,262,24],[289,17,262,24,"_setStatusAsync"],[289,32,262,24],[289,33,262,24,"apply"],[289,38,262,24],[289,45,262,24,"arguments"],[289,54,262,24],[290,8,262,24],[291,8,262,24],[291,15,262,10,"setStatusAsync"],[291,29,262,24],[292,6,262,24],[293,4,262,24],[294,6,262,24,"key"],[294,9,262,24],[295,6,262,24,"value"],[295,11,262,24],[296,8,262,24],[296,12,262,24,"_replayAsync"],[296,24,262,24],[296,31,262,24,"_asyncToGenerator"],[296,48,262,24],[296,49,262,24,"default"],[296,56,262,24],[296,58,266,4],[296,71,266,35],[297,10,266,35],[297,14,266,22,"status"],[297,20,266,28],[297,23,266,28,"arguments"],[297,32,266,28],[297,33,266,28,"length"],[297,39,266,28],[297,47,266,28,"arguments"],[297,56,266,28],[297,64,266,28,"undefined"],[297,73,266,28],[297,76,266,28,"arguments"],[297,85,266,28],[297,91,266,31],[297,92,266,32],[297,93,266,33],[298,10,267,8],[298,14,267,12,"status"],[298,20,267,18],[298,21,267,19,"positionMillis"],[298,35,267,33],[298,39,267,37,"status"],[298,45,267,43],[298,46,267,44,"positionMillis"],[298,60,267,58],[298,65,267,63],[298,66,267,64],[298,68,267,66],[299,12,268,12],[299,18,268,18],[299,22,268,22,"Error"],[299,27,268,27],[299,28,268,28],[299,74,268,74],[299,75,268,75],[300,10,269,8],[301,10,270,8],[301,17,270,15],[301,21,270,19],[301,22,270,20,"_performOperationAndHandleStatusAsync"],[301,59,270,57],[301,60,270,58],[301,66,270,64,"ExponentAV"],[301,76,270,74],[301,77,270,74,"default"],[301,84,270,74],[301,85,270,75,"replaySound"],[301,96,270,86],[301,97,270,87],[301,101,270,91],[301,102,270,92,"_key"],[301,106,270,96],[301,108,270,98],[302,12,271,12],[302,15,271,15,"status"],[302,21,271,21],[303,12,272,12,"positionMillis"],[303,26,272,26],[303,28,272,28],[303,29,272,29],[304,12,273,12,"shouldPlay"],[304,22,273,22],[304,24,273,24],[305,10,274,8],[305,11,274,9],[305,12,274,10],[305,13,274,11],[306,8,275,4],[306,9,275,5],[307,8,275,5],[307,17,266,10,"replayAsync"],[307,28,266,21,"replayAsync"],[307,29,266,21],[308,10,266,21],[308,17,266,21,"_replayAsync"],[308,29,266,21],[308,30,266,21,"apply"],[308,35,266,21],[308,42,266,21,"arguments"],[308,51,266,21],[309,8,266,21],[310,8,266,21],[310,15,266,10,"replayAsync"],[310,26,266,21],[311,6,266,21],[311,10,276,4],[312,4,276,4],[313,2,276,4],[314,2,276,4,"_Sound"],[314,8,276,4],[314,11,29,13,"Sound"],[314,16,29,18],[315,2,41,4],[316,2,29,13,"Sound"],[316,7,29,18],[316,8,42,11,"create"],[316,14,42,17],[317,4,42,17],[317,8,42,17,"_ref5"],[317,13,42,17],[317,20,42,17,"_asyncToGenerator"],[317,37,42,17],[317,38,42,17,"default"],[317,45,42,17],[317,47,42,20],[317,58,42,27,"source"],[317,64,42,33],[317,66,42,111],[318,6,42,111],[318,10,42,35,"initialStatus"],[318,23,42,48],[318,26,42,48,"arguments"],[318,35,42,48],[318,36,42,48,"length"],[318,42,42,48],[318,50,42,48,"arguments"],[318,59,42,48],[318,67,42,48,"undefined"],[318,76,42,48],[318,79,42,48,"arguments"],[318,88,42,48],[318,94,42,51],[318,95,42,52],[318,96,42,53],[319,6,42,53],[319,10,42,55,"onPlaybackStatusUpdate"],[319,32,42,77],[319,35,42,77,"arguments"],[319,44,42,77],[319,45,42,77,"length"],[319,51,42,77],[319,59,42,77,"arguments"],[319,68,42,77],[319,76,42,77,"undefined"],[319,85,42,77],[319,88,42,77,"arguments"],[319,97,42,77],[319,103,42,80],[319,107,42,84],[320,6,42,84],[320,10,42,86,"downloadFirst"],[320,23,42,99],[320,26,42,99,"arguments"],[320,35,42,99],[320,36,42,99,"length"],[320,42,42,99],[320,50,42,99,"arguments"],[320,59,42,99],[320,67,42,99,"undefined"],[320,76,42,99],[320,79,42,99,"arguments"],[320,88,42,99],[320,94,42,102],[320,98,42,106],[321,6,43,8,"console"],[321,13,43,15],[321,14,43,16,"warn"],[321,18,43,20],[321,19,43,21],[321,126,43,128],[321,127,43,129],[322,6,44,8],[322,13,44,15,"Sound"],[322,19,44,20],[322,20,44,21,"createAsync"],[322,31,44,32],[322,32,44,33,"source"],[322,38,44,39],[322,40,44,41,"initialStatus"],[322,53,44,54],[322,55,44,56,"onPlaybackStatusUpdate"],[322,77,44,78],[322,79,44,80,"downloadFirst"],[322,92,44,93],[322,93,44,94],[323,4,45,4],[323,5,45,5],[324,4,45,5],[324,21,45,5,"_x4"],[324,24,45,5],[325,6,45,5],[325,13,45,5,"_ref5"],[325,18,45,5],[325,19,45,5,"apply"],[325,24,45,5],[325,31,45,5,"arguments"],[325,40,45,5],[326,4,45,5],[327,2,45,5],[328,2,46,4],[329,0,47,0],[330,0,48,0],[331,0,49,0],[332,0,50,0],[333,0,51,0],[334,0,52,0],[335,0,53,0],[336,0,54,0],[337,0,55,0],[338,0,56,0],[339,0,57,0],[340,0,58,0],[341,0,59,0],[342,0,60,0],[343,0,61,0],[344,0,62,0],[345,0,63,0],[346,0,64,0],[347,0,65,0],[348,0,66,0],[349,0,67,0],[350,0,68,0],[351,0,69,0],[352,0,70,0],[353,0,71,0],[354,0,72,0],[355,0,73,0],[356,0,74,0],[357,0,75,0],[358,0,76,0],[359,0,77,0],[360,0,78,0],[361,0,79,0],[362,0,80,0],[363,0,81,0],[364,0,82,0],[365,0,83,0],[366,0,84,0],[367,0,85,0],[368,0,86,0],[369,0,87,0],[370,0,88,0],[371,0,89,0],[372,2,29,13,"Sound"],[372,7,29,18],[372,8,90,11,"createAsync"],[372,19,90,22],[373,4,90,22],[373,8,90,22,"_ref6"],[373,13,90,22],[373,20,90,22,"_asyncToGenerator"],[373,37,90,22],[373,38,90,22,"default"],[373,45,90,22],[373,47,90,25],[373,58,90,32,"source"],[373,64,90,38],[373,66,90,116],[374,6,90,116],[374,10,90,40,"initialStatus"],[374,23,90,53],[374,26,90,53,"arguments"],[374,35,90,53],[374,36,90,53,"length"],[374,42,90,53],[374,50,90,53,"arguments"],[374,59,90,53],[374,67,90,53,"undefined"],[374,76,90,53],[374,79,90,53,"arguments"],[374,88,90,53],[374,94,90,56],[374,95,90,57],[374,96,90,58],[375,6,90,58],[375,10,90,60,"onPlaybackStatusUpdate"],[375,32,90,82],[375,35,90,82,"arguments"],[375,44,90,82],[375,45,90,82,"length"],[375,51,90,82],[375,59,90,82,"arguments"],[375,68,90,82],[375,76,90,82,"undefined"],[375,85,90,82],[375,88,90,82,"arguments"],[375,97,90,82],[375,103,90,85],[375,107,90,89],[376,6,90,89],[376,10,90,91,"downloadFirst"],[376,23,90,104],[376,26,90,104,"arguments"],[376,35,90,104],[376,36,90,104,"length"],[376,42,90,104],[376,50,90,104,"arguments"],[376,59,90,104],[376,67,90,104,"undefined"],[376,76,90,104],[376,79,90,104,"arguments"],[376,88,90,104],[376,94,90,107],[376,98,90,111],[377,6,91,8],[377,10,91,14,"sound"],[377,15,91,19],[377,18,91,22],[377,22,91,26,"Sound"],[377,28,91,31],[377,29,91,32],[377,30,91,33],[378,6,92,8,"sound"],[378,11,92,13],[378,12,92,14,"setOnPlaybackStatusUpdate"],[378,37,92,39],[378,38,92,40,"onPlaybackStatusUpdate"],[378,60,92,62],[378,61,92,63],[379,6,93,8],[379,10,93,14,"status"],[379,16,93,20],[379,25,93,29,"sound"],[379,30,93,34],[379,31,93,35,"loadAsync"],[379,40,93,44],[379,41,93,45,"source"],[379,47,93,51],[379,49,93,53,"initialStatus"],[379,62,93,66],[379,64,93,68,"downloadFirst"],[379,77,93,81],[379,78,93,82],[380,6,94,8],[380,13,94,15],[381,8,94,17,"sound"],[381,13,94,22],[382,8,94,24,"status"],[383,6,94,31],[383,7,94,32],[384,4,95,4],[384,5,95,5],[385,4,95,5],[385,21,95,5,"_x5"],[385,24,95,5],[386,6,95,5],[386,13,95,5,"_ref6"],[386,18,95,5],[386,19,95,5,"apply"],[386,24,95,5],[386,31,95,5,"arguments"],[386,40,95,5],[387,4,95,5],[388,2,95,5],[389,2,288,0,"Object"],[389,8,288,6],[389,9,288,7,"assign"],[389,15,288,13],[389,16,288,14,"Sound"],[389,21,288,19],[389,22,288,20,"prototype"],[389,31,288,29],[389,33,288,31,"PlaybackMixin"],[389,36,288,44],[389,37,288,44,"PlaybackMixin"],[389,50,288,44],[389,51,288,45],[390,0,288,46],[390,3]],"functionMap":{"names":["<global>","Sound","create","createAsync","_callOnPlaybackStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","_updateAudioSampleReceivedCallback","_internalStatusUpdateCallback","_internalMetadataUpdateCallback","_internalErrorCallback","_subscribeToNativeEvents","_clearSubscriptions","_subscriptions.forEach$argument_0","_errorCallback","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","setOnPlaybackStatusUpdate","setOnMetadataUpdate","setOnAudioSampleReceived","loadAsync","Promise$argument_0","loadSuccess","loadError","unloadAsync","setStatusAsync","replayAsync"],"mappings":"AAA;OC4B;oBCa;KDG;yBE6C;KFK;IGE;KHS;IIC;KJU;IKC;KLoB;oCMC;KNI;sCOC;KPI;6BQC;KRI;ISE;KTK;IUC;oCCC,iBD;KVE;qBYC;KZK;qBaI;8DCE,6CD;KbK;Iea;KfG;IgBM;KhBE;IiBK;KjBK;IkBE;+BCS;oCCC;iBDQ;kCEC;iBFG;aDE;KlBK;IsBC;KtBa;IuBE;0DTE,qDS;KvBC;IwBC;0DVI;UUI;KxBC;CDY"},"hasCjsExports":false},"type":"js/module"}]}