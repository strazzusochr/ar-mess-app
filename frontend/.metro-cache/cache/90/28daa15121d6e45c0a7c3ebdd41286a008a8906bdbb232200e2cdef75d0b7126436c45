{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"identity\", {\n    enumerable: true,\n    get: function () {\n      return identity;\n    }\n  });\n  exports.reset = reset;\n  exports.toArray = toArray;\n  exports.append = append;\n  exports.appendTransform = appendTransform;\n  /**\n   * based on\n   * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n   */\n  const DEG_TO_RAD = Math.PI / 180;\n  const identity = [1, 0, 0, 1, 0, 0];\n  let a = 1;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  let tx = 0;\n  let ty = 0;\n  let hasInitialState = true;\n\n  /**\n   * Represents an affine transformation matrix, and provides tools for concatenating transforms.\n   *\n   * This matrix can be visualized as:\n   *\n   * \t[ a  c  tx\n   * \t  b  d  ty\n   * \t  0  0  1  ]\n   *\n   * Note the locations of b and c.\n   **/\n\n  /**\n   * Reset current matrix to an identity matrix.\n   * @method reset\n   **/\n  function reset() {\n    if (hasInitialState) {\n      return;\n    }\n    a = d = 1;\n    b = c = tx = ty = 0;\n    hasInitialState = true;\n  }\n\n  /**\n   * Returns an array with current matrix values.\n   * @method toArray\n   * @return {Array} an array with current matrix values.\n   **/\n  function toArray() {\n    if (hasInitialState) {\n      return identity;\n    }\n    return [a, b, c, d, tx, ty];\n  }\n\n  /**\n   * Appends the specified matrix properties to this matrix. All parameters are required.\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n   * @method append\n   * @param {Number} a2\n   * @param {Number} b2\n   * @param {Number} c2\n   * @param {Number} d2\n   * @param {Number} tx2\n   * @param {Number} ty2\n   **/\n  function append(a2, b2, c2, d2, tx2, ty2) {\n    const change = a2 !== 1 || b2 !== 0 || c2 !== 0 || d2 !== 1;\n    const translate = tx2 !== 0 || ty2 !== 0;\n    if (!change && !translate) {\n      return;\n    }\n    if (hasInitialState) {\n      hasInitialState = false;\n      a = a2;\n      b = b2;\n      c = c2;\n      d = d2;\n      tx = tx2;\n      ty = ty2;\n      return;\n    }\n    const a1 = a;\n    const b1 = b;\n    const c1 = c;\n    const d1 = d;\n    if (change) {\n      a = a1 * a2 + c1 * b2;\n      b = b1 * a2 + d1 * b2;\n      c = a1 * c2 + c1 * d2;\n      d = b1 * c2 + d1 * d2;\n    }\n    if (translate) {\n      tx = a1 * tx2 + c1 * ty2 + tx;\n      ty = b1 * tx2 + d1 * ty2 + ty;\n    }\n  }\n\n  /**\n   * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n   * For example, you can use this to generate a matrix representing the transformations of a display object:\n   *\n   * \treset();\n   * \tappendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n   * \tvar matrix = toArray()\n   *\n   * @method appendTransform\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} scaleX\n   * @param {Number} scaleY\n   * @param {Number} rotation\n   * @param {Number} skewX\n   * @param {Number} skewY\n   * @param {Number} regX Optional.\n   * @param {Number} regY Optional.\n   **/\n  function appendTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (x === 0 && y === 0 && scaleX === 1 && scaleY === 1 && rotation === 0 && skewX === 0 && skewY === 0 && regX === 0 && regY === 0) {\n      return;\n    }\n    let cos, sin;\n    if (rotation % 360) {\n      const r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    const a2 = cos * scaleX;\n    const b2 = sin * scaleX;\n    const c2 = -sin * scaleY;\n    const d2 = cos * scaleY;\n    if (skewX || skewY) {\n      const b1 = Math.tan(skewY * DEG_TO_RAD);\n      const c1 = Math.tan(skewX * DEG_TO_RAD);\n      append(a2 + c1 * b2, b1 * a2 + b2, c2 + c1 * d2, b1 * c2 + d2, x, y);\n    } else {\n      append(a2, b2, c2, d2, x, y);\n    }\n    if (regX || regY) {\n      // append the registration offset:\n      tx -= regX * a + regY * c;\n      ty -= regX * b + regY * d;\n      hasInitialState = false;\n    }\n  }\n});","lineCount":161,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"identity"],[10,21,6,0],[11,4,6,0],[12,2,6,0],[13,2,31,0,"exports"],[13,9,31,0],[13,10,31,0,"reset"],[13,15,31,0],[13,18,31,0,"reset"],[13,23,31,0],[14,2,45,0,"exports"],[14,9,45,0],[14,10,45,0,"toArray"],[14,17,45,0],[14,20,45,0,"toArray"],[14,27,45,0],[15,2,63,0,"exports"],[15,9,63,0],[15,10,63,0,"append"],[15,16,63,0],[15,19,63,0,"append"],[15,25,63,0],[16,2,114,0,"exports"],[16,9,114,0],[16,10,114,0,"appendTransform"],[16,25,114,0],[16,28,114,0,"appendTransform"],[16,43,114,0],[17,2,1,0],[18,0,2,0],[19,0,3,0],[20,0,4,0],[21,2,5,0],[21,8,5,6,"DEG_TO_RAD"],[21,18,5,16],[21,21,5,19,"Math"],[21,25,5,23],[21,26,5,24,"PI"],[21,28,5,26],[21,31,5,29],[21,34,5,32],[22,2,6,7],[22,8,6,13,"identity"],[22,16,6,21],[22,19,6,24],[22,20,6,25],[22,21,6,26],[22,23,6,28],[22,24,6,29],[22,26,6,31],[22,27,6,32],[22,29,6,34],[22,30,6,35],[22,32,6,37],[22,33,6,38],[22,35,6,40],[22,36,6,41],[22,37,6,42],[23,2,7,0],[23,6,7,4,"a"],[23,7,7,5],[23,10,7,8],[23,11,7,9],[24,2,8,0],[24,6,8,4,"b"],[24,7,8,5],[24,10,8,8],[24,11,8,9],[25,2,9,0],[25,6,9,4,"c"],[25,7,9,5],[25,10,9,8],[25,11,9,9],[26,2,10,0],[26,6,10,4,"d"],[26,7,10,5],[26,10,10,8],[26,11,10,9],[27,2,11,0],[27,6,11,4,"tx"],[27,8,11,6],[27,11,11,9],[27,12,11,10],[28,2,12,0],[28,6,12,4,"ty"],[28,8,12,6],[28,11,12,9],[28,12,12,10],[29,2,13,0],[29,6,13,4,"hasInitialState"],[29,21,13,19],[29,24,13,22],[29,28,13,26],[31,2,15,0],[32,0,16,0],[33,0,17,0],[34,0,18,0],[35,0,19,0],[36,0,20,0],[37,0,21,0],[38,0,22,0],[39,0,23,0],[40,0,24,0],[41,0,25,0],[43,2,27,0],[44,0,28,0],[45,0,29,0],[46,0,30,0],[47,2,31,7],[47,11,31,16,"reset"],[47,16,31,21,"reset"],[47,17,31,21],[47,19,31,24],[48,4,32,2],[48,8,32,6,"hasInitialState"],[48,23,32,21],[48,25,32,23],[49,6,33,4],[50,4,34,2],[51,4,35,2,"a"],[51,5,35,3],[51,8,35,6,"d"],[51,9,35,7],[51,12,35,10],[51,13,35,11],[52,4,36,2,"b"],[52,5,36,3],[52,8,36,6,"c"],[52,9,36,7],[52,12,36,10,"tx"],[52,14,36,12],[52,17,36,15,"ty"],[52,19,36,17],[52,22,36,20],[52,23,36,21],[53,4,37,2,"hasInitialState"],[53,19,37,17],[53,22,37,20],[53,26,37,24],[54,2,38,0],[56,2,40,0],[57,0,41,0],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,2,45,7],[61,11,45,16,"toArray"],[61,18,45,23,"toArray"],[61,19,45,23],[61,21,45,26],[62,4,46,2],[62,8,46,6,"hasInitialState"],[62,23,46,21],[62,25,46,23],[63,6,47,4],[63,13,47,11,"identity"],[63,21,47,19],[64,4,48,2],[65,4,49,2],[65,11,49,9],[65,12,49,10,"a"],[65,13,49,11],[65,15,49,13,"b"],[65,16,49,14],[65,18,49,16,"c"],[65,19,49,17],[65,21,49,19,"d"],[65,22,49,20],[65,24,49,22,"tx"],[65,26,49,24],[65,28,49,26,"ty"],[65,30,49,28],[65,31,49,29],[66,2,50,0],[68,2,52,0],[69,0,53,0],[70,0,54,0],[71,0,55,0],[72,0,56,0],[73,0,57,0],[74,0,58,0],[75,0,59,0],[76,0,60,0],[77,0,61,0],[78,0,62,0],[79,2,63,7],[79,11,63,16,"append"],[79,17,63,22,"append"],[79,18,63,23,"a2"],[79,20,63,25],[79,22,63,27,"b2"],[79,24,63,29],[79,26,63,31,"c2"],[79,28,63,33],[79,30,63,35,"d2"],[79,32,63,37],[79,34,63,39,"tx2"],[79,37,63,42],[79,39,63,44,"ty2"],[79,42,63,47],[79,44,63,49],[80,4,64,2],[80,10,64,8,"change"],[80,16,64,14],[80,19,64,17,"a2"],[80,21,64,19],[80,26,64,24],[80,27,64,25],[80,31,64,29,"b2"],[80,33,64,31],[80,38,64,36],[80,39,64,37],[80,43,64,41,"c2"],[80,45,64,43],[80,50,64,48],[80,51,64,49],[80,55,64,53,"d2"],[80,57,64,55],[80,62,64,60],[80,63,64,61],[81,4,65,2],[81,10,65,8,"translate"],[81,19,65,17],[81,22,65,20,"tx2"],[81,25,65,23],[81,30,65,28],[81,31,65,29],[81,35,65,33,"ty2"],[81,38,65,36],[81,43,65,41],[81,44,65,42],[82,4,66,2],[82,8,66,6],[82,9,66,7,"change"],[82,15,66,13],[82,19,66,17],[82,20,66,18,"translate"],[82,29,66,27],[82,31,66,29],[83,6,67,4],[84,4,68,2],[85,4,69,2],[85,8,69,6,"hasInitialState"],[85,23,69,21],[85,25,69,23],[86,6,70,4,"hasInitialState"],[86,21,70,19],[86,24,70,22],[86,29,70,27],[87,6,71,4,"a"],[87,7,71,5],[87,10,71,8,"a2"],[87,12,71,10],[88,6,72,4,"b"],[88,7,72,5],[88,10,72,8,"b2"],[88,12,72,10],[89,6,73,4,"c"],[89,7,73,5],[89,10,73,8,"c2"],[89,12,73,10],[90,6,74,4,"d"],[90,7,74,5],[90,10,74,8,"d2"],[90,12,74,10],[91,6,75,4,"tx"],[91,8,75,6],[91,11,75,9,"tx2"],[91,14,75,12],[92,6,76,4,"ty"],[92,8,76,6],[92,11,76,9,"ty2"],[92,14,76,12],[93,6,77,4],[94,4,78,2],[95,4,79,2],[95,10,79,8,"a1"],[95,12,79,10],[95,15,79,13,"a"],[95,16,79,14],[96,4,80,2],[96,10,80,8,"b1"],[96,12,80,10],[96,15,80,13,"b"],[96,16,80,14],[97,4,81,2],[97,10,81,8,"c1"],[97,12,81,10],[97,15,81,13,"c"],[97,16,81,14],[98,4,82,2],[98,10,82,8,"d1"],[98,12,82,10],[98,15,82,13,"d"],[98,16,82,14],[99,4,83,2],[99,8,83,6,"change"],[99,14,83,12],[99,16,83,14],[100,6,84,4,"a"],[100,7,84,5],[100,10,84,8,"a1"],[100,12,84,10],[100,15,84,13,"a2"],[100,17,84,15],[100,20,84,18,"c1"],[100,22,84,20],[100,25,84,23,"b2"],[100,27,84,25],[101,6,85,4,"b"],[101,7,85,5],[101,10,85,8,"b1"],[101,12,85,10],[101,15,85,13,"a2"],[101,17,85,15],[101,20,85,18,"d1"],[101,22,85,20],[101,25,85,23,"b2"],[101,27,85,25],[102,6,86,4,"c"],[102,7,86,5],[102,10,86,8,"a1"],[102,12,86,10],[102,15,86,13,"c2"],[102,17,86,15],[102,20,86,18,"c1"],[102,22,86,20],[102,25,86,23,"d2"],[102,27,86,25],[103,6,87,4,"d"],[103,7,87,5],[103,10,87,8,"b1"],[103,12,87,10],[103,15,87,13,"c2"],[103,17,87,15],[103,20,87,18,"d1"],[103,22,87,20],[103,25,87,23,"d2"],[103,27,87,25],[104,4,88,2],[105,4,89,2],[105,8,89,6,"translate"],[105,17,89,15],[105,19,89,17],[106,6,90,4,"tx"],[106,8,90,6],[106,11,90,9,"a1"],[106,13,90,11],[106,16,90,14,"tx2"],[106,19,90,17],[106,22,90,20,"c1"],[106,24,90,22],[106,27,90,25,"ty2"],[106,30,90,28],[106,33,90,31,"tx"],[106,35,90,33],[107,6,91,4,"ty"],[107,8,91,6],[107,11,91,9,"b1"],[107,13,91,11],[107,16,91,14,"tx2"],[107,19,91,17],[107,22,91,20,"d1"],[107,24,91,22],[107,27,91,25,"ty2"],[107,30,91,28],[107,33,91,31,"ty"],[107,35,91,33],[108,4,92,2],[109,2,93,0],[111,2,95,0],[112,0,96,0],[113,0,97,0],[114,0,98,0],[115,0,99,0],[116,0,100,0],[117,0,101,0],[118,0,102,0],[119,0,103,0],[120,0,104,0],[121,0,105,0],[122,0,106,0],[123,0,107,0],[124,0,108,0],[125,0,109,0],[126,0,110,0],[127,0,111,0],[128,0,112,0],[129,0,113,0],[130,2,114,7],[130,11,114,16,"appendTransform"],[130,26,114,31,"appendTransform"],[130,27,114,32,"x"],[130,28,114,33],[130,30,114,35,"y"],[130,31,114,36],[130,33,114,38,"scaleX"],[130,39,114,44],[130,41,114,46,"scaleY"],[130,47,114,52],[130,49,114,54,"rotation"],[130,57,114,62],[130,59,114,64,"skewX"],[130,64,114,69],[130,66,114,71,"skewY"],[130,71,114,76],[130,73,114,78,"regX"],[130,77,114,82],[130,79,114,84,"regY"],[130,83,114,88],[130,85,114,90],[131,4,115,2],[131,8,115,6,"x"],[131,9,115,7],[131,14,115,12],[131,15,115,13],[131,19,115,17,"y"],[131,20,115,18],[131,25,115,23],[131,26,115,24],[131,30,115,28,"scaleX"],[131,36,115,34],[131,41,115,39],[131,42,115,40],[131,46,115,44,"scaleY"],[131,52,115,50],[131,57,115,55],[131,58,115,56],[131,62,115,60,"rotation"],[131,70,115,68],[131,75,115,73],[131,76,115,74],[131,80,115,78,"skewX"],[131,85,115,83],[131,90,115,88],[131,91,115,89],[131,95,115,93,"skewY"],[131,100,115,98],[131,105,115,103],[131,106,115,104],[131,110,115,108,"regX"],[131,114,115,112],[131,119,115,117],[131,120,115,118],[131,124,115,122,"regY"],[131,128,115,126],[131,133,115,131],[131,134,115,132],[131,136,115,134],[132,6,116,4],[133,4,117,2],[134,4,118,2],[134,8,118,6,"cos"],[134,11,118,9],[134,13,118,11,"sin"],[134,16,118,14],[135,4,119,2],[135,8,119,6,"rotation"],[135,16,119,14],[135,19,119,17],[135,22,119,20],[135,24,119,22],[136,6,120,4],[136,12,120,10,"r"],[136,13,120,11],[136,16,120,14,"rotation"],[136,24,120,22],[136,27,120,25,"DEG_TO_RAD"],[136,37,120,35],[137,6,121,4,"cos"],[137,9,121,7],[137,12,121,10,"Math"],[137,16,121,14],[137,17,121,15,"cos"],[137,20,121,18],[137,21,121,19,"r"],[137,22,121,20],[137,23,121,21],[138,6,122,4,"sin"],[138,9,122,7],[138,12,122,10,"Math"],[138,16,122,14],[138,17,122,15,"sin"],[138,20,122,18],[138,21,122,19,"r"],[138,22,122,20],[138,23,122,21],[139,4,123,2],[139,5,123,3],[139,11,123,9],[140,6,124,4,"cos"],[140,9,124,7],[140,12,124,10],[140,13,124,11],[141,6,125,4,"sin"],[141,9,125,7],[141,12,125,10],[141,13,125,11],[142,4,126,2],[143,4,127,2],[143,10,127,8,"a2"],[143,12,127,10],[143,15,127,13,"cos"],[143,18,127,16],[143,21,127,19,"scaleX"],[143,27,127,25],[144,4,128,2],[144,10,128,8,"b2"],[144,12,128,10],[144,15,128,13,"sin"],[144,18,128,16],[144,21,128,19,"scaleX"],[144,27,128,25],[145,4,129,2],[145,10,129,8,"c2"],[145,12,129,10],[145,15,129,13],[145,16,129,14,"sin"],[145,19,129,17],[145,22,129,20,"scaleY"],[145,28,129,26],[146,4,130,2],[146,10,130,8,"d2"],[146,12,130,10],[146,15,130,13,"cos"],[146,18,130,16],[146,21,130,19,"scaleY"],[146,27,130,25],[147,4,131,2],[147,8,131,6,"skewX"],[147,13,131,11],[147,17,131,15,"skewY"],[147,22,131,20],[147,24,131,22],[148,6,132,4],[148,12,132,10,"b1"],[148,14,132,12],[148,17,132,15,"Math"],[148,21,132,19],[148,22,132,20,"tan"],[148,25,132,23],[148,26,132,24,"skewY"],[148,31,132,29],[148,34,132,32,"DEG_TO_RAD"],[148,44,132,42],[148,45,132,43],[149,6,133,4],[149,12,133,10,"c1"],[149,14,133,12],[149,17,133,15,"Math"],[149,21,133,19],[149,22,133,20,"tan"],[149,25,133,23],[149,26,133,24,"skewX"],[149,31,133,29],[149,34,133,32,"DEG_TO_RAD"],[149,44,133,42],[149,45,133,43],[150,6,134,4,"append"],[150,12,134,10],[150,13,134,11,"a2"],[150,15,134,13],[150,18,134,16,"c1"],[150,20,134,18],[150,23,134,21,"b2"],[150,25,134,23],[150,27,134,25,"b1"],[150,29,134,27],[150,32,134,30,"a2"],[150,34,134,32],[150,37,134,35,"b2"],[150,39,134,37],[150,41,134,39,"c2"],[150,43,134,41],[150,46,134,44,"c1"],[150,48,134,46],[150,51,134,49,"d2"],[150,53,134,51],[150,55,134,53,"b1"],[150,57,134,55],[150,60,134,58,"c2"],[150,62,134,60],[150,65,134,63,"d2"],[150,67,134,65],[150,69,134,67,"x"],[150,70,134,68],[150,72,134,70,"y"],[150,73,134,71],[150,74,134,72],[151,4,135,2],[151,5,135,3],[151,11,135,9],[152,6,136,4,"append"],[152,12,136,10],[152,13,136,11,"a2"],[152,15,136,13],[152,17,136,15,"b2"],[152,19,136,17],[152,21,136,19,"c2"],[152,23,136,21],[152,25,136,23,"d2"],[152,27,136,25],[152,29,136,27,"x"],[152,30,136,28],[152,32,136,30,"y"],[152,33,136,31],[152,34,136,32],[153,4,137,2],[154,4,138,2],[154,8,138,6,"regX"],[154,12,138,10],[154,16,138,14,"regY"],[154,20,138,18],[154,22,138,20],[155,6,139,4],[156,6,140,4,"tx"],[156,8,140,6],[156,12,140,10,"regX"],[156,16,140,14],[156,19,140,17,"a"],[156,20,140,18],[156,23,140,21,"regY"],[156,27,140,25],[156,30,140,28,"c"],[156,31,140,29],[157,6,141,4,"ty"],[157,8,141,6],[157,12,141,10,"regX"],[157,16,141,14],[157,19,141,17,"b"],[157,20,141,18],[157,23,141,21,"regY"],[157,27,141,25],[157,30,141,28,"d"],[157,31,141,29],[158,6,142,4,"hasInitialState"],[158,21,142,19],[158,24,142,22],[158,29,142,27],[159,4,143,2],[160,2,144,0],[161,0,144,1],[161,3]],"functionMap":{"names":["<global>","reset","toArray","append","appendTransform"],"mappings":"AAA;OC8B;CDO;OEO;CFK;OGa;CH8B;OIqB;CJ8B"},"hasCjsExports":false},"type":"js/module"}]}