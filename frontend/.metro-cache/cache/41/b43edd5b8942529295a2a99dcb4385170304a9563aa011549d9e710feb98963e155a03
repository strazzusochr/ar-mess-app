{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useMeasurementStore\", {\n    enumerable: true,\n    get: function () {\n      return useMeasurementStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  const STORAGE_KEY = '@measurements';\n  const useMeasurementStore = (0, _zustand.create)((set, get) => ({\n    measurements: [],\n    currentMode: 'distance',\n    currentPoints: [],\n    calibrationScale: null,\n    isCalibrated: false,\n    unit: 'metric',\n    currentMeasurement: null,\n    setMode: mode => set({\n      currentMode: mode,\n      currentPoints: []\n    }),\n    addPoint: point => {\n      const newPoint = Object.assign({}, point, {\n        id: Date.now().toString()\n      });\n      set(state => ({\n        currentPoints: [...state.currentPoints, newPoint]\n      }));\n    },\n    removeLastPoint: () => {\n      set(state => ({\n        currentPoints: state.currentPoints.slice(0, -1)\n      }));\n    },\n    clearPoints: () => set({\n      currentPoints: []\n    }),\n    setCalibration: scale => {\n      console.log('Setting calibration scale:', scale);\n      set({\n        calibrationScale: scale,\n        isCalibrated: true\n      });\n    },\n    toggleUnit: () => set(state => ({\n      unit: state.unit === 'metric' ? 'imperial' : 'metric'\n    })),\n    calculateResult: () => {\n      const {\n        currentPoints,\n        calibrationScale,\n        currentMode\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return {};\n      const pixelsToMm = pixels => pixels / calibrationScale;\n      if (currentMode === 'distance') {\n        let totalDistance = 0;\n        for (let i = 0; i < currentPoints.length - 1; i++) {\n          const dx = currentPoints[i + 1].x - currentPoints[i].x;\n          const dy = currentPoints[i + 1].y - currentPoints[i].y;\n          const distancePixels = Math.sqrt(dx * dx + dy * dy);\n          totalDistance += pixelsToMm(distancePixels);\n        }\n        return {\n          distance: totalDistance\n        };\n      }\n      if ((currentMode === 'area' || currentMode === 'volume') && currentPoints.length >= 3) {\n        // Shoelace formula for polygon area\n        let area = 0;\n        let perimeter = 0;\n        const n = currentPoints.length;\n        for (let i = 0; i < n; i++) {\n          const j = (i + 1) % n;\n          const xi = pixelsToMm(currentPoints[i].x);\n          const yi = pixelsToMm(currentPoints[i].y);\n          const xj = pixelsToMm(currentPoints[j].x);\n          const yj = pixelsToMm(currentPoints[j].y);\n          area += xi * yj - xj * yi;\n          const dx = xj - xi;\n          const dy = yj - yi;\n          perimeter += Math.sqrt(dx * dx + dy * dy);\n        }\n        area = Math.abs(area) / 2;\n        return {\n          area,\n          perimeter\n        };\n      }\n      return {};\n    },\n    saveMeasurement: async (name, imageData) => {\n      const {\n        currentMode,\n        currentPoints,\n        calibrationScale,\n        unit\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return;\n      const result = get().calculateResult();\n      const measurement = {\n        id: Date.now().toString(),\n        name,\n        mode: currentMode,\n        points: currentPoints,\n        calibrationScale,\n        result,\n        unit,\n        timestamp: Date.now(),\n        imageData\n      };\n      const measurements = [...get().measurements, measurement];\n      set({\n        measurements,\n        currentPoints: []\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error saving measurement:', error);\n      }\n    },\n    loadMeasurements: async () => {\n      try {\n        const data = await AsyncStorage.default.getItem(STORAGE_KEY);\n        if (data) {\n          const measurements = JSON.parse(data);\n          set({\n            measurements\n          });\n        }\n      } catch (error) {\n        console.error('Error loading measurements:', error);\n      }\n    },\n    deleteMeasurement: async id => {\n      const measurements = get().measurements.filter(m => m.id !== id);\n      set({\n        measurements\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error deleting measurement:', error);\n      }\n    }\n  }));\n});","lineCount":160,"map":[[12,2,54,0,"Object"],[12,8,54,0],[12,9,54,0,"defineProperty"],[12,23,54,0],[12,24,54,0,"exports"],[12,31,54,0],[13,4,54,0,"enumerable"],[13,14,54,0],[14,4,54,0,"get"],[14,7,54,0],[14,18,54,0,"get"],[14,19,54,0],[15,6,54,0],[15,13,54,0,"useMeasurementStore"],[15,32,54,0],[16,4,54,0],[17,2,54,0],[18,2,1,0],[18,6,1,0,"_zustand"],[18,14,1,0],[18,17,1,0,"require"],[18,24,1,0],[18,25,1,0,"_dependencyMap"],[18,39,1,0],[19,2,2,0],[19,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[19,42,2,0],[19,45,2,0,"require"],[19,52,2,0],[19,53,2,0,"_dependencyMap"],[19,67,2,0],[20,2,2,0],[20,6,2,0,"AsyncStorage"],[20,18,2,0],[20,21,2,0,"_interopDefault"],[20,36,2,0],[20,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[20,73,2,0],[21,2,52,0],[21,8,52,6,"STORAGE_KEY"],[21,19,52,17],[21,22,52,20],[21,37,52,35],[22,2,54,7],[22,8,54,13,"useMeasurementStore"],[22,27,54,32],[22,30,54,35],[22,34,54,35,"create"],[22,42,54,41],[22,43,54,41,"create"],[22,49,54,41],[22,51,54,60],[22,52,54,61,"set"],[22,55,54,64],[22,57,54,66,"get"],[22,60,54,69],[22,66,54,75],[23,4,55,2,"measurements"],[23,16,55,14],[23,18,55,16],[23,20,55,18],[24,4,56,2,"currentMode"],[24,15,56,13],[24,17,56,15],[24,27,56,25],[25,4,57,2,"currentPoints"],[25,17,57,15],[25,19,57,17],[25,21,57,19],[26,4,58,2,"calibrationScale"],[26,20,58,18],[26,22,58,20],[26,26,58,24],[27,4,59,2,"isCalibrated"],[27,16,59,14],[27,18,59,16],[27,23,59,21],[28,4,60,2,"unit"],[28,8,60,6],[28,10,60,8],[28,18,60,16],[29,4,61,2,"currentMeasurement"],[29,22,61,20],[29,24,61,22],[29,28,61,26],[30,4,63,2,"setMode"],[30,11,63,9],[30,13,63,12,"mode"],[30,17,63,16],[30,21,63,21,"set"],[30,24,63,24],[30,25,63,25],[31,6,63,27,"currentMode"],[31,17,63,38],[31,19,63,40,"mode"],[31,23,63,44],[32,6,63,46,"currentPoints"],[32,19,63,59],[32,21,63,61],[33,4,63,64],[33,5,63,65],[33,6,63,66],[34,4,65,2,"addPoint"],[34,12,65,10],[34,14,65,13,"point"],[34,19,65,18],[34,23,65,23],[35,6,66,4],[35,12,66,10,"newPoint"],[35,20,66,18],[35,23,66,18,"Object"],[35,29,66,18],[35,30,66,18,"assign"],[35,36,66,18],[35,41,66,26,"point"],[35,46,66,31],[36,8,66,33,"id"],[36,10,66,35],[36,12,66,37,"Date"],[36,16,66,41],[36,17,66,42,"now"],[36,20,66,45],[36,21,66,46],[36,22,66,47],[36,23,66,48,"toString"],[36,31,66,56],[36,32,66,57],[37,6,66,58],[37,8,66,60],[38,6,67,4,"set"],[38,9,67,7],[38,10,67,9,"state"],[38,15,67,14],[38,20,67,20],[39,8,67,22,"currentPoints"],[39,21,67,35],[39,23,67,37],[39,24,67,38],[39,27,67,41,"state"],[39,32,67,46],[39,33,67,47,"currentPoints"],[39,46,67,60],[39,48,67,62,"newPoint"],[39,56,67,70],[40,6,67,72],[40,7,67,73],[40,8,67,74],[40,9,67,75],[41,4,68,2],[41,5,68,3],[42,4,70,2,"removeLastPoint"],[42,19,70,17],[42,21,70,19,"removeLastPoint"],[42,22,70,19],[42,27,70,25],[43,6,71,4,"set"],[43,9,71,7],[43,10,71,9,"state"],[43,15,71,14],[43,20,71,20],[44,8,72,6,"currentPoints"],[44,21,72,19],[44,23,72,21,"state"],[44,28,72,26],[44,29,72,27,"currentPoints"],[44,42,72,40],[44,43,72,41,"slice"],[44,48,72,46],[44,49,72,47],[44,50,72,48],[44,52,72,50],[44,53,72,51],[44,54,72,52],[45,6,73,4],[45,7,73,5],[45,8,73,6],[45,9,73,7],[46,4,74,2],[46,5,74,3],[47,4,76,2,"clearPoints"],[47,15,76,13],[47,17,76,15,"clearPoints"],[47,18,76,15],[47,23,76,21,"set"],[47,26,76,24],[47,27,76,25],[48,6,76,27,"currentPoints"],[48,19,76,40],[48,21,76,42],[49,4,76,45],[49,5,76,46],[49,6,76,47],[50,4,78,2,"setCalibration"],[50,18,78,16],[50,20,78,19,"scale"],[50,25,78,24],[50,29,78,29],[51,6,79,4,"console"],[51,13,79,11],[51,14,79,12,"log"],[51,17,79,15],[51,18,79,16],[51,46,79,44],[51,48,79,46,"scale"],[51,53,79,51],[51,54,79,52],[52,6,80,4,"set"],[52,9,80,7],[52,10,80,8],[53,8,80,10,"calibrationScale"],[53,24,80,26],[53,26,80,28,"scale"],[53,31,80,33],[54,8,80,35,"isCalibrated"],[54,20,80,47],[54,22,80,49],[55,6,80,54],[55,7,80,55],[55,8,80,56],[56,4,81,2],[56,5,81,3],[57,4,83,2,"toggleUnit"],[57,14,83,12],[57,16,83,14,"toggleUnit"],[57,17,83,14],[57,22,83,20,"set"],[57,25,83,23],[57,26,83,25,"state"],[57,31,83,30],[57,36,83,36],[58,6,83,38,"unit"],[58,10,83,42],[58,12,83,44,"state"],[58,17,83,49],[58,18,83,50,"unit"],[58,22,83,54],[58,27,83,59],[58,35,83,67],[58,38,83,70],[58,48,83,80],[58,51,83,83],[59,4,83,92],[59,5,83,93],[59,6,83,94],[59,7,83,95],[60,4,85,2,"calculateResult"],[60,19,85,17],[60,21,85,19,"calculateResult"],[60,22,85,19],[60,27,85,25],[61,6,86,4],[61,12,86,10],[62,8,86,12,"currentPoints"],[62,21,86,25],[63,8,86,27,"calibrationScale"],[63,24,86,43],[64,8,86,45,"currentMode"],[65,6,86,57],[65,7,86,58],[65,10,86,61,"get"],[65,13,86,64],[65,14,86,65],[65,15,86,66],[66,6,87,4],[66,10,87,8],[66,11,87,9,"calibrationScale"],[66,27,87,25],[66,31,87,29,"currentPoints"],[66,44,87,42],[66,45,87,43,"length"],[66,51,87,49],[66,54,87,52],[66,55,87,53],[66,57,87,55],[66,64,87,62],[66,65,87,63],[66,66,87,64],[67,6,89,4],[67,12,89,10,"pixelsToMm"],[67,22,89,20],[67,25,89,24,"pixels"],[67,31,89,38],[67,35,89,43,"pixels"],[67,41,89,49],[67,44,89,52,"calibrationScale"],[67,60,89,68],[68,6,91,4],[68,10,91,8,"currentMode"],[68,21,91,19],[68,26,91,24],[68,36,91,34],[68,38,91,36],[69,8,92,6],[69,12,92,10,"totalDistance"],[69,25,92,23],[69,28,92,26],[69,29,92,27],[70,8,93,6],[70,13,93,11],[70,17,93,15,"i"],[70,18,93,16],[70,21,93,19],[70,22,93,20],[70,24,93,22,"i"],[70,25,93,23],[70,28,93,26,"currentPoints"],[70,41,93,39],[70,42,93,40,"length"],[70,48,93,46],[70,51,93,49],[70,52,93,50],[70,54,93,52,"i"],[70,55,93,53],[70,57,93,55],[70,59,93,57],[71,10,94,8],[71,16,94,14,"dx"],[71,18,94,16],[71,21,94,19,"currentPoints"],[71,34,94,32],[71,35,94,33,"i"],[71,36,94,34],[71,39,94,37],[71,40,94,38],[71,41,94,39],[71,42,94,40,"x"],[71,43,94,41],[71,46,94,44,"currentPoints"],[71,59,94,57],[71,60,94,58,"i"],[71,61,94,59],[71,62,94,60],[71,63,94,61,"x"],[71,64,94,62],[72,10,95,8],[72,16,95,14,"dy"],[72,18,95,16],[72,21,95,19,"currentPoints"],[72,34,95,32],[72,35,95,33,"i"],[72,36,95,34],[72,39,95,37],[72,40,95,38],[72,41,95,39],[72,42,95,40,"y"],[72,43,95,41],[72,46,95,44,"currentPoints"],[72,59,95,57],[72,60,95,58,"i"],[72,61,95,59],[72,62,95,60],[72,63,95,61,"y"],[72,64,95,62],[73,10,96,8],[73,16,96,14,"distancePixels"],[73,30,96,28],[73,33,96,31,"Math"],[73,37,96,35],[73,38,96,36,"sqrt"],[73,42,96,40],[73,43,96,41,"dx"],[73,45,96,43],[73,48,96,46,"dx"],[73,50,96,48],[73,53,96,51,"dy"],[73,55,96,53],[73,58,96,56,"dy"],[73,60,96,58],[73,61,96,59],[74,10,97,8,"totalDistance"],[74,23,97,21],[74,27,97,25,"pixelsToMm"],[74,37,97,35],[74,38,97,36,"distancePixels"],[74,52,97,50],[74,53,97,51],[75,8,98,6],[76,8,99,6],[76,15,99,13],[77,10,99,15,"distance"],[77,18,99,23],[77,20,99,25,"totalDistance"],[78,8,99,39],[78,9,99,40],[79,6,100,4],[80,6,102,4],[80,10,102,8],[80,11,102,9,"currentMode"],[80,22,102,20],[80,27,102,25],[80,33,102,31],[80,37,102,35,"currentMode"],[80,48,102,46],[80,53,102,51],[80,61,102,59],[80,66,102,64,"currentPoints"],[80,79,102,77],[80,80,102,78,"length"],[80,86,102,84],[80,90,102,88],[80,91,102,89],[80,93,102,91],[81,8,103,6],[82,8,104,6],[82,12,104,10,"area"],[82,16,104,14],[82,19,104,17],[82,20,104,18],[83,8,105,6],[83,12,105,10,"perimeter"],[83,21,105,19],[83,24,105,22],[83,25,105,23],[84,8,106,6],[84,14,106,12,"n"],[84,15,106,13],[84,18,106,16,"currentPoints"],[84,31,106,29],[84,32,106,30,"length"],[84,38,106,36],[85,8,108,6],[85,13,108,11],[85,17,108,15,"i"],[85,18,108,16],[85,21,108,19],[85,22,108,20],[85,24,108,22,"i"],[85,25,108,23],[85,28,108,26,"n"],[85,29,108,27],[85,31,108,29,"i"],[85,32,108,30],[85,34,108,32],[85,36,108,34],[86,10,109,8],[86,16,109,14,"j"],[86,17,109,15],[86,20,109,18],[86,21,109,19,"i"],[86,22,109,20],[86,25,109,23],[86,26,109,24],[86,30,109,28,"n"],[86,31,109,29],[87,10,110,8],[87,16,110,14,"xi"],[87,18,110,16],[87,21,110,19,"pixelsToMm"],[87,31,110,29],[87,32,110,30,"currentPoints"],[87,45,110,43],[87,46,110,44,"i"],[87,47,110,45],[87,48,110,46],[87,49,110,47,"x"],[87,50,110,48],[87,51,110,49],[88,10,111,8],[88,16,111,14,"yi"],[88,18,111,16],[88,21,111,19,"pixelsToMm"],[88,31,111,29],[88,32,111,30,"currentPoints"],[88,45,111,43],[88,46,111,44,"i"],[88,47,111,45],[88,48,111,46],[88,49,111,47,"y"],[88,50,111,48],[88,51,111,49],[89,10,112,8],[89,16,112,14,"xj"],[89,18,112,16],[89,21,112,19,"pixelsToMm"],[89,31,112,29],[89,32,112,30,"currentPoints"],[89,45,112,43],[89,46,112,44,"j"],[89,47,112,45],[89,48,112,46],[89,49,112,47,"x"],[89,50,112,48],[89,51,112,49],[90,10,113,8],[90,16,113,14,"yj"],[90,18,113,16],[90,21,113,19,"pixelsToMm"],[90,31,113,29],[90,32,113,30,"currentPoints"],[90,45,113,43],[90,46,113,44,"j"],[90,47,113,45],[90,48,113,46],[90,49,113,47,"y"],[90,50,113,48],[90,51,113,49],[91,10,115,8,"area"],[91,14,115,12],[91,18,115,16,"xi"],[91,20,115,18],[91,23,115,21,"yj"],[91,25,115,23],[91,28,115,26,"xj"],[91,30,115,28],[91,33,115,31,"yi"],[91,35,115,33],[92,10,117,8],[92,16,117,14,"dx"],[92,18,117,16],[92,21,117,19,"xj"],[92,23,117,21],[92,26,117,24,"xi"],[92,28,117,26],[93,10,118,8],[93,16,118,14,"dy"],[93,18,118,16],[93,21,118,19,"yj"],[93,23,118,21],[93,26,118,24,"yi"],[93,28,118,26],[94,10,119,8,"perimeter"],[94,19,119,17],[94,23,119,21,"Math"],[94,27,119,25],[94,28,119,26,"sqrt"],[94,32,119,30],[94,33,119,31,"dx"],[94,35,119,33],[94,38,119,36,"dx"],[94,40,119,38],[94,43,119,41,"dy"],[94,45,119,43],[94,48,119,46,"dy"],[94,50,119,48],[94,51,119,49],[95,8,120,6],[96,8,122,6,"area"],[96,12,122,10],[96,15,122,13,"Math"],[96,19,122,17],[96,20,122,18,"abs"],[96,23,122,21],[96,24,122,22,"area"],[96,28,122,26],[96,29,122,27],[96,32,122,30],[96,33,122,31],[97,8,123,6],[97,15,123,13],[98,10,123,15,"area"],[98,14,123,19],[99,10,123,21,"perimeter"],[100,8,123,31],[100,9,123,32],[101,6,124,4],[102,6,126,4],[102,13,126,11],[102,14,126,12],[102,15,126,13],[103,4,127,2],[103,5,127,3],[104,4,129,2,"saveMeasurement"],[104,19,129,17],[104,21,129,19],[104,27,129,19,"saveMeasurement"],[104,28,129,26,"name"],[104,32,129,30],[104,34,129,32,"imageData"],[104,43,129,41],[104,48,129,46],[105,6,130,4],[105,12,130,10],[106,8,130,12,"currentMode"],[106,19,130,23],[107,8,130,25,"currentPoints"],[107,21,130,38],[108,8,130,40,"calibrationScale"],[108,24,130,56],[109,8,130,58,"unit"],[110,6,130,63],[110,7,130,64],[110,10,130,67,"get"],[110,13,130,70],[110,14,130,71],[110,15,130,72],[111,6,131,4],[111,10,131,8],[111,11,131,9,"calibrationScale"],[111,27,131,25],[111,31,131,29,"currentPoints"],[111,44,131,42],[111,45,131,43,"length"],[111,51,131,49],[111,54,131,52],[111,55,131,53],[111,57,131,55],[112,6,133,4],[112,12,133,10,"result"],[112,18,133,16],[112,21,133,19,"get"],[112,24,133,22],[112,25,133,23],[112,26,133,24],[112,27,133,25,"calculateResult"],[112,42,133,40],[112,43,133,41],[112,44,133,42],[113,6,134,4],[113,12,134,10,"measurement"],[113,23,134,34],[113,26,134,37],[114,8,135,6,"id"],[114,10,135,8],[114,12,135,10,"Date"],[114,16,135,14],[114,17,135,15,"now"],[114,20,135,18],[114,21,135,19],[114,22,135,20],[114,23,135,21,"toString"],[114,31,135,29],[114,32,135,30],[114,33,135,31],[115,8,136,6,"name"],[115,12,136,10],[116,8,137,6,"mode"],[116,12,137,10],[116,14,137,12,"currentMode"],[116,25,137,23],[117,8,138,6,"points"],[117,14,138,12],[117,16,138,14,"currentPoints"],[117,29,138,27],[118,8,139,6,"calibrationScale"],[118,24,139,22],[119,8,140,6,"result"],[119,14,140,12],[120,8,141,6,"unit"],[120,12,141,10],[121,8,142,6,"timestamp"],[121,17,142,15],[121,19,142,17,"Date"],[121,23,142,21],[121,24,142,22,"now"],[121,27,142,25],[121,28,142,26],[121,29,142,27],[122,8,143,6,"imageData"],[123,6,144,4],[123,7,144,5],[124,6,146,4],[124,12,146,10,"measurements"],[124,24,146,22],[124,27,146,25],[124,28,146,26],[124,31,146,29,"get"],[124,34,146,32],[124,35,146,33],[124,36,146,34],[124,37,146,35,"measurements"],[124,49,146,47],[124,51,146,49,"measurement"],[124,62,146,60],[124,63,146,61],[125,6,147,4,"set"],[125,9,147,7],[125,10,147,8],[126,8,147,10,"measurements"],[126,20,147,22],[127,8,147,24,"currentPoints"],[127,21,147,37],[127,23,147,39],[128,6,147,42],[128,7,147,43],[128,8,147,44],[129,6,149,4],[129,10,149,8],[130,8,150,6],[130,14,150,12,"AsyncStorage"],[130,26,150,24],[130,27,150,24,"default"],[130,34,150,24],[130,35,150,25,"setItem"],[130,42,150,32],[130,43,150,33,"STORAGE_KEY"],[130,54,150,44],[130,56,150,46,"JSON"],[130,60,150,50],[130,61,150,51,"stringify"],[130,70,150,60],[130,71,150,61,"measurements"],[130,83,150,73],[130,84,150,74],[130,85,150,75],[131,6,151,4],[131,7,151,5],[131,8,151,6],[131,15,151,13,"error"],[131,20,151,18],[131,22,151,20],[132,8,152,6,"console"],[132,15,152,13],[132,16,152,14,"error"],[132,21,152,19],[132,22,152,20],[132,49,152,47],[132,51,152,49,"error"],[132,56,152,54],[132,57,152,55],[133,6,153,4],[134,4,154,2],[134,5,154,3],[135,4,156,2,"loadMeasurements"],[135,20,156,18],[135,22,156,20],[135,28,156,20,"loadMeasurements"],[135,29,156,20],[135,34,156,32],[136,6,157,4],[136,10,157,8],[137,8,158,6],[137,14,158,12,"data"],[137,18,158,16],[137,21,158,19],[137,27,158,25,"AsyncStorage"],[137,39,158,37],[137,40,158,37,"default"],[137,47,158,37],[137,48,158,38,"getItem"],[137,55,158,45],[137,56,158,46,"STORAGE_KEY"],[137,67,158,57],[137,68,158,58],[138,8,159,6],[138,12,159,10,"data"],[138,16,159,14],[138,18,159,16],[139,10,160,8],[139,16,160,14,"measurements"],[139,28,160,26],[139,31,160,29,"JSON"],[139,35,160,33],[139,36,160,34,"parse"],[139,41,160,39],[139,42,160,40,"data"],[139,46,160,44],[139,47,160,45],[140,10,161,8,"set"],[140,13,161,11],[140,14,161,12],[141,12,161,14,"measurements"],[142,10,161,27],[142,11,161,28],[142,12,161,29],[143,8,162,6],[144,6,163,4],[144,7,163,5],[144,8,163,6],[144,15,163,13,"error"],[144,20,163,18],[144,22,163,20],[145,8,164,6,"console"],[145,15,164,13],[145,16,164,14,"error"],[145,21,164,19],[145,22,164,20],[145,51,164,49],[145,53,164,51,"error"],[145,58,164,56],[145,59,164,57],[146,6,165,4],[147,4,166,2],[147,5,166,3],[148,4,168,2,"deleteMeasurement"],[148,21,168,19],[148,23,168,21],[148,29,168,28,"id"],[148,31,168,30],[148,35,168,35],[149,6,169,4],[149,12,169,10,"measurements"],[149,24,169,22],[149,27,169,25,"get"],[149,30,169,28],[149,31,169,29],[149,32,169,30],[149,33,169,31,"measurements"],[149,45,169,43],[149,46,169,44,"filter"],[149,52,169,50],[149,53,169,52,"m"],[149,54,169,53],[149,58,169,58,"m"],[149,59,169,59],[149,60,169,60,"id"],[149,62,169,62],[149,67,169,67,"id"],[149,69,169,69],[149,70,169,70],[150,6,170,4,"set"],[150,9,170,7],[150,10,170,8],[151,8,170,10,"measurements"],[152,6,170,23],[152,7,170,24],[152,8,170,25],[153,6,171,4],[153,10,171,8],[154,8,172,6],[154,14,172,12,"AsyncStorage"],[154,26,172,24],[154,27,172,24,"default"],[154,34,172,24],[154,35,172,25,"setItem"],[154,42,172,32],[154,43,172,33,"STORAGE_KEY"],[154,54,172,44],[154,56,172,46,"JSON"],[154,60,172,50],[154,61,172,51,"stringify"],[154,70,172,60],[154,71,172,61,"measurements"],[154,83,172,73],[154,84,172,74],[154,85,172,75],[155,6,173,4],[155,7,173,5],[155,8,173,6],[155,15,173,13,"error"],[155,20,173,18],[155,22,173,20],[156,8,174,6,"console"],[156,15,174,13],[156,16,174,14,"error"],[156,21,174,19],[156,22,174,20],[156,51,174,49],[156,53,174,51,"error"],[156,58,174,56],[156,59,174,57],[157,6,175,4],[158,4,176,2],[159,2,177,0],[159,3,177,1],[159,4,177,2],[159,5,177,3],[160,0,177,4],[160,3]],"functionMap":{"names":["<global>","create$argument_0","setMode","addPoint","set$argument_0","removeLastPoint","clearPoints","setCalibration","toggleUnit","calculateResult","pixelsToMm","saveMeasurement","loadMeasurements","deleteMeasurement","get.measurements.filter$argument_0"],"mappings":"AAA;4DCqD;WCS,uDD;YEE;QCE,kED;GFC;mBIE;QDC;MCE;GJC;eKE,gCL;kBME;GNG;cOE,UJ,sEI,CP;mBQE;uBCI,6CD;GRsC;mBUE;GVyB;oBWE;GXU;qBYE;mDCC,kBD;GZO;EDC"},"hasCjsExports":false},"type":"js/module"}]}