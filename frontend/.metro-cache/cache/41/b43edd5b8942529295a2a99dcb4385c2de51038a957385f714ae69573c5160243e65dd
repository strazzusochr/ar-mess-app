{"dependencies":[{"name":"zustand","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"POPvx7yS3Y3wz+S/9OAefiXNs0Q=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":69,"index":103}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"useMeasurementStore\", {\n    enumerable: true,\n    get: function () {\n      return useMeasurementStore;\n    }\n  });\n  var _zustand = require(_dependencyMap[0], \"zustand\");\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  const STORAGE_KEY = '@measurements';\n  const useMeasurementStore = (0, _zustand.create)((set, get) => ({\n    measurements: [],\n    currentMode: 'distance',\n    currentPoints: [],\n    calibrationScale: null,\n    isCalibrated: false,\n    unit: 'metric',\n    currentMeasurement: null,\n    setMode: mode => set({\n      currentMode: mode,\n      currentPoints: []\n    }),\n    addPoint: point => {\n      const newPoint = Object.assign({}, point, {\n        id: Date.now().toString()\n      });\n      set(state => ({\n        currentPoints: [...state.currentPoints, newPoint]\n      }));\n    },\n    removeLastPoint: () => {\n      set(state => ({\n        currentPoints: state.currentPoints.slice(0, -1)\n      }));\n    },\n    clearPoints: () => set({\n      currentPoints: []\n    }),\n    setCalibration: scale => set({\n      calibrationScale: scale,\n      isCalibrated: true\n    }),\n    toggleUnit: () => set(state => ({\n      unit: state.unit === 'metric' ? 'imperial' : 'metric'\n    })),\n    calculateResult: () => {\n      const {\n        currentPoints,\n        calibrationScale,\n        currentMode\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return {};\n      const pixelsToMm = pixels => pixels / calibrationScale;\n      if (currentMode === 'distance') {\n        let totalDistance = 0;\n        for (let i = 0; i < currentPoints.length - 1; i++) {\n          const dx = currentPoints[i + 1].x - currentPoints[i].x;\n          const dy = currentPoints[i + 1].y - currentPoints[i].y;\n          const distancePixels = Math.sqrt(dx * dx + dy * dy);\n          totalDistance += pixelsToMm(distancePixels);\n        }\n        return {\n          distance: totalDistance\n        };\n      }\n      if ((currentMode === 'area' || currentMode === 'volume') && currentPoints.length >= 3) {\n        // Shoelace formula for polygon area\n        let area = 0;\n        let perimeter = 0;\n        const n = currentPoints.length;\n        for (let i = 0; i < n; i++) {\n          const j = (i + 1) % n;\n          const xi = pixelsToMm(currentPoints[i].x);\n          const yi = pixelsToMm(currentPoints[i].y);\n          const xj = pixelsToMm(currentPoints[j].x);\n          const yj = pixelsToMm(currentPoints[j].y);\n          area += xi * yj - xj * yi;\n          const dx = xj - xi;\n          const dy = yj - yi;\n          perimeter += Math.sqrt(dx * dx + dy * dy);\n        }\n        area = Math.abs(area) / 2;\n        return {\n          area,\n          perimeter\n        };\n      }\n      return {};\n    },\n    saveMeasurement: async (name, imageData) => {\n      const {\n        currentMode,\n        currentPoints,\n        calibrationScale,\n        unit\n      } = get();\n      if (!calibrationScale || currentPoints.length < 2) return;\n      const result = get().calculateResult();\n      const measurement = {\n        id: Date.now().toString(),\n        name,\n        mode: currentMode,\n        points: currentPoints,\n        calibrationScale,\n        result,\n        unit,\n        timestamp: Date.now(),\n        imageData\n      };\n      const measurements = [...get().measurements, measurement];\n      set({\n        measurements,\n        currentPoints: []\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error saving measurement:', error);\n      }\n    },\n    loadMeasurements: async () => {\n      try {\n        const data = await AsyncStorage.default.getItem(STORAGE_KEY);\n        if (data) {\n          const measurements = JSON.parse(data);\n          set({\n            measurements\n          });\n        }\n      } catch (error) {\n        console.error('Error loading measurements:', error);\n      }\n    },\n    deleteMeasurement: async id => {\n      const measurements = get().measurements.filter(m => m.id !== id);\n      set({\n        measurements\n      });\n      try {\n        await AsyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(measurements));\n      } catch (error) {\n        console.error('Error deleting measurement:', error);\n      }\n    }\n  }));\n});","lineCount":157,"map":[[12,2,54,0,"Object"],[12,8,54,0],[12,9,54,0,"defineProperty"],[12,23,54,0],[12,24,54,0,"exports"],[12,31,54,0],[13,4,54,0,"enumerable"],[13,14,54,0],[14,4,54,0,"get"],[14,7,54,0],[14,18,54,0,"get"],[14,19,54,0],[15,6,54,0],[15,13,54,0,"useMeasurementStore"],[15,32,54,0],[16,4,54,0],[17,2,54,0],[18,2,1,0],[18,6,1,0,"_zustand"],[18,14,1,0],[18,17,1,0,"require"],[18,24,1,0],[18,25,1,0,"_dependencyMap"],[18,39,1,0],[19,2,2,0],[19,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[19,42,2,0],[19,45,2,0,"require"],[19,52,2,0],[19,53,2,0,"_dependencyMap"],[19,67,2,0],[20,2,2,0],[20,6,2,0,"AsyncStorage"],[20,18,2,0],[20,21,2,0,"_interopDefault"],[20,36,2,0],[20,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[20,73,2,0],[21,2,52,0],[21,8,52,6,"STORAGE_KEY"],[21,19,52,17],[21,22,52,20],[21,37,52,35],[22,2,54,7],[22,8,54,13,"useMeasurementStore"],[22,27,54,32],[22,30,54,35],[22,34,54,35,"create"],[22,42,54,41],[22,43,54,41,"create"],[22,49,54,41],[22,51,54,60],[22,52,54,61,"set"],[22,55,54,64],[22,57,54,66,"get"],[22,60,54,69],[22,66,54,75],[23,4,55,2,"measurements"],[23,16,55,14],[23,18,55,16],[23,20,55,18],[24,4,56,2,"currentMode"],[24,15,56,13],[24,17,56,15],[24,27,56,25],[25,4,57,2,"currentPoints"],[25,17,57,15],[25,19,57,17],[25,21,57,19],[26,4,58,2,"calibrationScale"],[26,20,58,18],[26,22,58,20],[26,26,58,24],[27,4,59,2,"isCalibrated"],[27,16,59,14],[27,18,59,16],[27,23,59,21],[28,4,60,2,"unit"],[28,8,60,6],[28,10,60,8],[28,18,60,16],[29,4,61,2,"currentMeasurement"],[29,22,61,20],[29,24,61,22],[29,28,61,26],[30,4,63,2,"setMode"],[30,11,63,9],[30,13,63,12,"mode"],[30,17,63,16],[30,21,63,21,"set"],[30,24,63,24],[30,25,63,25],[31,6,63,27,"currentMode"],[31,17,63,38],[31,19,63,40,"mode"],[31,23,63,44],[32,6,63,46,"currentPoints"],[32,19,63,59],[32,21,63,61],[33,4,63,64],[33,5,63,65],[33,6,63,66],[34,4,65,2,"addPoint"],[34,12,65,10],[34,14,65,13,"point"],[34,19,65,18],[34,23,65,23],[35,6,66,4],[35,12,66,10,"newPoint"],[35,20,66,18],[35,23,66,18,"Object"],[35,29,66,18],[35,30,66,18,"assign"],[35,36,66,18],[35,41,66,26,"point"],[35,46,66,31],[36,8,66,33,"id"],[36,10,66,35],[36,12,66,37,"Date"],[36,16,66,41],[36,17,66,42,"now"],[36,20,66,45],[36,21,66,46],[36,22,66,47],[36,23,66,48,"toString"],[36,31,66,56],[36,32,66,57],[37,6,66,58],[37,8,66,60],[38,6,67,4,"set"],[38,9,67,7],[38,10,67,9,"state"],[38,15,67,14],[38,20,67,20],[39,8,67,22,"currentPoints"],[39,21,67,35],[39,23,67,37],[39,24,67,38],[39,27,67,41,"state"],[39,32,67,46],[39,33,67,47,"currentPoints"],[39,46,67,60],[39,48,67,62,"newPoint"],[39,56,67,70],[40,6,67,72],[40,7,67,73],[40,8,67,74],[40,9,67,75],[41,4,68,2],[41,5,68,3],[42,4,70,2,"removeLastPoint"],[42,19,70,17],[42,21,70,19,"removeLastPoint"],[42,22,70,19],[42,27,70,25],[43,6,71,4,"set"],[43,9,71,7],[43,10,71,9,"state"],[43,15,71,14],[43,20,71,20],[44,8,72,6,"currentPoints"],[44,21,72,19],[44,23,72,21,"state"],[44,28,72,26],[44,29,72,27,"currentPoints"],[44,42,72,40],[44,43,72,41,"slice"],[44,48,72,46],[44,49,72,47],[44,50,72,48],[44,52,72,50],[44,53,72,51],[44,54,72,52],[45,6,73,4],[45,7,73,5],[45,8,73,6],[45,9,73,7],[46,4,74,2],[46,5,74,3],[47,4,76,2,"clearPoints"],[47,15,76,13],[47,17,76,15,"clearPoints"],[47,18,76,15],[47,23,76,21,"set"],[47,26,76,24],[47,27,76,25],[48,6,76,27,"currentPoints"],[48,19,76,40],[48,21,76,42],[49,4,76,45],[49,5,76,46],[49,6,76,47],[50,4,78,2,"setCalibration"],[50,18,78,16],[50,20,78,19,"scale"],[50,25,78,24],[50,29,78,29,"set"],[50,32,78,32],[50,33,78,33],[51,6,78,35,"calibrationScale"],[51,22,78,51],[51,24,78,53,"scale"],[51,29,78,58],[52,6,78,60,"isCalibrated"],[52,18,78,72],[52,20,78,74],[53,4,78,79],[53,5,78,80],[53,6,78,81],[54,4,80,2,"toggleUnit"],[54,14,80,12],[54,16,80,14,"toggleUnit"],[54,17,80,14],[54,22,80,20,"set"],[54,25,80,23],[54,26,80,25,"state"],[54,31,80,30],[54,36,80,36],[55,6,80,38,"unit"],[55,10,80,42],[55,12,80,44,"state"],[55,17,80,49],[55,18,80,50,"unit"],[55,22,80,54],[55,27,80,59],[55,35,80,67],[55,38,80,70],[55,48,80,80],[55,51,80,83],[56,4,80,92],[56,5,80,93],[56,6,80,94],[56,7,80,95],[57,4,82,2,"calculateResult"],[57,19,82,17],[57,21,82,19,"calculateResult"],[57,22,82,19],[57,27,82,25],[58,6,83,4],[58,12,83,10],[59,8,83,12,"currentPoints"],[59,21,83,25],[60,8,83,27,"calibrationScale"],[60,24,83,43],[61,8,83,45,"currentMode"],[62,6,83,57],[62,7,83,58],[62,10,83,61,"get"],[62,13,83,64],[62,14,83,65],[62,15,83,66],[63,6,84,4],[63,10,84,8],[63,11,84,9,"calibrationScale"],[63,27,84,25],[63,31,84,29,"currentPoints"],[63,44,84,42],[63,45,84,43,"length"],[63,51,84,49],[63,54,84,52],[63,55,84,53],[63,57,84,55],[63,64,84,62],[63,65,84,63],[63,66,84,64],[64,6,86,4],[64,12,86,10,"pixelsToMm"],[64,22,86,20],[64,25,86,24,"pixels"],[64,31,86,38],[64,35,86,43,"pixels"],[64,41,86,49],[64,44,86,52,"calibrationScale"],[64,60,86,68],[65,6,88,4],[65,10,88,8,"currentMode"],[65,21,88,19],[65,26,88,24],[65,36,88,34],[65,38,88,36],[66,8,89,6],[66,12,89,10,"totalDistance"],[66,25,89,23],[66,28,89,26],[66,29,89,27],[67,8,90,6],[67,13,90,11],[67,17,90,15,"i"],[67,18,90,16],[67,21,90,19],[67,22,90,20],[67,24,90,22,"i"],[67,25,90,23],[67,28,90,26,"currentPoints"],[67,41,90,39],[67,42,90,40,"length"],[67,48,90,46],[67,51,90,49],[67,52,90,50],[67,54,90,52,"i"],[67,55,90,53],[67,57,90,55],[67,59,90,57],[68,10,91,8],[68,16,91,14,"dx"],[68,18,91,16],[68,21,91,19,"currentPoints"],[68,34,91,32],[68,35,91,33,"i"],[68,36,91,34],[68,39,91,37],[68,40,91,38],[68,41,91,39],[68,42,91,40,"x"],[68,43,91,41],[68,46,91,44,"currentPoints"],[68,59,91,57],[68,60,91,58,"i"],[68,61,91,59],[68,62,91,60],[68,63,91,61,"x"],[68,64,91,62],[69,10,92,8],[69,16,92,14,"dy"],[69,18,92,16],[69,21,92,19,"currentPoints"],[69,34,92,32],[69,35,92,33,"i"],[69,36,92,34],[69,39,92,37],[69,40,92,38],[69,41,92,39],[69,42,92,40,"y"],[69,43,92,41],[69,46,92,44,"currentPoints"],[69,59,92,57],[69,60,92,58,"i"],[69,61,92,59],[69,62,92,60],[69,63,92,61,"y"],[69,64,92,62],[70,10,93,8],[70,16,93,14,"distancePixels"],[70,30,93,28],[70,33,93,31,"Math"],[70,37,93,35],[70,38,93,36,"sqrt"],[70,42,93,40],[70,43,93,41,"dx"],[70,45,93,43],[70,48,93,46,"dx"],[70,50,93,48],[70,53,93,51,"dy"],[70,55,93,53],[70,58,93,56,"dy"],[70,60,93,58],[70,61,93,59],[71,10,94,8,"totalDistance"],[71,23,94,21],[71,27,94,25,"pixelsToMm"],[71,37,94,35],[71,38,94,36,"distancePixels"],[71,52,94,50],[71,53,94,51],[72,8,95,6],[73,8,96,6],[73,15,96,13],[74,10,96,15,"distance"],[74,18,96,23],[74,20,96,25,"totalDistance"],[75,8,96,39],[75,9,96,40],[76,6,97,4],[77,6,99,4],[77,10,99,8],[77,11,99,9,"currentMode"],[77,22,99,20],[77,27,99,25],[77,33,99,31],[77,37,99,35,"currentMode"],[77,48,99,46],[77,53,99,51],[77,61,99,59],[77,66,99,64,"currentPoints"],[77,79,99,77],[77,80,99,78,"length"],[77,86,99,84],[77,90,99,88],[77,91,99,89],[77,93,99,91],[78,8,100,6],[79,8,101,6],[79,12,101,10,"area"],[79,16,101,14],[79,19,101,17],[79,20,101,18],[80,8,102,6],[80,12,102,10,"perimeter"],[80,21,102,19],[80,24,102,22],[80,25,102,23],[81,8,103,6],[81,14,103,12,"n"],[81,15,103,13],[81,18,103,16,"currentPoints"],[81,31,103,29],[81,32,103,30,"length"],[81,38,103,36],[82,8,105,6],[82,13,105,11],[82,17,105,15,"i"],[82,18,105,16],[82,21,105,19],[82,22,105,20],[82,24,105,22,"i"],[82,25,105,23],[82,28,105,26,"n"],[82,29,105,27],[82,31,105,29,"i"],[82,32,105,30],[82,34,105,32],[82,36,105,34],[83,10,106,8],[83,16,106,14,"j"],[83,17,106,15],[83,20,106,18],[83,21,106,19,"i"],[83,22,106,20],[83,25,106,23],[83,26,106,24],[83,30,106,28,"n"],[83,31,106,29],[84,10,107,8],[84,16,107,14,"xi"],[84,18,107,16],[84,21,107,19,"pixelsToMm"],[84,31,107,29],[84,32,107,30,"currentPoints"],[84,45,107,43],[84,46,107,44,"i"],[84,47,107,45],[84,48,107,46],[84,49,107,47,"x"],[84,50,107,48],[84,51,107,49],[85,10,108,8],[85,16,108,14,"yi"],[85,18,108,16],[85,21,108,19,"pixelsToMm"],[85,31,108,29],[85,32,108,30,"currentPoints"],[85,45,108,43],[85,46,108,44,"i"],[85,47,108,45],[85,48,108,46],[85,49,108,47,"y"],[85,50,108,48],[85,51,108,49],[86,10,109,8],[86,16,109,14,"xj"],[86,18,109,16],[86,21,109,19,"pixelsToMm"],[86,31,109,29],[86,32,109,30,"currentPoints"],[86,45,109,43],[86,46,109,44,"j"],[86,47,109,45],[86,48,109,46],[86,49,109,47,"x"],[86,50,109,48],[86,51,109,49],[87,10,110,8],[87,16,110,14,"yj"],[87,18,110,16],[87,21,110,19,"pixelsToMm"],[87,31,110,29],[87,32,110,30,"currentPoints"],[87,45,110,43],[87,46,110,44,"j"],[87,47,110,45],[87,48,110,46],[87,49,110,47,"y"],[87,50,110,48],[87,51,110,49],[88,10,112,8,"area"],[88,14,112,12],[88,18,112,16,"xi"],[88,20,112,18],[88,23,112,21,"yj"],[88,25,112,23],[88,28,112,26,"xj"],[88,30,112,28],[88,33,112,31,"yi"],[88,35,112,33],[89,10,114,8],[89,16,114,14,"dx"],[89,18,114,16],[89,21,114,19,"xj"],[89,23,114,21],[89,26,114,24,"xi"],[89,28,114,26],[90,10,115,8],[90,16,115,14,"dy"],[90,18,115,16],[90,21,115,19,"yj"],[90,23,115,21],[90,26,115,24,"yi"],[90,28,115,26],[91,10,116,8,"perimeter"],[91,19,116,17],[91,23,116,21,"Math"],[91,27,116,25],[91,28,116,26,"sqrt"],[91,32,116,30],[91,33,116,31,"dx"],[91,35,116,33],[91,38,116,36,"dx"],[91,40,116,38],[91,43,116,41,"dy"],[91,45,116,43],[91,48,116,46,"dy"],[91,50,116,48],[91,51,116,49],[92,8,117,6],[93,8,119,6,"area"],[93,12,119,10],[93,15,119,13,"Math"],[93,19,119,17],[93,20,119,18,"abs"],[93,23,119,21],[93,24,119,22,"area"],[93,28,119,26],[93,29,119,27],[93,32,119,30],[93,33,119,31],[94,8,120,6],[94,15,120,13],[95,10,120,15,"area"],[95,14,120,19],[96,10,120,21,"perimeter"],[97,8,120,31],[97,9,120,32],[98,6,121,4],[99,6,123,4],[99,13,123,11],[99,14,123,12],[99,15,123,13],[100,4,124,2],[100,5,124,3],[101,4,126,2,"saveMeasurement"],[101,19,126,17],[101,21,126,19],[101,27,126,19,"saveMeasurement"],[101,28,126,26,"name"],[101,32,126,30],[101,34,126,32,"imageData"],[101,43,126,41],[101,48,126,46],[102,6,127,4],[102,12,127,10],[103,8,127,12,"currentMode"],[103,19,127,23],[104,8,127,25,"currentPoints"],[104,21,127,38],[105,8,127,40,"calibrationScale"],[105,24,127,56],[106,8,127,58,"unit"],[107,6,127,63],[107,7,127,64],[107,10,127,67,"get"],[107,13,127,70],[107,14,127,71],[107,15,127,72],[108,6,128,4],[108,10,128,8],[108,11,128,9,"calibrationScale"],[108,27,128,25],[108,31,128,29,"currentPoints"],[108,44,128,42],[108,45,128,43,"length"],[108,51,128,49],[108,54,128,52],[108,55,128,53],[108,57,128,55],[109,6,130,4],[109,12,130,10,"result"],[109,18,130,16],[109,21,130,19,"get"],[109,24,130,22],[109,25,130,23],[109,26,130,24],[109,27,130,25,"calculateResult"],[109,42,130,40],[109,43,130,41],[109,44,130,42],[110,6,131,4],[110,12,131,10,"measurement"],[110,23,131,34],[110,26,131,37],[111,8,132,6,"id"],[111,10,132,8],[111,12,132,10,"Date"],[111,16,132,14],[111,17,132,15,"now"],[111,20,132,18],[111,21,132,19],[111,22,132,20],[111,23,132,21,"toString"],[111,31,132,29],[111,32,132,30],[111,33,132,31],[112,8,133,6,"name"],[112,12,133,10],[113,8,134,6,"mode"],[113,12,134,10],[113,14,134,12,"currentMode"],[113,25,134,23],[114,8,135,6,"points"],[114,14,135,12],[114,16,135,14,"currentPoints"],[114,29,135,27],[115,8,136,6,"calibrationScale"],[115,24,136,22],[116,8,137,6,"result"],[116,14,137,12],[117,8,138,6,"unit"],[117,12,138,10],[118,8,139,6,"timestamp"],[118,17,139,15],[118,19,139,17,"Date"],[118,23,139,21],[118,24,139,22,"now"],[118,27,139,25],[118,28,139,26],[118,29,139,27],[119,8,140,6,"imageData"],[120,6,141,4],[120,7,141,5],[121,6,143,4],[121,12,143,10,"measurements"],[121,24,143,22],[121,27,143,25],[121,28,143,26],[121,31,143,29,"get"],[121,34,143,32],[121,35,143,33],[121,36,143,34],[121,37,143,35,"measurements"],[121,49,143,47],[121,51,143,49,"measurement"],[121,62,143,60],[121,63,143,61],[122,6,144,4,"set"],[122,9,144,7],[122,10,144,8],[123,8,144,10,"measurements"],[123,20,144,22],[124,8,144,24,"currentPoints"],[124,21,144,37],[124,23,144,39],[125,6,144,42],[125,7,144,43],[125,8,144,44],[126,6,146,4],[126,10,146,8],[127,8,147,6],[127,14,147,12,"AsyncStorage"],[127,26,147,24],[127,27,147,24,"default"],[127,34,147,24],[127,35,147,25,"setItem"],[127,42,147,32],[127,43,147,33,"STORAGE_KEY"],[127,54,147,44],[127,56,147,46,"JSON"],[127,60,147,50],[127,61,147,51,"stringify"],[127,70,147,60],[127,71,147,61,"measurements"],[127,83,147,73],[127,84,147,74],[127,85,147,75],[128,6,148,4],[128,7,148,5],[128,8,148,6],[128,15,148,13,"error"],[128,20,148,18],[128,22,148,20],[129,8,149,6,"console"],[129,15,149,13],[129,16,149,14,"error"],[129,21,149,19],[129,22,149,20],[129,49,149,47],[129,51,149,49,"error"],[129,56,149,54],[129,57,149,55],[130,6,150,4],[131,4,151,2],[131,5,151,3],[132,4,153,2,"loadMeasurements"],[132,20,153,18],[132,22,153,20],[132,28,153,20,"loadMeasurements"],[132,29,153,20],[132,34,153,32],[133,6,154,4],[133,10,154,8],[134,8,155,6],[134,14,155,12,"data"],[134,18,155,16],[134,21,155,19],[134,27,155,25,"AsyncStorage"],[134,39,155,37],[134,40,155,37,"default"],[134,47,155,37],[134,48,155,38,"getItem"],[134,55,155,45],[134,56,155,46,"STORAGE_KEY"],[134,67,155,57],[134,68,155,58],[135,8,156,6],[135,12,156,10,"data"],[135,16,156,14],[135,18,156,16],[136,10,157,8],[136,16,157,14,"measurements"],[136,28,157,26],[136,31,157,29,"JSON"],[136,35,157,33],[136,36,157,34,"parse"],[136,41,157,39],[136,42,157,40,"data"],[136,46,157,44],[136,47,157,45],[137,10,158,8,"set"],[137,13,158,11],[137,14,158,12],[138,12,158,14,"measurements"],[139,10,158,27],[139,11,158,28],[139,12,158,29],[140,8,159,6],[141,6,160,4],[141,7,160,5],[141,8,160,6],[141,15,160,13,"error"],[141,20,160,18],[141,22,160,20],[142,8,161,6,"console"],[142,15,161,13],[142,16,161,14,"error"],[142,21,161,19],[142,22,161,20],[142,51,161,49],[142,53,161,51,"error"],[142,58,161,56],[142,59,161,57],[143,6,162,4],[144,4,163,2],[144,5,163,3],[145,4,165,2,"deleteMeasurement"],[145,21,165,19],[145,23,165,21],[145,29,165,28,"id"],[145,31,165,30],[145,35,165,35],[146,6,166,4],[146,12,166,10,"measurements"],[146,24,166,22],[146,27,166,25,"get"],[146,30,166,28],[146,31,166,29],[146,32,166,30],[146,33,166,31,"measurements"],[146,45,166,43],[146,46,166,44,"filter"],[146,52,166,50],[146,53,166,52,"m"],[146,54,166,53],[146,58,166,58,"m"],[146,59,166,59],[146,60,166,60,"id"],[146,62,166,62],[146,67,166,67,"id"],[146,69,166,69],[146,70,166,70],[147,6,167,4,"set"],[147,9,167,7],[147,10,167,8],[148,8,167,10,"measurements"],[149,6,167,23],[149,7,167,24],[149,8,167,25],[150,6,168,4],[150,10,168,8],[151,8,169,6],[151,14,169,12,"AsyncStorage"],[151,26,169,24],[151,27,169,24,"default"],[151,34,169,24],[151,35,169,25,"setItem"],[151,42,169,32],[151,43,169,33,"STORAGE_KEY"],[151,54,169,44],[151,56,169,46,"JSON"],[151,60,169,50],[151,61,169,51,"stringify"],[151,70,169,60],[151,71,169,61,"measurements"],[151,83,169,73],[151,84,169,74],[151,85,169,75],[152,6,170,4],[152,7,170,5],[152,8,170,6],[152,15,170,13,"error"],[152,20,170,18],[152,22,170,20],[153,8,171,6,"console"],[153,15,171,13],[153,16,171,14,"error"],[153,21,171,19],[153,22,171,20],[153,51,171,49],[153,53,171,51,"error"],[153,58,171,56],[153,59,171,57],[154,6,172,4],[155,4,173,2],[156,2,174,0],[156,3,174,1],[156,4,174,2],[156,5,174,3],[157,0,174,4],[157,3]],"functionMap":{"names":["<global>","create$argument_0","setMode","addPoint","set$argument_0","removeLastPoint","clearPoints","setCalibration","toggleUnit","calculateResult","pixelsToMm","saveMeasurement","loadMeasurements","deleteMeasurement","get.measurements.filter$argument_0"],"mappings":"AAA;4DCqD;WCS,uDD;YEE;QCE,kED;GFC;mBIE;QDC;MCE;GJC;eKE,gCL;kBME,+DN;cOE,UJ,sEI,CP;mBQE;uBCI,6CD;GRsC;mBUE;GVyB;oBWE;GXU;qBYE;mDCC,kBD;GZO;EDC"},"hasCjsExports":false},"type":"js/module"}]}